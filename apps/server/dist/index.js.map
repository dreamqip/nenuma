{"version":3,"sources":["../src/server.ts","../src/plugins/bybit.ts","../src/plugins/config.ts","../src/constants.ts","../src/dtos/market.dto.ts","../src/handlers/market.ts","../src/services/ton-api.service.ts","../src/helpers/wallets-data.helper.ts","../src/services/ton-proof.service.ts","../src/services/market.service.ts","../src/routes/market.ts","../src/dtos/ton-connect.dto.ts","../src/handlers/ton-connect.ts","../src/routes/ton-connect.ts","../src/routes/index.ts","../src/index.ts"],"names":["cors","helmet","jwt","redis","swagger","websocket","scalar","fastify","serializerCompiler","validatorCompiler","DefaultLogger","WebsocketClient","fp","bybitPlugin","server","logger","params","wsClient","bybit_default","z","NodeEnv","configSchema","configPlugin","config","config_default","CHAIN","BybitKlineTopic","KlineTopic","candlestickSchema","bybitResponseSchema","candlestickResponseSchema","candlesticksResponseSchema","klineMessageSchema","ZodError","Address","TonClient4","Buffer","TonApiService","_TonApiService","client","address","masterAt","result","Cell","WalletContractV1R1","WalletContractV1R2","WalletContractV1R3","WalletContractV2R1","WalletContractV2R2","WalletContractV3R1","WalletContractV3R2","WalletContractV4R2","contractAddress","WalletContractV4R1","args","wallet","data","code","knownWallets","loadWalletV1Data","loadWalletV2Data","loadWalletV3Data","loadWalletV4Data","contract","loadData","cs","seqno","publicKey","walletId","plugins","tryParsePublicKey","stateInit","sha256","loadStateInit","tweetnacl","tonProofPrefix","tonConnectPrefix","validAuthTime","TonProofService","payload","getWalletPublicKey","wantedPublicKey","wantedAddress","message","wc","ts","dl","msg","msgHash","fullMsg","MarketService","redisKeys","pipeline","results","topic24h","item","topic1m","parsedTopic24h","parsedTopic1m","isKlineOfInterest","topic","handleKlineTopic","request","reply","latestCandlestick","error","candlesticks","candlestick","handleKlineTopicWS","socket","bybit","topics","handleBybitResponse","mnemonicToPrivateKey","TonClient","WalletContractV4","beginCell","internal","DataStream","storeDSTPublishCandlestick","routes","batches","shouldSkip","_","info","keyPair","err","token","market_default","checkProofRequestSchema","fromNano","handleCheckProof","newToken","handleGenerateProofPayload","handleAccountInfo","network","account","ton_connect_default","routes_default","server_default","port","host","signal"],"mappings":"AAAA,OAAOA,OAAU,gBACjB,OAAOC,OAAY,kBACnB,OAAOC,OAAS,eAChB,OAAOC,OAAW,iBAClB,OAAOC,OAAa,mBACpB,OAAOC,OAAe,qBACtB,OAAOC,OAAY,gCACnB,OAAOC,OAAa,UACpB,OAAS,sBAAAC,GAAoB,qBAAAC,OAA+C,4BCR5E,OAAS,iBAAAC,GAAe,mBAAAC,OAAuB,YAE/C,OAAOC,OAAQ,iBAEf,IAAMC,GAAkC,MAAOC,GAAW,CACxD,IAAMC,EAAS,CACb,GAAGL,GACH,MAAO,IAAIM,IAAgB,QAAQ,IAAI,QAAS,GAAGA,CAAM,CAC3D,EAEMC,EAAW,IAAIN,GACnB,CACE,OAAQ,IACV,CAEF,EAEAG,EAAO,QAAQ,UAAW,SAAY,CACpCG,EAAS,SAAS,CACpB,CAAC,EAEDH,EAAO,SAAS,QAAS,CACvB,GAAIG,CACN,CAAC,CACH,EAUOC,EAAQN,GAAGC,EAAW,EClC7B,MAAO,gBAEP,OAAOD,OAAQ,iBACf,OAAOO,MAAO,MAEP,IAAKC,OACVA,EAAA,YAAc,cACdA,EAAA,KAAO,OACPA,EAAA,WAAa,aAHHA,OAAA,IAMNC,GAAeF,EAAE,OAAO,CAC5B,SAAUA,EAAE,WAAWC,CAAO,EAC9B,UAAWD,EAAE,OAAO,EACpB,SAAUA,EAAE,OAAO,EACnB,SAAUA,EAAE,OAAO,EACnB,gBAAiBA,EAAE,OAAO,EAC1B,UAAWA,EAAE,OAAO,EACpB,YAAaA,EAAE,OAAO,EACtB,cAAeA,EAAE,OAAO,EACxB,WAAYA,EAAE,OAAO,EACrB,qBAAsBA,EAAE,OAAO,CACjC,CAAC,EAIKG,GAAmC,MAAOR,GAAW,CACzD,IAAMS,EAASF,GAAa,UAAU,QAAQ,GAAG,EAEjD,GAAI,CAACE,EAAO,QACV,MAAM,IAAI,MAAM,iCAAmC,KAAK,UAAUA,EAAO,MAAO,KAAM,CAAC,CAAC,EAE1FT,EAAO,SAAS,SAAUS,EAAO,IAAI,CACvC,EAQOC,EAAQZ,GAAGU,EAAY,ECzCvB,IAAKG,OACVA,EAAA,QAAU,OACVA,EAAA,QAAU,KAFAA,OAAA,IAKAC,OACVA,EAAA,QAAU,kBACVA,EAAA,QAAU,kBACVA,EAAA,QAAU,kBACVA,EAAA,QAAU,kBACVA,EAAA,QAAU,kBALAA,OAAA,ICLZ,OAAOP,MAAO,MAEP,IAAMQ,EAAaR,EAAE,KAAK,CAAC,UAAW,UAAW,UAAW,UAAW,SAAS,CAAC,EAI3ES,EAAoBT,EAAE,OAAO,CACxC,MAAOA,EAAE,OAAO,EAChB,IAAKA,EAAE,OAAO,EACd,SAAUA,EAAE,OAAO,EACnB,KAAMA,EAAE,OAAO,EACf,MAAOA,EAAE,OAAO,EAChB,KAAMA,EAAE,OAAO,EACf,IAAKA,EAAE,OAAO,EACd,OAAQA,EAAE,OAAO,EACjB,SAAUA,EAAE,OAAO,EACnB,QAASA,EAAE,QAAQ,EACnB,UAAWA,EAAE,OAAO,CACtB,CAAC,EAIYU,GAAsBV,EAAE,OAAO,CAC1C,MAAOA,EAAE,OAAO,EAChB,KAAMA,EAAE,MAAMS,CAAiB,EAC/B,GAAIT,EAAE,OAAO,EACb,KAAMA,EAAE,OAAO,EACf,MAAOA,EAAE,OAAO,CAClB,CAAC,EAIYW,GAA4BX,EAAE,OAAO,CAChD,KAAMA,EAAE,OAAO,EACf,MAAOA,EAAE,OAAO,EAChB,KAAMA,EAAE,OAAO,EACf,IAAKA,EAAE,OAAO,EACd,KAAMA,EAAE,OAAO,CACjB,CAAC,EACYY,GAA6BZ,EAAE,MAAMW,EAAyB,EAK9DE,EAAqBb,EAAE,OAAO,CACzC,GAAIA,EAAE,KAAK,CAAC,WAAW,CAAC,EACxB,KAAMA,EAAE,MAAMQ,CAAU,CAC1B,CAAC,ECnCD,OAAS,YAAAM,MAAgB,MCZzB,OAAS,WAAAC,EAAS,cAAAC,MAAkB,WAEpC,OAAS,UAAAC,OAAc,SAIhB,IAAMC,EAAN,MAAMC,CAAc,CACzB,OAAc,OAAOC,EAA2C,CAC9D,OAAIA,IAAW,SACbA,EAAS,IAAIJ,EAAW,CACtB,SAAU,kCACZ,CAAC,GAECI,IAAW,OACbA,EAAS,IAAIJ,EAAW,CACtB,SAAU,kCACZ,CAAC,GAEI,IAAIG,EAAcC,CAAM,CACjC,CAEiB,OAET,YAAYA,EAAoB,CACtC,KAAK,OAASA,CAChB,CAKA,MAAa,mBAAmBC,EAAkC,CAChE,IAAMC,EAAW,MAAM,KAAK,OAAO,aAAa,EAC1CC,EAAS,MAAM,KAAK,OAAO,UAC/BD,EAAS,KAAK,MACdP,EAAQ,MAAMM,CAAO,EACrB,iBACA,CAAC,CACH,EACA,OAAOJ,GAAO,KAAKM,EAAO,OAAO,cAAc,EAAE,SAAS,EAAE,EAAE,SAAS,GAAI,GAAG,EAAG,KAAK,CACxF,CAKA,MAAa,eAAeF,EAAgE,CAC1F,IAAMC,EAAW,MAAM,KAAK,OAAO,aAAa,EAChD,OAAO,MAAM,KAAK,OAAO,WAAWA,EAAS,KAAK,MAAOP,EAAQ,MAAMM,CAAO,CAAC,CACjF,CACF,EChDA,OACE,QAAAG,GAEA,sBAAAC,GACA,sBAAAC,GACA,sBAAAC,GACA,sBAAAC,GACA,sBAAAC,GACA,sBAAAC,GACA,sBAAAC,GACA,oBAAoBC,EACpB,mBAAAC,OAEK,WACP,OAAS,UAAAhB,MAAc,SAEhB,IAAMiB,EAAN,KAAyB,CAC9B,OAAO,OAAOC,EAA0E,CACtF,IAAMC,EAASJ,EAAmB,OAAOG,CAAI,EACvC,CAAE,KAAAE,CAAK,EAAID,EAAO,KAClBE,EAAOd,GAAK,QAChBP,EAAO,KACL,6gDACA,KACF,CACF,EAAE,CAAC,EACH,OAACmB,EAAe,KAAO,CAAE,KAAAC,EAAM,KAAAC,CAAK,EACnCF,EAAe,QAAUH,GAAgBE,EAAK,UAAWC,EAAO,IAAI,EAC9DA,CACT,CACF,EAEMG,GAAe,CACnB,CAAE,SAAUd,GAAoB,SAAUe,CAAiB,EAC3D,CAAE,SAAUd,GAAoB,SAAUc,CAAiB,EAC3D,CAAE,SAAUb,GAAoB,SAAUa,CAAiB,EAC3D,CAAE,SAAUZ,GAAoB,SAAUa,CAAiB,EAC3D,CAAE,SAAUZ,GAAoB,SAAUY,CAAiB,EAC3D,CAAE,SAAUX,GAAoB,SAAUY,CAAiB,EAC3D,CAAE,SAAUX,GAAoB,SAAUW,CAAiB,EAC3D,CAAE,SAAUR,EAAoB,SAAUS,CAAiB,EAC3D,CAAE,SAAUX,EAAoB,SAAUW,CAAiB,CAC7D,EAAE,IAAI,CAAC,CAAE,SAAAC,EAAU,SAAAC,CAAS,KAAO,CACjC,SAAUD,EACV,SAAUC,EACV,OAAQD,EAAS,OAAO,CAAE,UAAW,EAAG,UAAW3B,EAAO,MAAM,EAAE,CAAE,CAAC,CACvE,EAAE,EAEF,SAASuB,EAAiBM,EAAW,CACnC,IAAMC,EAAQD,EAAG,SAAS,EAAE,EACtBE,EAAYF,EAAG,WAAW,EAAE,EAClC,MAAO,CAAE,MAAAC,EAAO,UAAAC,CAAU,CAC5B,CAEA,SAASP,EAAiBK,EAAW,CACnC,IAAMC,EAAQD,EAAG,SAAS,EAAE,EACtBE,EAAYF,EAAG,WAAW,EAAE,EAClC,MAAO,CAAE,MAAAC,EAAO,UAAAC,CAAU,CAC5B,CAEA,SAASN,EAAiBI,EAAW,CACnC,IAAMC,EAAQD,EAAG,SAAS,EAAE,EACtBG,EAAWH,EAAG,SAAS,EAAE,EACzBE,EAAYF,EAAG,WAAW,EAAE,EAClC,MAAO,CAAE,MAAAC,EAAO,UAAAC,EAAW,SAAAC,CAAS,CACtC,CAEA,SAASN,EAAiBG,EAAW,CACnC,IAAMC,EAAQD,EAAG,SAAS,EAAE,EACtBG,EAAWH,EAAG,SAAS,EAAE,EACzBE,EAAYF,EAAG,WAAW,EAAE,EAC5BI,EAAUJ,EAAG,aAAa,EAChC,MAAO,CAAE,MAAAC,EAAO,UAAAC,EAAW,SAAAC,EAAU,QAAAC,CAAQ,CAC/C,CAEO,SAASC,EAAkBC,EAAqC,CACrE,GAAI,CAACA,EAAU,MAAQ,CAACA,EAAU,KAChC,OAAO,KAGT,OAAW,CAAE,OAAAhB,EAAQ,SAAAS,CAAS,IAAKN,GACjC,GAAI,CACF,GAAIH,EAAO,KAAK,KAAK,OAAOgB,EAAU,IAAI,EACxC,OAAOP,EAASO,EAAU,KAAK,WAAW,CAAC,EAAE,SAEjD,MAAY,CAAC,CAGf,OAAO,IACT,CCvFA,OAAS,UAAAC,MAAc,cACvB,OAAS,WAAAtC,GAAS,QAAAS,GAAM,mBAAAS,GAAiB,iBAAAqB,OAAqB,WAC9D,OAAS,UAAArC,MAAc,SAEvB,OAAOsC,MAAe,YAEtB,IAAMC,GAAiB,qBACjBC,GAAmB,cACnBC,GAAgB,GAAK,GAEdC,EAAN,KAAsB,CAIpB,iBAA0B,CAC/B,OAAO1C,EAAO,KAAKsC,EAAU,YAAY,EAAE,CAAC,EAAE,SAAS,KAAK,CAC9D,CAMA,MAAa,WACXK,EACAC,EACkB,CAClB,GAAI,CACF,IAAMT,EAAYE,GAAc9B,GAAK,WAAWoC,EAAQ,MAAM,UAAU,EAAE,WAAW,CAAC,EAMlFZ,EAAYG,EAAkBC,CAAS,GAAM,MAAMS,EAAmBD,EAAQ,OAAO,EACzF,GAAI,CAACZ,EACH,MAAO,GAIT,IAAMc,EAAkB7C,EAAO,KAAK2C,EAAQ,WAAY,KAAK,EAC7D,GAAI,CAACZ,EAAU,OAAOc,CAAe,EACnC,MAAO,GAIT,IAAMC,EAAgBhD,GAAQ,MAAM6C,EAAQ,OAAO,EAC7CvC,EAAUY,GAAgB8B,EAAc,UAAWX,CAAS,EAYlE,GAXI,CAAC/B,EAAQ,OAAO0C,CAAa,GAUrB,KAAK,MAAM,KAAK,IAAI,EAAI,GAAI,EAC9BL,GAAgBE,EAAQ,MAAM,UACtC,MAAO,GAGT,IAAMI,EAAU,CACd,UAAW3C,EAAQ,UACnB,QAASA,EAAQ,KACjB,OAAQ,CACN,YAAauC,EAAQ,MAAM,OAAO,YAClC,MAAOA,EAAQ,MAAM,OAAO,KAC9B,EACA,UAAW3C,EAAO,KAAK2C,EAAQ,MAAM,UAAW,QAAQ,EACxD,QAASA,EAAQ,MAAM,QACvB,UAAWA,EAAQ,MAAM,WACzB,UAAWA,EAAQ,MAAM,SAC3B,EAEMK,EAAKhD,EAAO,MAAM,CAAC,EACzBgD,EAAG,cAAcD,EAAQ,UAAW,CAAC,EAErC,IAAME,EAAKjD,EAAO,MAAM,CAAC,EACzBiD,EAAG,iBAAiB,OAAOF,EAAQ,SAAS,EAAG,CAAC,EAEhD,IAAMG,EAAKlD,EAAO,MAAM,CAAC,EACzBkD,EAAG,cAAcH,EAAQ,OAAO,YAAa,CAAC,EAO9C,IAAMI,EAAMnD,EAAO,OAAO,CACxBA,EAAO,KAAKuC,EAAc,EAC1BS,EACAD,EAAQ,QACRG,EACAlD,EAAO,KAAK+C,EAAQ,OAAO,KAAK,EAChCE,EACAjD,EAAO,KAAK+C,EAAQ,OAAO,CAC7B,CAAC,EAEKK,EAAUpD,EAAO,KAAK,MAAMoC,EAAOe,CAAG,CAAC,EAGvCE,EAAUrD,EAAO,OAAO,CAC5BA,EAAO,KAAK,CAAC,IAAM,GAAI,CAAC,EACxBA,EAAO,KAAKwC,EAAgB,EAC5BY,CACF,CAAC,EAEK9C,GAASN,EAAO,KAAK,MAAMoC,EAAOiB,CAAO,CAAC,EAEhD,OAAOf,EAAU,KAAK,SAAS,OAAOhC,GAAQyC,EAAQ,UAAWhB,CAAS,CAC5E,MAAY,CACV,MAAO,EACT,CACF,CACF,EClHA,OAAOhD,OAAO,MAEP,IAAMuE,EAAN,KAAoB,CASzB,aAAa,gBACXC,EACAxF,EACyF,CACzF,IAAMyF,EAAWzF,EAAM,SAAS,EAChCyF,EAAS,OAAOD,EAAU,CAAC,EAAG,EAAG,EAAE,EACnCC,EAAS,IAAID,EAAU,CAAC,CAAC,EACzB,IAAME,EAAU,MAAMD,EAAS,KAAK,EAEpC,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,iCAAiC,EAGnD,IAAMC,GAAYD,EAAQ,CAAC,IAAI,CAAC,GAAe,IAAKE,GAAiB,KAAK,MAAMA,CAAI,CAAC,EAC/EC,EAAU,KAAK,MAAMH,EAAQ,CAAC,IAAI,CAAC,CAAW,EAE9CI,EAAiB9E,GAAE,MAAMS,CAAiB,EAAE,UAAUkE,CAAQ,EAC9DI,EAAgBtE,EAAkB,UAAUoE,CAAO,EAEzD,GAAI,CAACC,EAAe,SAAW,CAACC,EAAc,QAC5C,MAAMD,EAAe,OAASC,EAAc,MAG9C,MAAO,CACL,sBAAuBD,EAAe,KACtC,kBAAmBC,EAAc,IACnC,CACF,CACF,EJ3BA,IAAMC,GAAoB,CAACC,EAAe5C,IAA2BA,EAAK,QAAU4C,EAEvEC,EAAmB,MAC9BC,EACAC,IACG,CACH,GAAM,CAAE,MAAApG,CAAM,EAAImG,EAAQ,OACpB,CAAE,MAAAF,CAAM,EAAIE,EAAQ,OAEtB9C,EAAyB,CAAC,EAC1BgD,EAA2C,KAC3CC,EAEJ,OAAQL,EAAO,CACb,KAAKzE,EAAW,KAAK,QACnB,GAAI,CACF,IAAMe,EAAS,MAAMgD,EAAc,gBACjC,+BAA0C,EAC1CvF,CACF,EAEAqD,EAAOd,EAAO,sBACd8D,EAAoB9D,EAAO,iBAC7B,OAAS+D,EAAO,CACVA,aAAiBxE,IACnBwE,EAAQA,EAEZ,CACA,MACF,KAAK9E,EAAW,KAAK,QACnB,GAAI,CACF,IAAMe,EAAS,MAAMgD,EAAc,gBACjC,+BAA0C,EAC1CvF,CACF,EAEAqD,EAAOd,EAAO,sBACd8D,EAAoB9D,EAAO,iBAC7B,OAAS+D,EAAO,CACVA,aAAiBxE,IACnBwE,EAAQA,EAEZ,CACA,MACF,KAAK9E,EAAW,KAAK,QACnB,GAAI,CACF,IAAMe,EAAS,MAAMgD,EAAc,gBACjC,+BAA0C,EAC1CvF,CACF,EAEAqD,EAAOd,EAAO,sBACd8D,EAAoB9D,EAAO,iBAC7B,OAAS+D,EAAO,CACVA,aAAiBxE,IACnBwE,EAAQA,EAEZ,CACA,MACF,KAAK9E,EAAW,KAAK,QACnB,GAAI,CACF,IAAMe,EAAS,MAAMgD,EAAc,gBACjC,+BAA0C,EAC1CvF,CACF,EAEAqD,EAAOd,EAAO,sBACd8D,EAAoB9D,EAAO,iBAC7B,OAAS+D,EAAO,CACVA,aAAiBxE,IACnBwE,EAAQA,EAEZ,CACA,MACF,KAAK9E,EAAW,KAAK,QACnB,GAAI,CACF,IAAMe,EAAS,MAAMgD,EAAc,gBACjC,+BAA0C,EAC1CvF,CACF,EAEAqD,EAAOd,EAAO,sBACd8D,EAAoB9D,EAAO,iBAC7B,OAAS+D,EAAO,CACVA,aAAiBxE,IACnBwE,EAAQA,EAEZ,CACA,KACJ,CAEA,GAAIA,EACF,OAAOF,EAAM,OAAO,GAAG,EAAE,KAAKE,EAAM,MAAM,EAG5C,GAAIjD,EAAK,QAAU,GAAK,CAACgD,EACvB,OAAOD,EAAM,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,wCAAyC,CAAC,EAGnF,IAAMG,EAAwC,CAAC,EAC/C,QAAWC,KAAenD,EACxBkD,EAAa,KAAK,CAChB,KAAM,OAAOC,EAAY,IAAI,EAC7B,MAAO,OAAOA,EAAY,KAAK,EAC/B,KAAM,OAAOA,EAAY,IAAI,EAC7B,IAAK,OAAOA,EAAY,GAAG,EAC3B,KAAMA,EAAY,UAAY,GAChC,CAAC,EAGH,OAAOJ,EAAM,KAAK,GAAG,EAAE,KAAK,CAC1B,KAAMG,EACN,OAAQ,CACN,KAAM,OAAOF,GAAmB,IAAI,EACpC,MAAO,OAAOA,GAAmB,KAAK,EACtC,KAAM,OAAOA,GAAmB,IAAI,EACpC,IAAK,OAAOA,GAAmB,GAAG,EAClC,KAAMA,EAAkB,IAAM,GAChC,CACF,CAAC,CACH,EAEaI,EAAqB,MAAOC,EAAmBP,IAA4B,CACtF,GAAM,CAAE,MAAAQ,CAAM,EAAIR,EAAQ,OAE1BO,EAAO,GAAG,UAAW,MAAO1B,GAAY,CACtC,GAAI,CAGF,IAAM4B,EAFO/E,EAAmB,MAAM,KAAK,MAAMmD,EAAQ,SAAS,CAAC,CAAC,EAEhD,KAEpB2B,EAAM,GAAG,GAAG,SAAWtD,GAA2BwD,GAAoBH,EAAQrD,EAAMuD,CAAM,CAAC,CAC7F,OAASN,EAAO,CACd,GAAIA,aAAiBxE,EAAU,CAC7B4E,EAAO,KACL,KAAK,UAAU,CACb,MAAOJ,EAAM,OAAO,CACtB,CAAC,CACH,EACA,MACF,CAGIA,aAAiB,OACnBI,EAAO,KACL,KAAK,UAAU,CACb,MAAO,sBACT,CAAC,CACH,CAEJ,CACF,CAAC,CACH,EAEMG,GAAsB,CAACH,EAAmBrD,EAAwBuD,IAA0B,CAChG,QAAWX,KAASW,EAClB,GAAIZ,GAAkB,WAAWC,CAAK,GAAI5C,CAAI,EAC5C,QAAWmD,KAAenD,EAAK,KAC7BqD,EAAO,KACL,KAAK,UAAU,CACb,MAAOT,EACP,KAAM,CACJ,KAAM,OAAOO,EAAY,IAAI,EAC7B,IAAK,OAAOA,EAAY,GAAG,EAC3B,KAAM,OAAOA,EAAY,IAAI,EAC7B,MAAO,OAAOA,EAAY,KAAK,EAC/B,KAAM,KAAK,KAAKA,EAAY,IAAM,GAAI,CACxC,CACF,CAAC,CACH,CAIR,EKzLA,OAAS,wBAAAM,OAA4B,cACrC,OAAS,WAAA/E,GAAS,aAAAgF,GAAW,oBAAAC,GAAkB,aAAAC,GAAW,YAAAC,OAAgB,WAG1E,OAAS,cAAAC,GAAY,8BAAAC,OAAkC,mBACvD,OAAOpG,MAAO,MAEd,IAAMqG,GAA6B,MAAO1G,GAAW,CACnD,GAAM,CAAE,MAAAX,EAAO,MAAA2G,CAAM,EAAIhG,EAEzBgG,EAAM,GAAG,YAAY,OAAO,OAAOpF,CAAe,EAAG,MAAM,EAE3DoF,EAAM,GAAG,GAAG,SAAU,MAAOtD,GAA2B,CACtD,OAAQA,EAAK,MAAO,CAClB,sBACE,QAAWmD,KAAenD,EAAK,KAC7B,GAAImD,EAAY,QAAS,CACvBxG,EACG,SAAS,EACT,sBAA4B,KAAK,UAAUwG,CAAW,CAAC,EACvD,sBAA4B,EAAG,IAAI,EACnC,KAAK,EAER,GAAI,CACF,IAAMpE,EAAS,IAAI2E,GAAU,CAC3B,SAAU,+CACV,OAAQ,kEACV,CAAC,EAQKO,EAAU,MANDlF,EAAO,KACpB+E,GAAW,YACTpF,GAAQ,MAAM,kDAAkD,CAClE,CACF,EAE6B,WAAW,EAEpCwF,EAAa,GAEjB,OAAW,CAACC,EAAGC,CAAI,IAAKH,EAClBG,EAAK,mBAAqB,EAC5BF,EAAa,GAEbA,EAAa,GAIjB,GAAIA,EACF,OAGF,IAAIG,EAAU,MAAMZ,GAAqB,CACvC,WACA,QACA,SACA,WACA,OACA,OACA,OACA,SACA,SACA,WACA,QACA,UACA,MACA,SACA,SACA,QACA,UACA,OACA,SACA,SACA,QACA,QACA,QACA,MACF,CAAC,EAGG1D,EAAS4D,GAAiB,OAAO,CAAE,UADvB,EACkC,UAAWU,EAAQ,SAAU,CAAC,EAC5E9D,EAAWxB,EAAO,KAAKgB,CAAM,EAG7BW,EAAgB,MAAMH,EAAS,SAAS,EAE5C,MAAMA,EAAS,aAAa,CAC1B,MAAAG,EACA,UAAW2D,EAAQ,UACnB,SAAU,CACRR,GAAS,CACP,MAAO,IACP,GAAI,mDACJ,KAAMD,GAAU,EACb,MACCG,GAA2B,CACzB,OAAQ,wBACR,QAAS,KACT,YAAa,CACX,OAAQ,cACR,KAAM,OAAOZ,EAAY,KAAK,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC,EACjD,KAAM,OAAOA,EAAY,KAAK,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC,EACjD,IAAK,OAAOA,EAAY,IAAI,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC,EAC/C,MAAO,OAAOA,EAAY,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC,EACnD,MAAO,OAAOA,EAAY,KAAK,EAC/B,IAAK,OAAOA,EAAY,GAAG,CAC7B,CACF,CAAC,CACH,EACC,QAAQ,CACb,CAAC,CACH,CACF,CAAC,CACH,MAAgB,CAAC,CACnB,MACExG,EAAM,mBAAyB,KAAK,UAAUwG,CAAW,CAAC,EAG9D,MACF,sBACE,QAAWA,KAAenD,EAAK,KACzBmD,EAAY,QACdxG,EACG,SAAS,EACT,sBAA4B,KAAK,UAAUwG,CAAW,CAAC,EACvD,sBAA4B,EAAG,IAAI,EACnC,KAAK,EAERxG,EAAM,mBAAyB,KAAK,UAAUwG,CAAW,CAAC,EAG9D,MACF,sBACE,QAAWA,KAAenD,EAAK,KACzBmD,EAAY,QACdxG,EACG,SAAS,EACT,sBAA4B,KAAK,UAAUwG,CAAW,CAAC,EACvD,sBAA4B,EAAG,IAAI,EACnC,KAAK,EAERxG,EAAM,mBAAyB,KAAK,UAAUwG,CAAW,CAAC,EAG9D,MACF,sBACE,QAAWA,KAAenD,EAAK,KACzBmD,EAAY,QACdxG,EACG,SAAS,EACT,sBAA4B,KAAK,UAAUwG,CAAW,CAAC,EACvD,sBAA4B,EAAG,IAAI,EACnC,KAAK,EAERxG,EAAM,mBAAyB,KAAK,UAAUwG,CAAW,CAAC,EAG9D,MACF,sBACE,QAAWA,KAAenD,EAAK,KACzBmD,EAAY,QACdxG,EACG,SAAS,EACT,sBAA4B,KAAK,UAAUwG,CAAW,CAAC,EACvD,sBAA4B,EAAG,IAAI,EACnC,KAAK,EAERxG,EAAM,mBAAyB,KAAK,UAAUwG,CAAW,CAAC,EAG9D,KACJ,CACF,CAAC,EAED7F,EAAO,IACL,gBACA,CACE,OAAQ,CACN,OAAQK,EAAE,OAAO,CACf,MAAOQ,CACT,CAAC,EACD,YAAaR,EACV,OAAO,CACN,MAAOA,EAAE,OAAO,EAAE,SAAS,CAC7B,CAAC,EACA,SAAS,CACd,EACA,WAAY,MAAOmF,EAASC,IAAU,CACpC,GAAI,CACF,MAAMD,EAAQ,UAAU,CAC1B,OAASwB,EAAK,CACZvB,EAAM,KAAKuB,CAAG,CAChB,CACF,CACF,EACAzB,CACF,EAEAvF,EAAO,IACL,SACA,CACE,UAAW,GACX,WAAY,MAAOwF,EAASC,IAAU,CACpC,GAAI,CACF,GAAID,EAAQ,OAAS,OAAOA,EAAQ,OAAU,UAAY,UAAWA,EAAQ,MAAO,CAClF,GAAM,CAAE,MAAAyB,CAAM,EAAIzB,EAAQ,MAC1BA,EAAQ,QAAQ,cAAgB,UAAUyB,CAAK,EACjD,CACA,MAAMzB,EAAQ,UAAU,CAC1B,OAASwB,EAAK,CACZvB,EAAM,KAAKuB,CAAG,CAChB,CACF,CACF,EACAlB,CACF,CACF,EAEOoB,EAAQR,GC5Nf,OAAOrG,MAAO,MAGP,IAAM8G,EAA0B9G,EAAE,OAAO,CAC9C,QAASA,EAAE,OAAO,EAClB,QAASA,EAAE,WAAWM,CAAK,EAC3B,WAAYN,EAAE,OAAO,EACrB,MAAOA,EAAE,OAAO,CACd,UAAWA,EAAE,OAAO,EACpB,OAAQA,EAAE,OAAO,CACf,YAAaA,EAAE,OAAO,EACtB,MAAOA,EAAE,OAAO,CAClB,CAAC,EACD,QAASA,EAAE,OAAO,EAClB,UAAWA,EAAE,OAAO,EACpB,WAAYA,EAAE,OAAO,CACvB,CAAC,CACH,CAAC,ECdD,OAAS,YAAA+G,OAAgB,WAGzB,eAAsBC,EACpB7B,EAGAC,EACA,CACA,GAAI,CACF,IAAMhE,EAASF,EAAc,WAAoB,EAOjD,GAAI,CAJY,MAFA,IAAIyC,EAAgB,EAEN,WAAWwB,EAAQ,KAAO9D,GACtDD,EAAO,mBAAmBC,CAAO,CACnC,EAGE,OAAO+D,EAAM,KAAK,GAAG,EAAE,KAAK,CAAE,QAAS,eAAgB,CAAC,EAK1D,GAAI,CAFUD,EAAQ,OAAO,IAAI,OAAOA,EAAQ,KAAK,MAAM,OAAO,EAEvD,SAAS,EAClB,OAAOC,EAAM,KAAK,GAAG,EAAE,KAAK,CAAE,QAAS,eAAgB,CAAC,EAG1D,IAAM6B,EAAW,MAAM7B,EAAM,QAC3B,CACE,QAASD,EAAQ,KAAK,QACtB,QAASA,EAAQ,KAAK,QACtB,KAAM,mBACN,MAAO,gBACT,EACA,CAAE,UAAW,MAAO,CACtB,EAEA,OAAOC,EAAM,KAAK,GAAG,EAAE,KAAK,CAC1B,QAAS,iBACT,MAAO6B,CACT,CAAC,CACH,OAAS3B,EAAO,CACd,eAAQ,MAAMA,CAAK,EACZF,EAAM,KAAK,GAAG,EAAE,KAAK,CAAE,QAAS,kBAAmB,MAAAE,CAAM,CAAC,CACnE,CACF,CAEA,eAAsB4B,EAA2B/B,EAAyBC,EAAqB,CAC7F,GAAI,CAEF,IAAMxB,EADU,IAAID,EAAgB,EACZ,gBAAgB,EAElCiD,EAAQ,MAAMxB,EAAM,QAAQ,CAAE,QAAAxB,CAAQ,EAAG,CAAE,UAAW,KAAM,CAAC,EACnE,OAAOwB,EAAM,KAAK,GAAG,EAAE,KAAK,CAC1B,WAAYwB,CACd,CAAC,CACH,OAAStB,EAAO,CACd,eAAQ,MAAMA,CAAK,EACZF,EAAM,KAAK,GAAG,EAAE,KAAK,CAAE,QAAS,kBAAmB,MAAAE,CAAM,CAAC,CACnE,CACF,CAEA,eAAsB6B,EAAkBhC,EAAyBC,EAAqB,CACpF,GAAI,CAEF,GAAM,CAAE,QAAA/D,EAAS,QAAA+F,CAAQ,EAAIjC,EAAQ,KAE/B/D,EAASF,EAAc,OAAOkG,CAAO,EAErC,CAAE,QAAAC,CAAQ,EAAI,MAAMjG,EAAO,eAAeC,CAAO,EACvD,OAAO+D,EAAM,KAAK,GAAG,EAAE,KAAK,CAC1B,QAAA/D,EACA,QAAS0F,GAASM,EAAQ,QAAQ,KAAK,CACzC,CAAC,CACH,OAAS/B,EAAO,CACd,eAAQ,MAAMA,CAAK,EACZF,EAAM,KAAK,GAAG,EAAE,KAAK,CAAE,QAAS,kBAAmB,MAAAE,CAAM,CAAC,CACnE,CACF,CCzEA,IAAMe,GAA6B,MAAO1G,GAAW,CAEnDA,EAAO,KACL,eACA,CACE,OAAQ,CACN,KAAMmH,CACR,CACF,EACAE,CACF,EAEArH,EAAO,KAAK,0BAA2B,CAAC,EAAGuH,CAA0B,EAGrEvH,EAAO,IACL,gBACA,CACE,WAAY,MAAOwF,EAASC,IAAU,CACpC,GAAI,CACF,MAAMD,EAAQ,UAAU,CAC1B,OAASwB,EAAK,CACZvB,EAAM,KAAKuB,CAAG,CAChB,CACF,CACF,EACAQ,CACF,CACF,EAEOG,GAAQjB,GClCf,IAAMA,GAA6B,MAAO1G,GAAW,CACnD,MAAMA,EAAO,SAASkH,CAAM,EAC5B,MAAMlH,EAAO,SAAS2H,EAAG,CAC3B,EAEOC,GAAQlB,GdGf,IAAM1G,EAASP,GAAQ,CAErB,OAAQ,CACN,MAAO,QAAQ,IAAI,SACrB,CACF,CAAC,EAAE,iBAAkC,EAErCO,EAAO,qBAAqBL,EAAiB,EAC7CK,EAAO,sBAAsBN,EAAkB,EAE/C,MAAMM,EAAO,SAAiBU,CAAM,EACpC,MAAMV,EAAO,SAASd,GAAM,CAC1B,OAAQ,GACV,CAAC,EACD,MAAMc,EAAO,SAASb,EAAM,EAC5B,MAAMa,EAAO,SAASZ,GAAK,CACzB,OAAQY,EAAO,OAAO,UACxB,CAAC,EACD,MAAMA,EAAO,SAASV,GAAS,CAC7B,QAAS,CACP,QAAS,QACT,KAAM,CACJ,MAAO,eACP,YAAa,kCACb,QAAS,OACX,EACA,QAAS,CACP,CACE,IAAK,wBACL,YAAa,oBACf,CACF,EACA,KAAM,CACJ,CAAE,KAAM,OAAQ,YAAa,yBAA0B,EACvD,CAAE,KAAM,OAAQ,YAAa,yBAA0B,CACzD,EACA,WAAY,CACV,gBAAiB,CACf,OAAQ,CACN,KAAM,SACN,KAAM,SACN,GAAI,QACN,CACF,CACF,EACA,aAAc,CACZ,IAAK,qBACL,YAAa,qBACf,CACF,CACF,CAAC,EACD,MAAMU,EAAO,SAASR,GAAQ,CAC5B,YAAa,aACb,cAAe,CACb,KAAM,CACJ,QAAS,IAAMQ,EAAO,QAAQ,CAChC,CACF,CACF,CAAC,EACD,MAAMA,EAAO,SAAST,GAAW,CAC/B,QAAS,CACP,WAAY,OACd,CACF,CAAC,EACD,MAAMS,EAAO,SAASX,GAAO,CAC3B,IAAKW,EAAO,OAAO,SACrB,CAAC,EACD,MAAMA,EAAO,SAAiBI,CAAK,EAEnCJ,EAAO,IAAI,IAAK,CAAC6G,EAAGpB,IAAUA,EAAM,KAAK,GAAG,EAAE,KAAK,CAAE,QAAS,eAAgB,CAAC,CAAC,EAChF,MAAMzF,EAAO,SAAS4H,EAAM,EAE5B,MAAM5H,EAAO,MAAM,EAEnB,IAAO6H,EAAQ7H,EepFf,QAAQ,GAAG,qBAAuBgH,GAAQ,CACxC,QAAQ,MAAMA,CAAG,EACjB,QAAQ,KAAK,CAAC,CAChB,CAAC,EAED,IAAMc,GAAO,CAACD,EAAO,OAAO,SACtBE,GAAOF,EAAO,OAAO,SAC3B,MAAMA,EAAO,OAAO,CAAE,KAAAE,GAAM,KAAAD,EAAK,CAAC,EAElC,QAAWE,IAAU,CAAC,SAAU,SAAS,EACvC,QAAQ,GAAGA,EAAQ,IACjBH,EAAO,MAAM,EAAE,KAAMb,GAAQ,CAC3B,QAAQ,IAAI,wBAAwBgB,CAAM,EAAE,EAC5C,QAAQ,KAAKhB,EAAM,EAAI,CAAC,CAC1B,CAAC,CACH","sourcesContent":["import cors from '@fastify/cors';\nimport helmet from '@fastify/helmet';\nimport jwt from '@fastify/jwt';\nimport redis from '@fastify/redis';\nimport swagger from '@fastify/swagger';\nimport websocket from '@fastify/websocket';\nimport scalar from '@scalar/fastify-api-reference';\nimport fastify from 'fastify';\nimport { serializerCompiler, validatorCompiler, type ZodTypeProvider } from 'fastify-type-provider-zod';\nimport * as plugins from './plugins';\nimport routes from './routes';\n\nconst server = fastify({\n  // http2: true,\n  logger: {\n    level: process.env.LOG_LEVEL,\n  },\n}).withTypeProvider<ZodTypeProvider>();\n\nserver.setValidatorCompiler(validatorCompiler);\nserver.setSerializerCompiler(serializerCompiler);\n\nawait server.register(plugins.config);\nawait server.register(cors, {\n  origin: '*',\n});\nawait server.register(helmet);\nawait server.register(jwt, {\n  secret: server.config.JWT_SECRET,\n});\nawait server.register(swagger, {\n  openapi: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Test swagger',\n      description: 'Testing the Fastify swagger API',\n      version: '0.1.0',\n    },\n    servers: [\n      {\n        url: 'http://localhost:3000',\n        description: 'Development server',\n      },\n    ],\n    tags: [\n      { name: 'user', description: 'User related end-points' },\n      { name: 'code', description: 'Code related end-points' },\n    ],\n    components: {\n      securitySchemes: {\n        apiKey: {\n          type: 'apiKey',\n          name: 'apiKey',\n          in: 'header',\n        },\n      },\n    },\n    externalDocs: {\n      url: 'https://swagger.io',\n      description: 'Find more info here',\n    },\n  },\n});\nawait server.register(scalar, {\n  routePrefix: '/reference',\n  configuration: {\n    spec: {\n      content: () => server.swagger(),\n    },\n  },\n});\nawait server.register(websocket, {\n  options: {\n    maxPayload: 1048576,\n  },\n});\nawait server.register(redis, {\n  url: server.config.REDIS_URI,\n});\nawait server.register(plugins.bybit);\n\nserver.get('/', (_, reply) => reply.code(418).send({ message: 'I am a teapot' }));\nawait server.register(routes);\n\nawait server.ready();\n\nexport default server;\n","import { DefaultLogger, WebsocketClient } from 'bybit-api';\nimport type { FastifyPluginAsync } from 'fastify';\nimport fp from 'fastify-plugin';\n\nconst bybitPlugin: FastifyPluginAsync = async (server) => {\n  const logger = {\n    ...DefaultLogger,\n    silly: (...params: any) => console.log('silly', ...params),\n  };\n\n  const wsClient = new WebsocketClient(\n    {\n      market: 'v5',\n    },\n    // logger,\n  );\n\n  server.addHook('onClose', async () => {\n    wsClient.closeAll();\n  });\n\n  server.decorate('bybit', {\n    ws: wsClient,\n  });\n};\n\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    bybit: {\n      ws: WebsocketClient;\n    };\n  }\n}\n\nexport default fp(bybitPlugin);\n","import 'dotenv/config';\nimport type { FastifyPluginAsync } from 'fastify';\nimport fp from 'fastify-plugin';\nimport z from 'zod';\n\nexport enum NodeEnv {\n  development = 'development',\n  test = 'test',\n  production = 'production',\n}\n\nconst configSchema = z.object({\n  NODE_ENV: z.nativeEnum(NodeEnv),\n  LOG_LEVEL: z.string(),\n  API_HOST: z.string(),\n  API_PORT: z.string(),\n  ALLOWED_ORIGINS: z.string(),\n  REDIS_URI: z.string(),\n  REDIS_TOKEN: z.string(),\n  COOKIE_SECRET: z.string(),\n  JWT_SECRET: z.string(),\n  RPC_PROVIDER_API_KEY: z.string(),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nconst configPlugin: FastifyPluginAsync = async (server) => {\n  const config = configSchema.safeParse(process.env);\n\n  if (!config.success) {\n    throw new Error('.env file validation failed - ' + JSON.stringify(config.error, null, 2));\n  }\n  server.decorate('config', config.data);\n};\n\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    config: Config;\n  }\n}\n\nexport default fp(configPlugin);\n","export enum CHAIN {\n  MAINNET = '-239',\n  TESTNET = '-3',\n}\n\nexport enum BybitKlineTopic {\n  BTCUSDT = 'kline.1.BTCUSDT',\n  ETHUSDT = 'kline.1.ETHUSDT',\n  BNBUSDT = 'kline.1.BNBUSDT',\n  SOLUSDT = 'kline.1.SOLUSDT',\n  TONUSDT = 'kline.1.TONUSDT',\n}\n\nexport enum RedisKey {\n  KlineBTC24H = 'kline:BTC:24h',\n  KlineBTC1m = 'kline:BTC:1m',\n  KlineETH24H = 'kline:ETH:24h',\n  KlineETH1m = 'kline:ETH:1m',\n  KlineTON24H = 'kline:TON:24h',\n  KlineTON1m = 'kline:TON:1m',\n  KlineSOL24H = 'kline:SOL:24h',\n  KlineSOL1m = 'kline:SOL:1m',\n  KlineBNB24H = 'kline:BNB:24h',\n  KlineBNB1m = 'kline:BNB:1m',\n  SubcribeRequest = 'subscribe:request',\n}\n","import z from 'zod';\n\nexport const KlineTopic = z.enum(['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'TONUSDT']);\n\nexport type TKlineTopic = z.infer<typeof KlineTopic>;\n\nexport const candlestickSchema = z.object({\n  start: z.number(),\n  end: z.number(),\n  interval: z.string(),\n  open: z.string(),\n  close: z.string(),\n  high: z.string(),\n  low: z.string(),\n  volume: z.string(),\n  turnover: z.string(),\n  confirm: z.boolean(),\n  timestamp: z.number(),\n});\n\nexport type CandlestickDto = z.infer<typeof candlestickSchema>;\n\nexport const bybitResponseSchema = z.object({\n  topic: z.string(),\n  data: z.array(candlestickSchema),\n  ts: z.number(),\n  type: z.string(),\n  wsKey: z.string(),\n});\n\nexport type BybitResponseDto = z.infer<typeof bybitResponseSchema>;\n\nexport const candlestickResponseSchema = z.object({\n  open: z.number(),\n  close: z.number(),\n  high: z.number(),\n  low: z.number(),\n  time: z.number(),\n});\nexport const candlesticksResponseSchema = z.array(candlestickResponseSchema);\n\nexport type CandlestickResponseDto = z.infer<typeof candlestickResponseSchema>;\nexport type CandlesticksResponseDto = z.infer<typeof candlesticksResponseSchema>;\n\nexport const klineMessageSchema = z.object({\n  op: z.enum(['subscribe']),\n  args: z.array(KlineTopic),\n});\n\nexport type SubcribeKlineTopicDto = z.infer<typeof klineMessageSchema>;\n","import { RedisKey } from '@/constants';\nimport {\n  KlineTopic,\n  klineMessageSchema,\n  type BybitResponseDto,\n  type CandlestickDto,\n  type CandlesticksResponseDto,\n  type TKlineTopic,\n} from '@/dtos/market.dto';\nimport type { WebSocket } from '@fastify/websocket';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\nimport { ZodError } from 'zod';\nimport { MarketService } from '../services';\n\nconst isKlineOfInterest = (topic: string, data: BybitResponseDto) => data.topic === topic;\n\nexport const handleKlineTopic = async (\n  request: FastifyRequest<{ Params: { topic: TKlineTopic } }>,\n  reply: FastifyReply,\n) => {\n  const { redis } = request.server;\n  const { topic } = request.params;\n\n  let data: CandlestickDto[] = [];\n  let latestCandlestick: CandlestickDto | null = null;\n  let error: ZodError | undefined;\n\n  switch (topic) {\n    case KlineTopic.Enum.BTCUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineBTC24H, RedisKey.KlineBTC1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.ETHUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineETH24H, RedisKey.KlineETH1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.TONUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineTON24H, RedisKey.KlineTON1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.SOLUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineSOL24H, RedisKey.KlineSOL1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.BNBUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineBNB24H, RedisKey.KlineBNB1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n  }\n\n  if (error) {\n    return reply.status(400).send(error.errors);\n  }\n\n  if (data.length <= 0 || !latestCandlestick) {\n    return reply.status(404).send({ error: 'Not found. Candlesticks data is empty.' });\n  }\n\n  const candlesticks: CandlesticksResponseDto = [];\n  for (const candlestick of data) {\n    candlesticks.push({\n      open: Number(candlestick.open),\n      close: Number(candlestick.close),\n      high: Number(candlestick.high),\n      low: Number(candlestick.low),\n      time: candlestick.timestamp / 1000,\n    });\n  }\n\n  return reply.code(200).send({\n    list: candlesticks,\n    latest: {\n      open: Number(latestCandlestick?.open),\n      close: Number(latestCandlestick?.close),\n      high: Number(latestCandlestick?.high),\n      low: Number(latestCandlestick?.low),\n      time: latestCandlestick.end / 1000,\n    },\n  });\n};\n\nexport const handleKlineTopicWS = async (socket: WebSocket, request: FastifyRequest) => {\n  const { bybit } = request.server;\n\n  socket.on('message', async (message) => {\n    try {\n      const data = klineMessageSchema.parse(JSON.parse(message.toString()));\n\n      const topics = data.args;\n\n      bybit.ws.on('update', (data: BybitResponseDto) => handleBybitResponse(socket, data, topics));\n    } catch (error) {\n      if (error instanceof ZodError) {\n        socket.send(\n          JSON.stringify({\n            error: error.format(),\n          }),\n        );\n        return;\n      }\n\n      // Handle parsing error\n      if (error instanceof Error) {\n        socket.send(\n          JSON.stringify({\n            error: 'Invalid JSON payload',\n          }),\n        );\n      }\n    }\n  });\n};\n\nconst handleBybitResponse = (socket: WebSocket, data: BybitResponseDto, topics: TKlineTopic[]) => {\n  for (const topic of topics) {\n    if (isKlineOfInterest(`kline.1.${topic}`, data)) {\n      for (const candlestick of data.data) {\n        socket.send(\n          JSON.stringify({\n            topic: topic,\n            data: {\n              high: Number(candlestick.high),\n              low: Number(candlestick.low),\n              open: Number(candlestick.open),\n              close: Number(candlestick.close),\n              time: Math.ceil(candlestick.end / 1000),\n            },\n          }),\n        );\n      }\n    }\n  }\n};\n","import { Address, TonClient4 } from '@ton/ton';\nimport { CHAIN } from '@/constants';\nimport { Buffer } from 'buffer';\n\n// TODO: TonClient?\n\nexport class TonApiService {\n  public static create(client: TonClient4 | CHAIN): TonApiService {\n    if (client === CHAIN.MAINNET) {\n      client = new TonClient4({\n        endpoint: 'https://mainnet-v4.tonhubapi.com',\n      });\n    }\n    if (client === CHAIN.TESTNET) {\n      client = new TonClient4({\n        endpoint: 'https://testnet-v4.tonhubapi.com',\n      });\n    }\n    return new TonApiService(client);\n  }\n\n  private readonly client: TonClient4;\n\n  private constructor(client: TonClient4) {\n    this.client = client;\n  }\n\n  /**\n   * Get wallet public key by address.\n   */\n  public async getWalletPublicKey(address: string): Promise<Buffer> {\n    const masterAt = await this.client.getLastBlock();\n    const result = await this.client.runMethod(\n      masterAt.last.seqno,\n      Address.parse(address),\n      'get_public_key',\n      [],\n    );\n    return Buffer.from(result.reader.readBigNumber().toString(16).padStart(64, '0'), 'hex');\n  }\n\n  /**\n   * Get account info by address.\n   */\n  public async getAccountInfo(address: string): Promise<ReturnType<TonClient4['getAccount']>> {\n    const masterAt = await this.client.getLastBlock();\n    return await this.client.getAccount(masterAt.last.seqno, Address.parse(address));\n  }\n}\n","import {\n  Cell,\n  Slice,\n  WalletContractV1R1,\n  WalletContractV1R2,\n  WalletContractV1R3,\n  WalletContractV2R1,\n  WalletContractV2R2,\n  WalletContractV3R1,\n  WalletContractV3R2,\n  WalletContractV4 as WalletContractV4R2,\n  contractAddress,\n  type StateInit,\n} from '@ton/ton';\nimport { Buffer } from 'buffer';\n\nexport class WalletContractV4R1 {\n  static create(args: { workchain: number; publicKey: Buffer; walletId?: number | null }) {\n    const wallet = WalletContractV4R2.create(args);\n    const { data } = wallet.init;\n    const code = Cell.fromBoc(\n      Buffer.from(\nn        'hex',\n      ),\n    )[0]!;\n    (wallet as any).init = { data, code };\n    (wallet as any).address = contractAddress(args.workchain, wallet.init);\n    return wallet;\n  }\n}\n\nconst knownWallets = [\n  { contract: WalletContractV1R1, loadData: loadWalletV1Data },\n  { contract: WalletContractV1R2, loadData: loadWalletV1Data },\n  { contract: WalletContractV1R3, loadData: loadWalletV1Data },\n  { contract: WalletContractV2R1, loadData: loadWalletV2Data },\n  { contract: WalletContractV2R2, loadData: loadWalletV2Data },\n  { contract: WalletContractV3R1, loadData: loadWalletV3Data },\n  { contract: WalletContractV3R2, loadData: loadWalletV3Data },\n  { contract: WalletContractV4R1, loadData: loadWalletV4Data },\n  { contract: WalletContractV4R2, loadData: loadWalletV4Data },\n].map(({ contract, loadData }) => ({\n  contract: contract,\n  loadData: loadData,\n  wallet: contract.create({ workchain: 0, publicKey: Buffer.alloc(32) }),\n}));\n\nfunction loadWalletV1Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  return { seqno, publicKey };\n}\n\nfunction loadWalletV2Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  return { seqno, publicKey };\n}\n\nfunction loadWalletV3Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const walletId = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  return { seqno, publicKey, walletId };\n}\n\nfunction loadWalletV4Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const walletId = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  const plugins = cs.loadMaybeRef();\n  return { seqno, publicKey, walletId, plugins };\n}\n\nexport function tryParsePublicKey(stateInit: StateInit): Buffer | null {\n  if (!stateInit.code || !stateInit.data) {\n    return null;\n  }\n\n  for (const { wallet, loadData } of knownWallets) {\n    try {\n      if (wallet.init.code.equals(stateInit.code)) {\n        return loadData(stateInit.data.beginParse()).publicKey;\n      }\n    } catch (e) {}\n  }\n\n  return null;\n}\n","import type { CheckProofRequestDto } from '@/dtos/ton-connect.dto';\nimport { tryParsePublicKey } from '@/helpers/wallets-data.helper';\nimport { sha256 } from '@ton/crypto';\nimport { Address, Cell, contractAddress, loadStateInit } from '@ton/ton';\nimport { Buffer } from 'node:buffer';\n// TODO: Replace with node.js native crypto module\nimport tweetnacl from 'tweetnacl';\n\nconst tonProofPrefix = 'ton-proof-item-v2/';\nconst tonConnectPrefix = 'ton-connect';\nconst validAuthTime = 15 * 60; // 15 minutes\n\nexport class TonProofService {\n  /**\n   * Generate a random payload.\n   */\n  public generatePayload(): string {\n    return Buffer.from(tweetnacl.randomBytes(32)).toString('hex');\n  }\n\n  /**\n   * Reference implementation of the checkProof method:\n   * https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#address-proof-signature-ton_proof\n   */\n  public async checkProof(\n    payload: CheckProofRequestDto,\n    getWalletPublicKey: (address: string) => Promise<Buffer | null>,\n  ): Promise<boolean> {\n    try {\n      const stateInit = loadStateInit(Cell.fromBase64(payload.proof.state_init).beginParse());\n\n      // 1. First, try to obtain public key via get_public_key get-method on smart contract deployed at Address.\n      // 2. If the smart contract is not deployed yet, or the get-method is missing, you need:\n      //  2.1. Parse TonAddressItemReply.walletStateInit and get public key from stateInit. You can compare the walletStateInit.code\n      //  with the code of standard wallets contracts and parse the data according to the found wallet version.\n      let publicKey = tryParsePublicKey(stateInit) ?? (await getWalletPublicKey(payload.address));\n      if (!publicKey) {\n        return false;\n      }\n\n      // 2.2. Check that TonAddressItemReply.publicKey equals to obtained public key\n      const wantedPublicKey = Buffer.from(payload.public_key, 'hex');\n      if (!publicKey.equals(wantedPublicKey)) {\n        return false;\n      }\n\n      // 2.3. Check that TonAddressItemReply.walletStateInit.hash() equals to TonAddressItemReply.address. .hash() means BoC hash.\n      const wantedAddress = Address.parse(payload.address);\n      const address = contractAddress(wantedAddress.workChain, stateInit);\n      if (!address.equals(wantedAddress)) {\n        return false;\n      }\n\n      // if (!allowedDomains.includes(payload.proof.domain.value)) {\n      //   console.log('Invalid domain');\n\n      //   return false;\n      // }\n\n      const now = Math.floor(Date.now() / 1000);\n      if (now - validAuthTime > payload.proof.timestamp) {\n        return false;\n      }\n\n      const message = {\n        workchain: address.workChain,\n        address: address.hash,\n        domain: {\n          lengthBytes: payload.proof.domain.lengthBytes,\n          value: payload.proof.domain.value,\n        },\n        signature: Buffer.from(payload.proof.signature, 'base64'),\n        payload: payload.proof.payload,\n        stateInit: payload.proof.state_init,\n        timestamp: payload.proof.timestamp,\n      };\n\n      const wc = Buffer.alloc(4);\n      wc.writeUInt32BE(message.workchain, 0);\n\n      const ts = Buffer.alloc(8);\n      ts.writeBigUInt64LE(BigInt(message.timestamp), 0);\n\n      const dl = Buffer.alloc(4);\n      dl.writeUInt32LE(message.domain.lengthBytes, 0);\n\n      // message = utf8_encode(\"ton-proof-item-v2/\") ++\n      //           Address ++\n      //           AppDomain ++\n      //           Timestamp ++\n      //           Payload\n      const msg = Buffer.concat([\n        Buffer.from(tonProofPrefix),\n        wc,\n        message.address,\n        dl,\n        Buffer.from(message.domain.value),\n        ts,\n        Buffer.from(message.payload),\n      ]);\n\n      const msgHash = Buffer.from(await sha256(msg));\n\n      // signature = Ed25519Sign(privkey, sha256(0xffff ++ utf8_encode(\"ton-connect\") ++ sha256(message)))\n      const fullMsg = Buffer.concat([\n        Buffer.from([0xff, 0xff]),\n        Buffer.from(tonConnectPrefix),\n        msgHash,\n      ]);\n\n      const result = Buffer.from(await sha256(fullMsg));\n\n      return tweetnacl.sign.detached.verify(result, message.signature, publicKey);\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import { RedisKey } from '@/constants.js';\nimport { candlestickSchema, type CandlestickDto } from '@/dtos/market.dto.js';\nimport type { FastifyRedis } from '@fastify/redis';\nimport z from 'zod';\n\nexport class MarketService {\n  /**\n   * Parse kline topic\n   * @param redisKeys\n   * @param redis\n   *\n   * @throws {ZodError} when parsing fails\n   * @throws {Error} when fetching data fails\n   */\n  static async parseKlineTopic(\n    redisKeys: [RedisKey, RedisKey],\n    redis: FastifyRedis,\n  ): Promise<{ confirmedCandlesticks: CandlestickDto[]; latestCandlestick: CandlestickDto }> {\n    const pipeline = redis.pipeline();\n    pipeline.lrange(redisKeys[0], 0, -1);\n    pipeline.get(redisKeys[1]);\n    const results = await pipeline.exec();\n\n    if (!results) {\n      throw new Error('Failed to fetch data from Redis');\n    }\n\n    const topic24h = (results[0]?.[1] as string[]).map((item: string) => JSON.parse(item));\n    const topic1m = JSON.parse(results[1]?.[1] as string);\n\n    const parsedTopic24h = z.array(candlestickSchema).safeParse(topic24h);\n    const parsedTopic1m = candlestickSchema.safeParse(topic1m);\n\n    if (!parsedTopic24h.success || !parsedTopic1m.success) {\n      throw parsedTopic24h.error || parsedTopic1m.error;\n    }\n\n    return {\n      confirmedCandlesticks: parsedTopic24h.data,\n      latestCandlestick: parsedTopic1m.data,\n    };\n  }\n}\n","import { BybitKlineTopic, RedisKey } from '@/constants';\nimport { KlineTopic, type BybitResponseDto } from '@/dtos/market.dto';\nimport { handleKlineTopic, handleKlineTopicWS } from '@/handlers/market';\nimport { mnemonicToPrivateKey } from '@ton/crypto';\nimport { Address, TonClient, WalletContractV4, beginCell, internal } from '@ton/ton';\nimport type { FastifyPluginAsync } from 'fastify';\n\nimport { DataStream, storeDSTPublishCandlestick } from 'nenuma-contracts';\nimport z from 'zod';\n\nconst routes: FastifyPluginAsync = async (server) => {\n  const { redis, bybit } = server;\n\n  bybit.ws.subscribeV5(Object.values(BybitKlineTopic), 'spot');\n\n  bybit.ws.on('update', async (data: BybitResponseDto) => {\n    switch (data.topic) {\n      case BybitKlineTopic.BTCUSDT:\n        for (const candlestick of data.data) {\n          if (candlestick.confirm) {\n            redis\n              .pipeline()\n              .rpush(RedisKey.KlineBTC24H, JSON.stringify(candlestick))\n              .ltrim(RedisKey.KlineBTC24H, 0, 1439)\n              .exec();\n\n            try {\n              const client = new TonClient({\n                endpoint: 'https://testnet.toncenter.com/api/v2/jsonRPC',\n                apiKey: '9e557d76a302f31496f5fe90a62cb4f90ed4ef97a0e8aa08d310080f30f6263c',\n              });\n\n              const stream = client.open(\n                DataStream.fromAddress(\n                  Address.parse('kQDZnFY0yew3AcB0pk0H0CL5L2kclQXH0VHO_cWyfdOQ0SEp'),\n                ),\n              );\n\n              const batches = await stream.getBatches();\n\n              let shouldSkip = false;\n              // Check if every batch is empty\n              for (const [_, info] of batches) {\n                if (info.subscriptionsCount > 0) {\n                  shouldSkip = false;\n                } else {\n                  shouldSkip = true;\n                }\n              }\n\n              if (shouldSkip) {\n                return;\n              }\n\n              let keyPair = await mnemonicToPrivateKey([\n                'squirrel',\n                'focus',\n                'excite',\n                'kangaroo',\n                'quit',\n                'post',\n                'milk',\n                'twelve',\n                'sketch',\n                'cupboard',\n                'sunny',\n                'similar',\n                'toe',\n                'orient',\n                'soccer',\n                'uncle',\n                'forward',\n                'fame',\n                'bundle',\n                'vanish',\n                'crisp',\n                'slush',\n                'coast',\n                'hair',\n              ]);\n\n              let workchain = 0; // Usually you need a workchain 0\n              let wallet = WalletContractV4.create({ workchain, publicKey: keyPair.publicKey });\n              let contract = client.open(wallet);\n\n              // Create a transfer\n              let seqno: number = await contract.getSeqno();\n\n              await contract.sendTransfer({\n                seqno,\n                secretKey: keyPair.secretKey,\n                messages: [\n                  internal({\n                    value: '5',\n                    to: 'kQDZnFY0yew3AcB0pk0H0CL5L2kclQXH0VHO_cWyfdOQ0SEp',\n                    body: beginCell()\n                      .store(\n                        storeDSTPublishCandlestick({\n                          $$type: 'DSTPublishCandlestick',\n                          queryId: 777n,\n                          candlestick: {\n                            $$type: 'Candlestick',\n                            open: BigInt(candlestick.open.split('.').join('')),\n                            high: BigInt(candlestick.high.split('.').join('')),\n                            low: BigInt(candlestick.low.split('.').join('')),\n                            close: BigInt(candlestick.close.split('.').join('')),\n                            start: BigInt(candlestick.start),\n                            end: BigInt(candlestick.end),\n                          },\n                        }),\n                      )\n                      .endCell(),\n                  }),\n                ],\n              });\n            } catch (error) {}\n          } else {\n            redis.set(RedisKey.KlineBTC1m, JSON.stringify(candlestick));\n          }\n        }\n        break;\n      case BybitKlineTopic.ETHUSDT:\n        for (const candlestick of data.data) {\n          if (candlestick.confirm) {\n            redis\n              .pipeline()\n              .rpush(RedisKey.KlineETH24H, JSON.stringify(candlestick))\n              .ltrim(RedisKey.KlineETH24H, 0, 1439)\n              .exec();\n          } else {\n            redis.set(RedisKey.KlineETH1m, JSON.stringify(candlestick));\n          }\n        }\n        break;\n      case BybitKlineTopic.BNBUSDT:\n        for (const candlestick of data.data) {\n          if (candlestick.confirm) {\n            redis\n              .pipeline()\n              .rpush(RedisKey.KlineBNB24H, JSON.stringify(candlestick))\n              .ltrim(RedisKey.KlineBNB24H, 0, 1439)\n              .exec();\n          } else {\n            redis.set(RedisKey.KlineBNB1m, JSON.stringify(candlestick));\n          }\n        }\n        break;\n      case BybitKlineTopic.SOLUSDT:\n        for (const candlestick of data.data) {\n          if (candlestick.confirm) {\n            redis\n              .pipeline()\n              .rpush(RedisKey.KlineSOL24H, JSON.stringify(candlestick))\n              .ltrim(RedisKey.KlineSOL24H, 0, 1439)\n              .exec();\n          } else {\n            redis.set(RedisKey.KlineSOL1m, JSON.stringify(candlestick));\n          }\n        }\n        break;\n      case BybitKlineTopic.TONUSDT:\n        for (const candlestick of data.data) {\n          if (candlestick.confirm) {\n            redis\n              .pipeline()\n              .rpush(RedisKey.KlineTON24H, JSON.stringify(candlestick))\n              .ltrim(RedisKey.KlineTON24H, 0, 1439)\n              .exec();\n          } else {\n            redis.set(RedisKey.KlineTON1m, JSON.stringify(candlestick));\n          }\n        }\n        break;\n    }\n  });\n\n  server.get(\n    '/kline/:topic',\n    {\n      schema: {\n        params: z.object({\n          topic: KlineTopic,\n        }),\n        querystring: z\n          .object({\n            token: z.string().optional(),\n          })\n          .optional(),\n      },\n      preHandler: async (request, reply) => {\n        try {\n          await request.jwtVerify();\n        } catch (err) {\n          reply.send(err);\n        }\n      },\n    },\n    handleKlineTopic,\n  );\n\n  server.get(\n    '/kline',\n    {\n      websocket: true,\n      preHandler: async (request, reply) => {\n        try {\n          if (request.query && typeof request.query === 'object' && 'token' in request.query) {\n            const { token } = request.query as { token: string };\n            request.headers.authorization = `Bearer ${token}`;\n          }\n          await request.jwtVerify();\n        } catch (err) {\n          reply.send(err);\n        }\n      },\n    },\n    handleKlineTopicWS,\n  );\n};\n\nexport default routes;\n","import z from 'zod';\nimport { CHAIN } from '@/constants';\n\nexport const checkProofRequestSchema = z.object({\n  address: z.string(),\n  network: z.nativeEnum(CHAIN),\n  public_key: z.string(),\n  proof: z.object({\n    timestamp: z.number(),\n    domain: z.object({\n      lengthBytes: z.number(),\n      value: z.string(),\n    }),\n    payload: z.string(),\n    signature: z.string(),\n    state_init: z.string(),\n  }),\n});\n\nexport type CheckProofRequestDto = z.infer<typeof checkProofRequestSchema>;\n","import { CHAIN } from '@/constants';\nimport type { CheckProofRequestDto } from '@/dtos/ton-connect.dto';\nimport { TonApiService, TonProofService } from '@/services';\nimport { fromNano } from '@ton/ton';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\nexport async function handleCheckProof(\n  request: FastifyRequest<{\n    Body: CheckProofRequestDto;\n  }>,\n  reply: FastifyReply,\n) {\n  try {\n    const client = TonApiService.create(CHAIN.TESTNET);\n    const service = new TonProofService();\n\n    const isValid = await service.checkProof(request.body, (address) =>\n      client.getWalletPublicKey(address),\n    );\n\n    if (!isValid) {\n      return reply.code(400).send({ message: 'Invalid proof' });\n    }\n\n    const token = request.server.jwt.verify(request.body.proof.payload);\n\n    if (!token.toString()) {\n      return reply.code(400).send({ message: 'Invalid token' });\n    }\n\n    const newToken = await reply.jwtSign(\n      {\n        address: request.body.address,\n        network: request.body.network,\n        name: 'Vladimir Starkov',\n        email: 'test@gmail.com',\n      },\n      { expiresIn: '180d' },\n    );\n\n    return reply.code(200).send({\n      message: 'Proof is valid',\n      token: newToken,\n    });\n  } catch (error) {\n    console.error(error);\n    return reply.code(400).send({ message: 'Invalid request', error });\n  }\n}\n\nexport async function handleGenerateProofPayload(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    const service = new TonProofService();\n    const payload = service.generatePayload();\n\n    const token = await reply.jwtSign({ payload }, { expiresIn: '15m' });\n    return reply.code(200).send({\n      proofToken: token,\n    });\n  } catch (error) {\n    console.error(error);\n    return reply.code(400).send({ message: 'Invalid request', error });\n  }\n}\n\nexport async function handleAccountInfo(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    // @ts-expect-error TODO: Fix this\n    const { address, network } = request.user;\n\n    const client = TonApiService.create(network);\n\n    const { account } = await client.getAccountInfo(address);\n    return reply.code(200).send({\n      address,\n      balance: fromNano(account.balance.coins),\n    });\n  } catch (error) {\n    console.error(error);\n    return reply.code(400).send({ message: 'Invalid request', error });\n  }\n}\n","import { checkProofRequestSchema } from '@/dtos/ton-connect.dto';\nimport {\n  handleAccountInfo,\n  handleCheckProof,\n  handleGenerateProofPayload,\n} from '@/handlers/ton-connect';\nimport type { FastifyPluginAsync } from 'fastify';\n\nconst routes: FastifyPluginAsync = async (server) => {\n  // Public routes\n  server.post(\n    '/check-proof',\n    {\n      schema: {\n        body: checkProofRequestSchema,\n      },\n    },\n    handleCheckProof,\n  );\n\n  server.post('/generate-proof-payload', {}, handleGenerateProofPayload);\n\n  // Protected routes\n  server.get(\n    '/account-info',\n    {\n      preHandler: async (request, reply) => {\n        try {\n          await request.jwtVerify();\n        } catch (err) {\n          reply.send(err);\n        }\n      },\n    },\n    handleAccountInfo,\n  );\n};\n\nexport default routes;\n","import type { FastifyPluginAsync } from 'fastify';\nimport market from './market';\nimport ton from './ton-connect';\n\nconst routes: FastifyPluginAsync = async (server) => {\n  await server.register(market);\n  await server.register(ton);\n};\n\nexport default routes;\n","import server from './server';\n\nprocess.on('unhandledRejection', (err) => {\n  console.error(err);\n  process.exit(1);\n});\n\nconst port = +server.config.API_PORT;\nconst host = server.config.API_HOST;\nawait server.listen({ host, port });\n\nfor (const signal of ['SIGINT', 'SIGTERM']) {\n  process.on(signal, () =>\n    server.close().then((err) => {\n      console.log(`close application on ${signal}`);\n      process.exit(err ? 1 : 0);\n    }),\n  );\n}\n"]}