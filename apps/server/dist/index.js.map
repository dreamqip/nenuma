{
  "version": 3,
  "sources": ["../_sentry-release-injection-stub", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=d1440faa-e322-4940-94ea-d94463028c6b", "../src/instrument.ts", "../src/server.ts", "../src/plugins/bybit.ts", "../src/plugins/config.ts", "../src/constants.ts", "../src/dtos/market.dto.ts", "../src/handlers/market.ts", "../src/services/ton-api.service.ts", "../src/helpers/wallets-data.helper.ts", "../src/services/ton-proof.service.ts", "../src/services/market.service.ts", "../src/routes/market.ts", "../src/dtos/ton-connect.dto.ts", "../src/handlers/ton-connect.ts", "../src/routes/ton-connect.ts", "../src/routes/account.ts", "../src/routes/index.ts", "../src/index.ts", "../src/index.ts"],
  "sourcesContent": ["\n    var _global =\n      typeof window !== 'undefined' ?\n        window :\n        typeof global !== 'undefined' ?\n          global :\n          typeof self !== 'undefined' ?\n            self :\n            {};\n\n    _global.SENTRY_RELEASE={id:\"ee94c61b4a58a13318bafa4c31f4fdccbe7c0610\"};", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"3fdf248b-3ee7-4b25-bfad-064cdf289677\",e._sentryDebugIdIdentifier=\"sentry-dbid-3fdf248b-3ee7-4b25-bfad-064cdf289677\")}catch(e){}}();", "import * as Sentry from '@sentry/node';\n\nSentry.init({\n  dsn: 'https://b7e96e60dc1578f4479e5ebfa3a868a1@o4504770823061504.ingest.us.sentry.io/4507624025948160',\n});\n", "import cors from '@fastify/cors';\nimport helmet from '@fastify/helmet';\nimport jwt from '@fastify/jwt';\nimport redis from '@fastify/redis';\nimport swagger from '@fastify/swagger';\nimport websocket from '@fastify/websocket';\nimport scalar from '@scalar/fastify-api-reference';\nimport fastify from 'fastify';\nimport {\n  serializerCompiler,\n  validatorCompiler,\n  type ZodTypeProvider,\n} from 'fastify-type-provider-zod';\nimport * as plugins from './plugins';\nimport routes from './routes';\nimport * as Sentry from '@sentry/node';\n\nconst server = fastify({\n  // http2: true,\n  logger: {\n    level: process.env.LOG_LEVEL,\n  },\n}).withTypeProvider<ZodTypeProvider>();\n\nSentry.setupFastifyErrorHandler(server);\n\nserver.setValidatorCompiler(validatorCompiler);\nserver.setSerializerCompiler(serializerCompiler);\n\nawait server.register(plugins.config);\nawait server.register(cors, {\n  origin: '*',\n});\nawait server.register(helmet);\nawait server.register(jwt, {\n  secret: server.config.JWT_SECRET,\n});\nawait server.register(swagger, {\n  openapi: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Test swagger',\n      description: 'Testing the Fastify swagger API',\n      version: '0.1.0',\n    },\n    servers: [\n      {\n        url: 'http://localhost:3000',\n        description: 'Development server',\n      },\n    ],\n    tags: [\n      { name: 'user', description: 'User related end-points' },\n      { name: 'code', description: 'Code related end-points' },\n    ],\n    components: {\n      securitySchemes: {\n        apiKey: {\n          type: 'apiKey',\n          name: 'apiKey',\n          in: 'header',\n        },\n      },\n    },\n    externalDocs: {\n      url: 'https://swagger.io',\n      description: 'Find more info here',\n    },\n  },\n});\nawait server.register(scalar, {\n  routePrefix: '/reference',\n  configuration: {\n    spec: {\n      content: () => server.swagger(),\n    },\n  },\n});\nawait server.register(websocket, {\n  options: {\n    maxPayload: 1048576,\n  },\n});\nawait server.register(redis, {\n  url: server.config.REDIS_URI,\n  maxRetriesPerRequest: null,\n});\nawait server.register(plugins.bybit);\n\nserver.get('/', (_, reply) => reply.code(418).send({ message: 'I am a teapot' }));\nawait server.register(routes);\n\nawait server.ready();\n\nexport default server;\n", "import { DefaultLogger, WebsocketClient } from 'bybit-api';\nimport type { FastifyPluginAsync } from 'fastify';\nimport fp from 'fastify-plugin';\n\nconst bybitPlugin: FastifyPluginAsync = async (server) => {\n  const logger = {\n    ...DefaultLogger,\n    silly: (...params: any) => console.log('silly', ...params),\n  };\n\n  const wsClient = new WebsocketClient(\n    {\n      market: 'v5',\n    },\n    // logger,\n  );\n\n  server.addHook('onClose', async () => {\n    wsClient.closeAll();\n  });\n\n  server.decorate('bybit', {\n    ws: wsClient,\n  });\n};\n\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    bybit: {\n      ws: WebsocketClient;\n    };\n  }\n}\n\nexport default fp(bybitPlugin);\n", "import { Address } from '@ton/ton';\nimport 'dotenv/config';\nimport type { FastifyPluginAsync } from 'fastify';\nimport fp from 'fastify-plugin';\nimport z from 'zod';\n\nexport enum NodeEnv {\n  development = 'development',\n  test = 'test',\n  production = 'production',\n}\n\nconst configSchema = z.object({\n  NODE_ENV: z.nativeEnum(NodeEnv),\n  LOG_LEVEL: z.string(),\n  API_HOST: z.string(),\n  API_PORT: z.string(),\n  REDIS_URI: z.string(),\n  REDIS_HOST: z.string(),\n  REDIS_PORT: z.coerce.number(),\n  REDIS_PASSWORD: z.string(),\n  REDIS_USER: z.string(),\n  COOKIE_SECRET: z.string(),\n  JWT_SECRET: z.string(),\n  RPC_PROVIDER_API_KEY: z.string(),\n  DATA_STREAM_ADDRESS: z.string(),\n  BTC_BROKER_ADDRESS: z.string().transform(v => Address.parse(v)),\n  MNEMONIC: z.string(),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nconst configPlugin: FastifyPluginAsync = async (server) => {\n  const config = configSchema.safeParse(process.env);\n\n  if (!config.success) {\n    throw new Error('.env file validation failed - ' + JSON.stringify(config.error, null, 2));\n  }\n  server.decorate('config', config.data);\n};\n\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    config: Config;\n  }\n}\n\nexport default fp(configPlugin);\n", "export enum CHAIN {\n  MAINNET = '-239',\n  TESTNET = '-3',\n}\n\nexport enum BybitKlineTopic {\n  BTCUSDT = 'kline.1.BTCUSDT',\n  ETHUSDT = 'kline.1.ETHUSDT',\n  BNBUSDT = 'kline.1.BNBUSDT',\n  SOLUSDT = 'kline.1.SOLUSDT',\n  TONUSDT = 'kline.1.TONUSDT',\n}\n\nexport enum RedisKey {\n  KlineBTC24H = 'kline:BTC:24h',\n  KlineBTC1m = 'kline:BTC:1m',\n  KlineETH24H = 'kline:ETH:24h',\n  KlineETH1m = 'kline:ETH:1m',\n  KlineTON24H = 'kline:TON:24h',\n  KlineTON1m = 'kline:TON:1m',\n  KlineSOL24H = 'kline:SOL:24h',\n  KlineSOL1m = 'kline:SOL:1m',\n  KlineBNB24H = 'kline:BNB:24h',\n  KlineBNB1m = 'kline:BNB:1m',\n  SubcribeRequest = 'subscribe:request',\n  BrokerBTCStartUtime = 'broker:BTC:start_utime',\n}\n", "import z from 'zod';\n\nexport const KlineTopic = z.enum(['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'TONUSDT']);\n\nexport type TKlineTopic = z.infer<typeof KlineTopic>;\n\nexport const candlestickSchema = z.object({\n  start: z.number(),\n  end: z.number(),\n  interval: z.string(),\n  open: z.string(),\n  close: z.string(),\n  high: z.string(),\n  low: z.string(),\n  volume: z.string(),\n  turnover: z.string(),\n  confirm: z.boolean(),\n  timestamp: z.number(),\n});\n\nexport type CandlestickDto = z.infer<typeof candlestickSchema>;\n\nexport const bybitResponseSchema = z.object({\n  topic: z.string(),\n  data: z.array(candlestickSchema),\n  ts: z.number(),\n  type: z.string(),\n  wsKey: z.string(),\n});\n\nexport type BybitResponseDto = z.infer<typeof bybitResponseSchema>;\n\nexport const candlestickResponseSchema = z.object({\n  open: z.number(),\n  close: z.number(),\n  high: z.number(),\n  low: z.number(),\n  time: z.number(),\n});\nexport const candlesticksResponseSchema = z.array(candlestickResponseSchema);\n\nexport type CandlestickResponseDto = z.infer<typeof candlestickResponseSchema>;\nexport type CandlesticksResponseDto = z.infer<typeof candlesticksResponseSchema>;\n\nexport const klineMessageSchema = z.object({\n  op: z.enum(['subscribe']),\n  args: z.array(KlineTopic),\n});\n\nexport type SubcribeKlineTopicDto = z.infer<typeof klineMessageSchema>;\n", "import { RedisKey } from '@/constants';\nimport {\n  KlineTopic,\n  klineMessageSchema,\n  type BybitResponseDto,\n  type CandlestickDto,\n  type CandlesticksResponseDto,\n  type TKlineTopic,\n} from '@/dtos/market.dto';\nimport type { WebSocket } from '@fastify/websocket';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\nimport { ZodError } from 'zod';\nimport { MarketService } from '../services';\n\nconst isKlineOfInterest = (topic: string, data: BybitResponseDto) => data.topic === topic;\n\nexport const handleKlineTopic = async (\n  request: FastifyRequest<{ Params: { topic: TKlineTopic } }>,\n  reply: FastifyReply,\n) => {\n  const { redis } = request.server;\n  const { topic } = request.params;\n\n  let data: CandlestickDto[] = [];\n  let latestCandlestick: CandlestickDto | null = null;\n  let error: ZodError | undefined;\n\n  switch (topic) {\n    case KlineTopic.Enum.BTCUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineBTC24H, RedisKey.KlineBTC1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.ETHUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineETH24H, RedisKey.KlineETH1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.TONUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineTON24H, RedisKey.KlineTON1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.SOLUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineSOL24H, RedisKey.KlineSOL1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n    case KlineTopic.Enum.BNBUSDT:\n      try {\n        const result = await MarketService.parseKlineTopic(\n          [RedisKey.KlineBNB24H, RedisKey.KlineBNB1m],\n          redis,\n        );\n\n        data = result.confirmedCandlesticks;\n        latestCandlestick = result.latestCandlestick;\n      } catch (error) {\n        if (error instanceof ZodError) {\n          error = error;\n        }\n      }\n      break;\n  }\n\n  if (error) {\n    return reply.status(400).send(error.errors);\n  }\n\n  const candlesticks: CandlesticksResponseDto = [];\n  for (const candlestick of data) {\n    candlesticks.push({\n      open: Number(candlestick.open),\n      close: Number(candlestick.close),\n      high: Number(candlestick.high),\n      low: Number(candlestick.low),\n      time: Number(candlestick.end.toString().slice(0, -3)),\n    });\n  }\n\n  return reply.code(200).send({\n    list: candlesticks,\n    latest: latestCandlestick\n      ? {\n          open: Number(latestCandlestick?.open),\n          close: Number(latestCandlestick?.close),\n          high: Number(latestCandlestick?.high),\n          low: Number(latestCandlestick?.low),\n          time: Number(latestCandlestick?.end.toString().slice(0, -3)),\n        }\n      : null,\n  });\n};\n\nexport const handleKlineTopicWS = async (socket: WebSocket, request: FastifyRequest) => {\n  const { bybit } = request.server;\n\n  socket.on('message', async (message) => {\n    try {\n      const data = klineMessageSchema.parse(JSON.parse(message.toString()));\n\n      const topics = data.args;\n\n      bybit.ws.on('update', (data: BybitResponseDto) => handleBybitResponse(socket, data, topics));\n    } catch (error) {\n      if (error instanceof ZodError) {\n        socket.send(\n          JSON.stringify({\n            error: error.format(),\n          }),\n        );\n        return;\n      }\n\n      // Handle parsing error\n      if (error instanceof Error) {\n        socket.send(\n          JSON.stringify({\n            error: 'Invalid JSON payload',\n          }),\n        );\n      }\n    }\n  });\n};\n\nconst handleBybitResponse = (socket: WebSocket, data: BybitResponseDto, topics: TKlineTopic[]) => {\n  for (const topic of topics) {\n    if (isKlineOfInterest(`kline.1.${topic}`, data)) {\n      for (const candlestick of data.data) {\n        socket.send(\n          JSON.stringify({\n            topic: topic,\n            data: {\n              high: Number(candlestick.high),\n              low: Number(candlestick.low),\n              open: Number(candlestick.open),\n              close: Number(candlestick.close),\n              time: Number(candlestick.end.toString().slice(0, -3)),\n            },\n          }),\n        );\n      }\n    }\n  }\n};\n", "import { Address, TonClient4 } from '@ton/ton';\nimport { CHAIN } from '@/constants';\nimport { Buffer } from 'buffer';\n\n// TODO: TonClient?\n\nexport class TonApiService {\n  public static create(client: TonClient4 | CHAIN): TonApiService {\n    if (client === CHAIN.MAINNET) {\n      client = new TonClient4({\n        endpoint: 'https://mainnet-v4.tonhubapi.com',\n      });\n    }\n    if (client === CHAIN.TESTNET) {\n      client = new TonClient4({\n        endpoint: 'https://testnet-v4.tonhubapi.com',\n      });\n    }\n    return new TonApiService(client);\n  }\n\n  private readonly client: TonClient4;\n\n  private constructor(client: TonClient4) {\n    this.client = client;\n  }\n\n  /**\n   * Get wallet public key by address.\n   */\n  public async getWalletPublicKey(address: string): Promise<Buffer> {\n    const masterAt = await this.client.getLastBlock();\n    const result = await this.client.runMethod(\n      masterAt.last.seqno,\n      Address.parse(address),\n      'get_public_key',\n      [],\n    );\n    return Buffer.from(result.reader.readBigNumber().toString(16).padStart(64, '0'), 'hex');\n  }\n\n  /**\n   * Get account info by address.\n   */\n  public async getAccountInfo(address: string): Promise<ReturnType<TonClient4['getAccount']>> {\n    const masterAt = await this.client.getLastBlock();\n    return await this.client.getAccount(masterAt.last.seqno, Address.parse(address));\n  }\n}\n", "import {\n  Cell,\n  Slice,\n  WalletContractV1R1,\n  WalletContractV1R2,\n  WalletContractV1R3,\n  WalletContractV2R1,\n  WalletContractV2R2,\n  WalletContractV3R1,\n  WalletContractV3R2,\n  WalletContractV4 as WalletContractV4R2,\n  contractAddress,\n  type StateInit,\n} from '@ton/ton';\nimport { Buffer } from 'buffer';\n\nexport class WalletContractV4R1 {\n  static create(args: { workchain: number; publicKey: Buffer; walletId?: number | null }) {\n    const wallet = WalletContractV4R2.create(args);\n    const { data } = wallet.init;\n    const code = Cell.fromBoc(\n      Buffer.from(\nn        'hex',\n      ),\n    )[0]!;\n    (wallet as any).init = { data, code };\n    (wallet as any).address = contractAddress(args.workchain, wallet.init);\n    return wallet;\n  }\n}\n\nconst knownWallets = [\n  { contract: WalletContractV1R1, loadData: loadWalletV1Data },\n  { contract: WalletContractV1R2, loadData: loadWalletV1Data },\n  { contract: WalletContractV1R3, loadData: loadWalletV1Data },\n  { contract: WalletContractV2R1, loadData: loadWalletV2Data },\n  { contract: WalletContractV2R2, loadData: loadWalletV2Data },\n  { contract: WalletContractV3R1, loadData: loadWalletV3Data },\n  { contract: WalletContractV3R2, loadData: loadWalletV3Data },\n  { contract: WalletContractV4R1, loadData: loadWalletV4Data },\n  { contract: WalletContractV4R2, loadData: loadWalletV4Data },\n].map(({ contract, loadData }) => ({\n  contract: contract,\n  loadData: loadData,\n  wallet: contract.create({ workchain: 0, publicKey: Buffer.alloc(32) }),\n}));\n\nfunction loadWalletV1Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  return { seqno, publicKey };\n}\n\nfunction loadWalletV2Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  return { seqno, publicKey };\n}\n\nfunction loadWalletV3Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const walletId = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  return { seqno, publicKey, walletId };\n}\n\nfunction loadWalletV4Data(cs: Slice) {\n  const seqno = cs.loadUint(32);\n  const walletId = cs.loadUint(32);\n  const publicKey = cs.loadBuffer(32);\n  const plugins = cs.loadMaybeRef();\n  return { seqno, publicKey, walletId, plugins };\n}\n\nexport function tryParsePublicKey(stateInit: StateInit): Buffer | null {\n  if (!stateInit.code || !stateInit.data) {\n    return null;\n  }\n\n  for (const { wallet, loadData } of knownWallets) {\n    try {\n      if (wallet.init.code.equals(stateInit.code)) {\n        return loadData(stateInit.data.beginParse()).publicKey;\n      }\n    } catch (e) {}\n  }\n\n  return null;\n}\n", "import type { CheckProofRequestDto } from '@/dtos/ton-connect.dto';\nimport { tryParsePublicKey } from '@/helpers/wallets-data.helper';\nimport { sha256 } from '@ton/crypto';\nimport { Address, Cell, contractAddress, loadStateInit } from '@ton/ton';\nimport { Buffer } from 'node:buffer';\n// TODO: Replace with node.js native crypto module\nimport tweetnacl from 'tweetnacl';\n\nconst tonProofPrefix = 'ton-proof-item-v2/';\nconst tonConnectPrefix = 'ton-connect';\nconst validAuthTime = 15 * 60; // 15 minutes\n\nexport class TonProofService {\n  /**\n   * Generate a random payload.\n   */\n  public generatePayload(): string {\n    return Buffer.from(tweetnacl.randomBytes(32)).toString('hex');\n  }\n\n  /**\n   * Reference implementation of the checkProof method:\n   * https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#address-proof-signature-ton_proof\n   */\n  public async checkProof(\n    payload: CheckProofRequestDto,\n    getWalletPublicKey: (address: string) => Promise<Buffer | null>,\n  ): Promise<boolean> {\n    try {\n      const stateInit = loadStateInit(Cell.fromBase64(payload.proof.state_init).beginParse());\n\n      // 1. First, try to obtain public key via get_public_key get-method on smart contract deployed at Address.\n      // 2. If the smart contract is not deployed yet, or the get-method is missing, you need:\n      //  2.1. Parse TonAddressItemReply.walletStateInit and get public key from stateInit. You can compare the walletStateInit.code\n      //  with the code of standard wallets contracts and parse the data according to the found wallet version.\n      let publicKey = tryParsePublicKey(stateInit) ?? (await getWalletPublicKey(payload.address));\n      if (!publicKey) {\n        return false;\n      }\n\n      // 2.2. Check that TonAddressItemReply.publicKey equals to obtained public key\n      const wantedPublicKey = Buffer.from(payload.public_key, 'hex');\n      if (!publicKey.equals(wantedPublicKey)) {\n        return false;\n      }\n\n      // 2.3. Check that TonAddressItemReply.walletStateInit.hash() equals to TonAddressItemReply.address. .hash() means BoC hash.\n      const wantedAddress = Address.parse(payload.address);\n      const address = contractAddress(wantedAddress.workChain, stateInit);\n      if (!address.equals(wantedAddress)) {\n        return false;\n      }\n\n      // if (!allowedDomains.includes(payload.proof.domain.value)) {\n      //   console.log('Invalid domain');\n\n      //   return false;\n      // }\n\n      const now = Math.floor(Date.now() / 1000);\n      if (now - validAuthTime > payload.proof.timestamp) {\n        return false;\n      }\n\n      const message = {\n        workchain: address.workChain,\n        address: address.hash,\n        domain: {\n          lengthBytes: payload.proof.domain.lengthBytes,\n          value: payload.proof.domain.value,\n        },\n        signature: Buffer.from(payload.proof.signature, 'base64'),\n        payload: payload.proof.payload,\n        stateInit: payload.proof.state_init,\n        timestamp: payload.proof.timestamp,\n      };\n\n      const wc = Buffer.alloc(4);\n      wc.writeUInt32BE(message.workchain, 0);\n\n      const ts = Buffer.alloc(8);\n      ts.writeBigUInt64LE(BigInt(message.timestamp), 0);\n\n      const dl = Buffer.alloc(4);\n      dl.writeUInt32LE(message.domain.lengthBytes, 0);\n\n      // message = utf8_encode(\"ton-proof-item-v2/\") ++\n      //           Address ++\n      //           AppDomain ++\n      //           Timestamp ++\n      //           Payload\n      const msg = Buffer.concat([\n        Buffer.from(tonProofPrefix),\n        wc,\n        message.address,\n        dl,\n        Buffer.from(message.domain.value),\n        ts,\n        Buffer.from(message.payload),\n      ]);\n\n      const msgHash = Buffer.from(await sha256(msg));\n\n      // signature = Ed25519Sign(privkey, sha256(0xffff ++ utf8_encode(\"ton-connect\") ++ sha256(message)))\n      const fullMsg = Buffer.concat([\n        Buffer.from([0xff, 0xff]),\n        Buffer.from(tonConnectPrefix),\n        msgHash,\n      ]);\n\n      const result = Buffer.from(await sha256(fullMsg));\n\n      return tweetnacl.sign.detached.verify(result, message.signature, publicKey);\n    } catch (e) {\n      return false;\n    }\n  }\n}\n", "import { RedisKey } from '@/constants.js';\nimport { candlestickSchema, type CandlestickDto } from '@/dtos/market.dto.js';\nimport type { FastifyRedis } from '@fastify/redis';\nimport z from 'zod';\n\nexport class MarketService {\n  /**\n   * Parse kline topic\n   * @param redisKeys\n   * @param redis\n   *\n   * @throws {ZodError} when parsing fails\n   * @throws {Error} when fetching data fails\n   */\n  static async parseKlineTopic(\n    redisKeys: [RedisKey, RedisKey],\n    redis: FastifyRedis,\n  ): Promise<{ confirmedCandlesticks: CandlestickDto[]; latestCandlestick: CandlestickDto }> {\n    const pipeline = redis.pipeline();\n    pipeline.lrange(redisKeys[0], 0, -1);\n    pipeline.get(redisKeys[1]);\n    const results = await pipeline.exec();\n\n    if (!results) {\n      throw new Error('Failed to fetch data from Redis');\n    }\n\n    const topic24h = (results[0]?.[1] as string[]).map((item: string) => JSON.parse(item));\n    const topic1m = JSON.parse(results[1]?.[1] as string);\n\n    const parsedTopic24h = z.array(candlestickSchema).safeParse(topic24h);\n    const parsedTopic1m = candlestickSchema.safeParse(topic1m);\n\n    if (!parsedTopic24h.success || !parsedTopic1m.success) {\n      throw parsedTopic24h.error || parsedTopic1m.error;\n    }\n\n    return {\n      confirmedCandlesticks: parsedTopic24h.data,\n      latestCandlestick: parsedTopic1m.data,\n    };\n  }\n}\n", "import { BybitKlineTopic, RedisKey } from '@/constants';\nimport { KlineTopic, type BybitResponseDto } from '@/dtos/market.dto';\nimport { handleKlineTopic, handleKlineTopicWS } from '@/handlers/market';\nimport { mnemonicToPrivateKey } from '@ton/crypto';\nimport { Address, TonClient, WalletContractV4, beginCell, internal } from '@ton/ton';\nimport type { FastifyPluginAsync } from 'fastify';\n\nimport { DataStream, storeDSTPublishCandlestick } from 'nenuma-contracts';\n\nimport z from 'zod';\n\nconst routes: FastifyPluginAsync = async (server) => {\n  const { redis, bybit, log } = server;\n\n  bybit.ws.subscribeV5(BybitKlineTopic.BTCUSDT, 'spot');\n\n  const publicClient = new TonClient({\n    endpoint: 'https://testnet.toncenter.com/api/v2/jsonRPC',\n    apiKey: server.config.RPC_PROVIDER_API_KEY,\n  });\n\n  const keyPair = await mnemonicToPrivateKey(server.config.MNEMONIC.split(','));\n\n  const workchain = 0; // Usually you need a workchain 0\n  const wallet = WalletContractV4.create({ workchain, publicKey: keyPair.publicKey });\n  const btcCandlestickPublisherWallet = publicClient.open(wallet);\n\n  const stream = publicClient.open(\n    DataStream.fromAddress(Address.parse(server.config.DATA_STREAM_ADDRESS)),\n  );\n\n  bybit.ws.on('update', async (data: BybitResponseDto) => {\n    switch (data.topic) {\n      case BybitKlineTopic.BTCUSDT:\n        for (const candlestick of data.data) {\n          if (candlestick.confirm) {\n            redis\n              .pipeline()\n              .rpush(RedisKey.KlineBTC24H, JSON.stringify(candlestick))\n              .ltrim(RedisKey.KlineBTC24H, -1440, -1)\n              .exec();\n\n            try {\n              const batches = await stream.getBatches();\n\n              let shouldSkip = false;\n              // Check if every batch is empty\n              for (const [_, info] of batches) {\n                log.debug('Batch Info: %s', info.subscriptionsCount.toString());\n                if (info.subscriptionsCount > 0) {\n                  shouldSkip = false;\n                } else {\n                  shouldSkip = true;\n                }\n              }\n\n              if (shouldSkip) {\n                return;\n              }\n\n              const seqno = await btcCandlestickPublisherWallet.getSeqno();\n\n              const candlestickToPublish = {\n                $$type: 'Candlestick' as const,\n                open: BigInt(candlestick.open.split('.').join('')),\n                high: BigInt(candlestick.high.split('.').join('')),\n                low: BigInt(candlestick.low.split('.').join('')),\n                close: BigInt(candlestick.close.split('.').join('')),\n                start: BigInt(candlestick.start.toString().slice(0, -3)),\n                end: BigInt(candlestick.end.toString().slice(0, -3)) + 1n,\n              };\n\n              log.debug(\n                'Publishing Candlestick: %s',\n                JSON.stringify(\n                  candlestickToPublish,\n                  (_, v) => (typeof v === 'bigint' ? v.toString() : v),\n                  2,\n                ),\n              );\n\n              await btcCandlestickPublisherWallet.sendTransfer({\n                seqno,\n                secretKey: keyPair.secretKey,\n                messages: [\n                  internal({\n                    value: '5',\n                    to: server.config.DATA_STREAM_ADDRESS,\n                    body: beginCell()\n                      .store(\n                        storeDSTPublishCandlestick({\n                          $$type: 'DSTPublishCandlestick',\n                          queryId: 777n,\n                          candlestick: candlestickToPublish,\n                        }),\n                      )\n                      .endCell(),\n                  }),\n                ],\n              });\n            } catch (error) {\n              log.error('Error: %s', error);\n            }\n          } else {\n            redis.set(RedisKey.KlineBTC1m, JSON.stringify(candlestick));\n          }\n        }\n        break;\n      // case BybitKlineTopic.ETHUSDT:\n      //   for (const candlestick of data.data) {\n      //     if (candlestick.confirm) {\n      //       redis\n      //         .pipeline()\n      //         .rpush(RedisKey.KlineETH24H, JSON.stringify(candlestick))\n      //         .ltrim(RedisKey.KlineETH24H, 0, 1439)\n      //         .exec();\n      //     } else {\n      //       redis.set(RedisKey.KlineETH1m, JSON.stringify(candlestick));\n      //     }\n      //   }\n      //   break;\n      // case BybitKlineTopic.BNBUSDT:\n      //   for (const candlestick of data.data) {\n      //     if (candlestick.confirm) {\n      //       redis\n      //         .pipeline()\n      //         .rpush(RedisKey.KlineBNB24H, JSON.stringify(candlestick))\n      //         .ltrim(RedisKey.KlineBNB24H, 0, 1439)\n      //         .exec();\n      //     } else {\n      //       redis.set(RedisKey.KlineBNB1m, JSON.stringify(candlestick));\n      //     }\n      //   }\n      //   break;\n      // case BybitKlineTopic.SOLUSDT:\n      //   for (const candlestick of data.data) {\n      //     if (candlestick.confirm) {\n      //       redis\n      //         .pipeline()\n      //         .rpush(RedisKey.KlineSOL24H, JSON.stringify(candlestick))\n      //         .ltrim(RedisKey.KlineSOL24H, 0, 1439)\n      //         .exec();\n      //     } else {\n      //       redis.set(RedisKey.KlineSOL1m, JSON.stringify(candlestick));\n      //     }\n      //   }\n      //   break;\n      // case BybitKlineTopic.TONUSDT:\n      //   for (const candlestick of data.data) {\n      //     if (candlestick.confirm) {\n      //       redis\n      //         .pipeline()\n      //         .rpush(RedisKey.KlineTON24H, JSON.stringify(candlestick))\n      //         .ltrim(RedisKey.KlineTON24H, 0, 1439)\n      //         .exec();\n      //     } else {\n      //       redis.set(RedisKey.KlineTON1m, JSON.stringify(candlestick));\n      //     }\n      //   }\n      //   break;\n    }\n  });\n\n  server.get(\n    '/kline/:topic',\n    {\n      schema: {\n        params: z.object({\n          topic: KlineTopic,\n        }),\n        querystring: z\n          .object({\n            token: z.string().optional(),\n          })\n          .optional(),\n      },\n    },\n    handleKlineTopic,\n  );\n\n  server.get(\n    '/kline',\n    {\n      websocket: true,\n    },\n    handleKlineTopicWS,\n  );\n};\n\nexport default routes;\n", "import z from 'zod';\nimport { CHAIN } from '@/constants';\n\nexport const checkProofRequestSchema = z.object({\n  address: z.string(),\n  network: z.nativeEnum(CHAIN),\n  public_key: z.string(),\n  proof: z.object({\n    timestamp: z.number(),\n    domain: z.object({\n      lengthBytes: z.number(),\n      value: z.string(),\n    }),\n    payload: z.string(),\n    signature: z.string(),\n    state_init: z.string(),\n  }),\n});\n\nexport type CheckProofRequestDto = z.infer<typeof checkProofRequestSchema>;\n", "import { CHAIN } from '@/constants';\nimport type { CheckProofRequestDto } from '@/dtos/ton-connect.dto';\nimport { TonApiService, TonProofService } from '@/services/index';\nimport { fromNano } from '@ton/ton';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\nexport async function handleCheckProof(\n  request: FastifyRequest<{\n    Body: CheckProofRequestDto;\n  }>,\n  reply: FastifyReply,\n) {\n  try {\n    const client = TonApiService.create(CHAIN.TESTNET);\n    const service = new TonProofService();\n\n    const isValid = await service.checkProof(request.body, (address) =>\n      client.getWalletPublicKey(address),\n    );\n\n    if (!isValid) {\n      return reply.code(400).send({ message: 'Invalid proof' });\n    }\n\n    const token = request.server.jwt.verify(request.body.proof.payload);\n\n    if (!token.toString()) {\n      return reply.code(400).send({ message: 'Invalid token' });\n    }\n\n    const newToken = await reply.jwtSign(\n      {\n        address: request.body.address,\n        network: request.body.network,\n        name: 'Vladimir Starkov',\n        email: 'test@gmail.com',\n      },\n      { expiresIn: '180d' },\n    );\n\n    return reply.code(200).send({\n      message: 'Proof is valid',\n      token: newToken,\n    });\n  } catch (error) {\n    console.error(error);\n    return reply.code(400).send({ message: 'Invalid request', error });\n  }\n}\n\nexport async function handleGenerateProofPayload(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    const service = new TonProofService();\n    const payload = service.generatePayload();\n\n    const token = await reply.jwtSign({ payload }, { expiresIn: '15m' });\n    return reply.code(200).send({\n      proofToken: token,\n    });\n  } catch (error) {\n    console.error(error);\n    return reply.code(400).send({ message: 'Invalid request', error });\n  }\n}\n\nexport async function handleAccountInfo(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    // @ts-expect-error TODO: Fix this\n    const { address, network } = request.user;\n\n    const client = TonApiService.create(network);\n\n    const { account } = await client.getAccountInfo(address);\n    return reply.code(200).send({\n      address,\n      balance: fromNano(account.balance.coins),\n    });\n  } catch (error) {\n    console.error(error);\n    return reply.code(400).send({ message: 'Invalid request', error });\n  }\n}\n", "import { checkProofRequestSchema } from '@/dtos/ton-connect.dto';\nimport {\n  handleAccountInfo,\n  handleCheckProof,\n  handleGenerateProofPayload,\n} from '@/handlers/ton-connect';\nimport type { FastifyPluginAsync } from 'fastify';\n\nconst routes: FastifyPluginAsync = async (server) => {\n  // Public routes\n  server.post(\n    '/check-proof',\n    {\n      schema: {\n        body: checkProofRequestSchema,\n      },\n    },\n    handleCheckProof,\n  );\n\n  server.post('/generate-proof-payload', {}, handleGenerateProofPayload);\n\n  // Protected routes\n  server.get(\n    '/account-info',\n    {\n      preHandler: async (request, reply) => {\n        try {\n          await request.jwtVerify();\n        } catch (err) {\n          reply.send(err);\n        }\n      },\n    },\n    handleAccountInfo,\n  );\n};\n\nexport default routes;\n", "import { RedisKey } from '@/constants';\nimport type {\n  DeployedOption,\n  TransactionList,\n  Option,\n  InitiatedOption,\n  SettledOption,\n  ExpiredOption,\n} from '@/dtos/account.dto';\nimport { Address, Cell, TonClient4 } from '@ton/ton';\nimport { Queue, Worker } from 'bullmq';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport {\n  CashOrNothingOption,\n  loadCashOrNothingOptionDeploy,\n  loadStateInit,\n} from 'nenuma-contracts';\nimport z from 'zod';\nimport * as Sentry from '@sentry/node';\n\nconst QUEUE_BROKERS = 'brokers';\nconst QUEUE_OPTIONS = 'options';\n\nconst SUBSCRIBER_GRACE_PERIOD = 3600n;\n\nconst INDEXER_BASE_URL = 'https://testnet.toncenter.com/api/v3';\n\nconst OPCODE_CASH_OR_NOTHING_OPTION_DEPLOY = '0xc74f6284';\nconst OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_IN_MONEY = '0x1800dc14';\nconst OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_OUT_MONEY = '0xff379604';\nconst OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_AT_MONEY = '0x50240b79';\n\nconst ERROR_CODE_CONTRACT_UNINIT = 'Exit code: -256';\n\nconst jsonReplacer = (_: string, v: any) => {\n  if (typeof v === 'bigint') {\n    return v.toString();\n  }\n\n  if (v instanceof Address) {\n    return v.toString();\n  }\n\n  return v;\n};\n\nconst jsonReviver = (k: string, v: any) => {\n  const bigintKeys = ['optionId', 'initiation', 'expiration', 'investment'];\n  const addressKeys = ['address', 'holder', 'writer'];\n\n  if (bigintKeys.includes(k) && typeof v === 'string') {\n    return BigInt(v);\n  }\n\n  if (addressKeys.includes(k) && typeof v === 'string') {\n    return Address.parse(v);\n  }\n\n  return v;\n};\n\nconst routes: FastifyPluginAsyncZod = async (server) => {\n  const log = server.log;\n\n  const brokersQueue = new Queue(QUEUE_BROKERS, {\n    connection: server.redis,\n  });\n\n  const optionsQueue = new Queue(QUEUE_OPTIONS, {\n    connection: server.redis,\n  });\n\n  brokersQueue.add(\n    QUEUE_BROKERS,\n    {\n      address: server.config.BTC_BROKER_ADDRESS.toString(),\n    },\n    { repeatJobKey: 'btc-broker', repeat: { every: 5000 } },\n  );\n\n  const brokerWorker = new Worker<{ address: string }>(\n    QUEUE_BROKERS,\n    async (job) => {\n      const startUtime = await server.redis.get(RedisKey.BrokerBTCStartUtime);\n\n      const searchParams = new URLSearchParams();\n      searchParams.set('account', job.data.address);\n      searchParams.set('limit', '20');\n      searchParams.set('offset', '0');\n\n      if (startUtime) {\n        log.debug(`Fetching transactions for ${job.data.address} starting from ${startUtime}`);\n\n        searchParams.set('start_utime', startUtime);\n      }\n\n      const response = await fetch(`${INDEXER_BASE_URL}/transactions?${searchParams.toString()}`, {\n        headers: {\n          'X-API-KEY': server.config.RPC_PROVIDER_API_KEY,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        log.error(\n          `Failed to get transactions for ${job.data.address}. Error: ${response.statusText}`,\n        );\n        Sentry.captureException(\n          new Error(`Failed to get transactions for ${job.data.address}. Error: ${error}`),\n        );\n      }\n\n      const { transactions } = (await response.json()) as TransactionList;\n\n      const deployOptionMessages = transactions.flatMap((tx) =>\n        tx.out_msgs\n          .filter((msg) => msg?.opcode === OPCODE_CASH_OR_NOTHING_OPTION_DEPLOY)\n          .map((msg) => ({\n            ...msg,\n            utime: tx.now,\n          }))\n          .sort((a, b) => a.utime - b.utime),\n      );\n\n      if (deployOptionMessages[0]) {\n        server.redis.set(RedisKey.BrokerBTCStartUtime, deployOptionMessages[0].utime.toString());\n      }\n\n      deployOptionMessages.forEach(async (msg) => {\n        if (!msg.init_state || !msg.destination || !msg.message_content) {\n          return;\n        }\n\n        const cellSlice = Cell.fromBase64(msg.init_state.body).asSlice();\n        const initDataSlice = loadStateInit(cellSlice).data.beginParse();\n\n        initDataSlice.loadRef(); // System\n        initDataSlice.loadBit();\n\n        const brokerAddress = initDataSlice.loadAddress();\n        const optionId = initDataSlice.loadIntBig(257);\n\n        const bodySlice = Cell.fromBase64(msg.message_content.body).asSlice();\n        const agreement = loadCashOrNothingOptionDeploy(bodySlice).agreement;\n\n        const key = `${agreement.holder.toString()}:${brokerAddress.toString()}:option:${optionId}`;\n\n        const isOptionExists = await server.redis.exists(key);\n\n        // Return early to avoid adding the same option to the queue and replacing the existing one\n        if (isOptionExists) {\n          return;\n        }\n\n        const option: DeployedOption = {\n          optionId,\n          status: 'deployed',\n          address: Address.parse(msg.destination),\n          agreement,\n        };\n\n        server.redis.set(key, JSON.stringify(option, jsonReplacer));\n\n        optionsQueue.add(\n          key,\n          {\n            redisKey: key,\n          },\n          {\n            repeat: {\n              every: 5000,\n            },\n            removeOnComplete: true,\n            repeatJobKey: key,\n          },\n        );\n      });\n    },\n    {\n      connection: server.redis,\n    },\n  );\n\n  brokerWorker.on('completed', (job) => {\n    log.info(`${job?.id} has completed!`);\n  });\n\n  brokerWorker.on('failed', (job, err) => {\n    log.error(`${job?.id} has failed with ${err.stack}`);\n  });\n\n  const publicClient = new TonClient4({\n    endpoint: 'https://testnet-v4.tonhubapi.com/',\n  });\n\n  const worker = new Worker<{ redisKey: string }>(\n    QUEUE_OPTIONS,\n    async (job) => {\n      const option: Option = JSON.parse(\n        (await server.redis.get(job.data.redisKey)) || '{}',\n        jsonReviver,\n      );\n\n      if (option.status === 'settled' && job.repeatJobKey) {\n        optionsQueue.removeRepeatableByKey(job.repeatJobKey);\n        log.info(`Removed repeatable job with key ${job.repeatJobKey}`);\n      }\n\n      const contract = publicClient.open(CashOrNothingOption.fromAddress(option.address));\n\n      if (option.status === 'deployed') {\n        try {\n          const strikePrice = await contract.getStrikePrice();\n\n          if (!strikePrice) {\n            return;\n          }\n\n          const updatedOption: InitiatedOption = {\n            ...option,\n            status: 'initiated',\n            strikePrice: Number(strikePrice),\n          };\n\n          await server.redis.set(job.data.redisKey, JSON.stringify(updatedOption, jsonReplacer));\n        } catch (error) {\n          if (error instanceof Error && error.message.includes(ERROR_CODE_CONTRACT_UNINIT)) {\n            const searchParams = new URLSearchParams();\n            searchParams.set('account', option.address.toString());\n            searchParams.set('limit', '20');\n            searchParams.set('offset', '0');\n\n            const response = await fetch(\n              `${INDEXER_BASE_URL}/transactions?${searchParams.toString()}`,\n              {\n                headers: {\n                  'X-API-KEY': server.config.RPC_PROVIDER_API_KEY,\n                },\n              },\n            );\n\n            if (!response.ok) {\n              const error = await response.json();\n              log.error(\n                `Could not fetch option transactions for ${option.address.toString()}. Error: ${response.statusText}`,\n              );\n              Sentry.captureException(\n                new Error(\n                  `Could not fetch option transactions for ${option.address.toString()}. Error: ${error}`,\n                ),\n              );\n\n              return;\n            }\n\n            const { transactions } = (await response.json()) as TransactionList;\n\n            if (!transactions.length) {\n              return;\n            }\n\n            const settledInMoneyMessage = transactions.find((tx) =>\n              tx.out_msgs.some(\n                (msg) => msg?.opcode === OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_IN_MONEY,\n              ),\n            );\n\n            const settledOutMoneyMessage = transactions.find((tx) =>\n              tx.out_msgs.some(\n                (msg) => msg?.opcode === OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_OUT_MONEY,\n              ),\n            );\n\n            const settledAtMoneyMessage = transactions.find((tx) =>\n              tx.out_msgs.some(\n                (msg) => msg?.opcode === OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_AT_MONEY,\n              ),\n            );\n\n            if (!settledInMoneyMessage && !settledOutMoneyMessage && !settledAtMoneyMessage) {\n              return;\n            }\n\n            const settledOption: SettledOption = {\n              ...option,\n              strikePrice: 0,\n              status: 'settled',\n            };\n\n            await server.redis.set(job.data.redisKey, JSON.stringify(settledOption, jsonReplacer));\n\n            const result = await optionsQueue.removeRepeatableByKey(job.repeatJobKey!);\n\n            if (result) {\n              log.info(`Removed repeatable job with key ${job.repeatJobKey}`);\n            }\n          }\n        }\n      } else if (option.status === 'initiated') {\n        try {\n          const expiration = await contract.getExpiration();\n\n          if (\n            expiration &&\n            expiration + SUBSCRIBER_GRACE_PERIOD < BigInt(Math.ceil(Date.now() / 1000))\n          ) {\n            log.info(`Option ${option.optionId} has expired`);\n            const updatedOption: ExpiredOption = {\n              ...option,\n              status: 'expired',\n            };\n\n            await server.redis.set(job.data.redisKey, JSON.stringify(updatedOption, jsonReplacer));\n          }\n        } catch (error) {\n          // console.log(error);\n\n          const updatedOption: SettledOption = {\n            ...option,\n            status: 'settled',\n          };\n\n          await server.redis.set(job.data.redisKey, JSON.stringify(updatedOption, jsonReplacer));\n        }\n      }\n    },\n    {\n      connection: server.redis,\n      concurrency: 10,\n    },\n  );\n\n  worker.on('completed', (job) => {\n    log.info(`${job.name} has completed!`);\n  });\n\n  worker.on('failed', (job, err) => {\n    log.error(`${job?.id} has failed with ${err.stack}`);\n  });\n\n  server.get(\n    '/:trader/:broker/options',\n    {\n      schema: {\n        params: z\n          .object({\n            trader: z.string().transform((v, ctx) => {\n              try {\n                return Address.parse(v);\n              } catch {\n                ctx.addIssue({\n                  code: z.ZodIssueCode.custom,\n                  message: 'Provided trader address is not valid',\n                });\n              }\n            }),\n            broker: z.string().transform((v, ctx) => {\n              try {\n                return Address.parse(v);\n              } catch {\n                ctx.addIssue({\n                  code: z.ZodIssueCode.custom,\n                  message: 'Provided broker address is not valid',\n                });\n              }\n            }),\n          })\n          .required(),\n      },\n    },\n    async (request, reply) => {\n      const { trader, broker } = request.params;\n\n      const keys = await server.redis.keys(`${trader!.toString()}:${broker!.toString()}:option:*`);\n\n      if (!keys.length) {\n        return reply.code(404).send({\n          statusCode: 404,\n          message: 'No options found for the provided trader',\n        });\n      }\n\n      const options = await server.redis.mget(keys);\n\n      const response = new Response(`[${options.filter((v) => v !== null).join(',')}]`, {\n        headers: { 'content-type': 'application/json' },\n      });\n\n      return reply.code(200).send(response);\n    },\n  );\n};\n\nexport default routes;\n", "import type { FastifyPluginAsync } from 'fastify';\nimport market from './market';\nimport ton from './ton-connect';\nimport account from './account';\n\nconst routes: FastifyPluginAsync = async (server) => {\n  await server.register(market);\n  await server.register(ton);\n  await server.register(account);\n};\n\nexport default routes;\n", "import './instrument';\nimport server from './server';\n\nprocess.on('unhandledRejection', (err) => {\n  console.error(err);\n  process.exit(1);\n});\n\nconst port = +server.config.API_PORT;\nconst host = server.config.API_HOST;\nawait server.listen({ host, port });\n\nfor (const signal of ['SIGINT', 'SIGTERM']) {\n  process.on(signal, () =>\n    server.close().then((err) => {\n      console.log(`close application on ${signal}`);\n      process.exit(err ? 1 : 0);\n    }),\n  );\n}\n", "\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/index.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/index.ts\";"],
  "mappings": "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",
  "names": ["_global", "e", "n", "Sentry", "cors", "helmet", "jwt", "redis", "swagger", "websocket", "scalar", "fastify", "serializerCompiler", "validatorCompiler", "DefaultLogger", "WebsocketClient", "fp", "bybitPlugin", "server", "logger", "params", "wsClient", "bybit_default", "Address", "fp", "z", "NodeEnv", "configSchema", "v", "configPlugin", "server", "config", "config_default", "CHAIN", "z", "KlineTopic", "candlestickSchema", "bybitResponseSchema", "candlestickResponseSchema", "candlesticksResponseSchema", "klineMessageSchema", "ZodError", "Address", "TonClient4", "Buffer", "TonApiService", "_TonApiService", "client", "TonClient4", "address", "masterAt", "result", "Address", "Cell", "WalletContractV1R1", "WalletContractV1R2", "WalletContractV1R3", "WalletContractV2R1", "WalletContractV2R2", "WalletContractV3R1", "WalletContractV3R2", "WalletContractV4R2", "contractAddress", "Buffer", "WalletContractV4R1", "args", "wallet", "data", "code", "knownWallets", "loadWalletV1Data", "loadWalletV2Data", "loadWalletV3Data", "loadWalletV4Data", "contract", "loadData", "cs", "seqno", "publicKey", "walletId", "plugins", "tryParsePublicKey", "stateInit", "sha256", "Address", "Cell", "contractAddress", "loadStateInit", "Buffer", "tweetnacl", "tonProofPrefix", "tonConnectPrefix", "validAuthTime", "TonProofService", "payload", "getWalletPublicKey", "stateInit", "publicKey", "tryParsePublicKey", "wantedPublicKey", "wantedAddress", "address", "message", "wc", "ts", "dl", "msg", "msgHash", "fullMsg", "result", "z", "MarketService", "redisKeys", "redis", "pipeline", "results", "topic24h", "item", "topic1m", "parsedTopic24h", "candlestickSchema", "parsedTopic1m", "isKlineOfInterest", "topic", "data", "handleKlineTopic", "request", "reply", "redis", "latestCandlestick", "error", "KlineTopic", "result", "MarketService", "ZodError", "candlesticks", "candlestick", "handleKlineTopicWS", "socket", "bybit", "message", "topics", "klineMessageSchema", "handleBybitResponse", "mnemonicToPrivateKey", "Address", "TonClient", "WalletContractV4", "beginCell", "internal", "DataStream", "storeDSTPublishCandlestick", "z", "routes", "server", "redis", "bybit", "log", "publicClient", "keyPair", "wallet", "btcCandlestickPublisherWallet", "stream", "data", "candlestick", "batches", "shouldSkip", "_", "info", "seqno", "candlestickToPublish", "v", "error", "KlineTopic", "handleKlineTopic", "handleKlineTopicWS", "market_default", "z", "checkProofRequestSchema", "z", "CHAIN", "fromNano", "handleCheckProof", "request", "reply", "client", "TonApiService", "TonProofService", "address", "newToken", "error", "handleGenerateProofPayload", "payload", "token", "handleAccountInfo", "network", "account", "routes", "server", "checkProofRequestSchema", "handleCheckProof", "handleGenerateProofPayload", "request", "reply", "err", "handleAccountInfo", "ton_connect_default", "Address", "Cell", "TonClient4", "Queue", "Worker", "CashOrNothingOption", "loadCashOrNothingOptionDeploy", "loadStateInit", "z", "Sentry", "QUEUE_BROKERS", "QUEUE_OPTIONS", "SUBSCRIBER_GRACE_PERIOD", "INDEXER_BASE_URL", "OPCODE_CASH_OR_NOTHING_OPTION_DEPLOY", "OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_IN_MONEY", "OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_OUT_MONEY", "OPCODE_CASH_OR_NOTHING_OPTION_SETTLED_AT_MONEY", "ERROR_CODE_CONTRACT_UNINIT", "jsonReplacer", "_", "v", "jsonReviver", "k", "bigintKeys", "addressKeys", "routes", "server", "log", "brokersQueue", "optionsQueue", "brokerWorker", "job", "startUtime", "searchParams", "response", "error", "transactions", "deployOptionMessages", "tx", "msg", "a", "b", "cellSlice", "initDataSlice", "brokerAddress", "optionId", "bodySlice", "agreement", "key", "option", "err", "publicClient", "worker", "contract", "strikePrice", "updatedOption", "settledInMoneyMessage", "settledOutMoneyMessage", "settledAtMoneyMessage", "settledOption", "expiration", "ctx", "request", "reply", "trader", "broker", "keys", "options", "account_default", "routes", "server", "market_default", "ton_connect_default", "account_default", "routes_default", "Sentry", "server", "fastify", "validatorCompiler", "serializerCompiler", "config_default", "cors", "helmet", "jwt", "swagger", "scalar", "websocket", "redis", "bybit_default", "_", "reply", "routes_default", "server_default", "err", "port", "server_default", "host", "signal", "src_default"]
}
