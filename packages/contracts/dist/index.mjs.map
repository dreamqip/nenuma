{"version":3,"sources":["../build/Brokerage/tact_Broker.ts","../build/Brokerage/tact_Brokerage.ts","../build/Brokerage/tact_BrokerageAccount.ts","../build/CashOrNothingOption/tact_CashOrNothingOption.ts","../build/DataStream/tact_DataStream.ts","../build/DataStream/tact_Session.ts","../build/SimpleSubscriber/tact_SimpleSubscriber.ts","../build/DataStream/tact_SubscriptionBatch.ts","../wrappers/constants.ts"],"names":["Cell","Slice","Builder","beginCell","contractAddress","TupleBuilder","storeBRGDeploy","src","builder","b_0","storeBRKDeploy","storeBRKDeposit","storeBRKWithdraw","loadTupleFraction","source","_nominator","_denominator","storeCashOrNothingOptionDraftAgreement","b_1","storeBrokerDeployOption","loadCashOrNothingOptionDeploy","slice","sc_0","_queryId","_stream","sc_1","_agreement","loadCashOrNothingOptionAgreement","storeCashOrNothingOptionDeploySuccess","storeCashOrNothingOptionSettledInMoneyNotification","storeCashOrNothingOptionSettledOutMoneyNotification","storeCashOrNothingOptionSettledAtMoneyNotification","_holder","_writer","_initiation","_expiration","_optionType","_investment","_payout","storeSubscriberDestroyedNotification","initBroker_init_args","Broker_init","owner","stream","__code","__system","__data","Broker_errors","Broker_types","Broker_getters","Broker_receivers","Broker","_Broker","address","init","provider","via","args","message","body","optionId","storeBRGDeployBroker","storeBRKDeploySuccess","storeBRGDeployAccount","storeBRADeploySuccess","initBrokerage_init_args","Brokerage_init","Brokerage_errors","Brokerage_types","Brokerage_getters","Brokerage_receivers","Brokerage","_Brokerage","trader","storeBRADeploy","initBrokerageAccount_init_args","BrokerageAccount_init","brokerage","BrokerageAccount_errors","BrokerageAccount_types","BrokerageAccount_getters","BrokerageAccount_receivers","BrokerageAccount","_BrokerageAccount","storeDSTDeploySessionSuccess","storeCandlestick","loadTupleCandlestick","_start","_end","_open","_close","_high","_low","storeSESSubscribeSuccess","storeSESCandlestickPublishedNotification","storeSESUnsubscribedNotification","storeSESDestroySuccess","storeSubscriberCheckTimeout","storeCashOrNothingOptionDeploy","storeCashOrNothingOptionAgreement","loadTupleCashOrNothingOptionAgreement","initCashOrNothingOption_init_args","CashOrNothingOption_init","deployer","CashOrNothingOption_errors","CashOrNothingOption_types","CashOrNothingOption_getters","CashOrNothingOption_receivers","CashOrNothingOption","_CashOrNothingOption","result_p","Dictionary","storeStateInit","loadStateInit","_code","_data","storeDSTDeploy","storeDSTDeployBatch","storeDSTDeploySession","storeDSTSubscribe","storeDSTPublishCandlestick","storeSBDeploySuccess","storeSBSubscribeSuccess","storeSBUnsubscribedNotification","storeSESDeploySuccess","storeSESSubscribe","storeDSTTopUpSubscription","storeSESUnsubscribe","storeSESDestroy","storeSBInfo","loadSBInfo","dictValueParserSBInfo","initDataStream_init_args","DataStream_init","publisher","topic","DataStream_errors","DataStream_types","DataStream_getters","DataStream_receivers","DataStream","_DataStream","batchId","subscriber","storeDSTSubscribeSuccess","storeDSTUnsubscribedNotification","storeSBCandlestickPublishedNotification","storeSESDeploy","initSession_init_args","Session_init","Session_errors","Session_types","Session_getters","Session_receivers","Session","_Session","storeSimpleSubscriberDeploy","initSimpleSubscriber_init_args","SimpleSubscriber_init","subscriberId","SimpleSubscriber_errors","SimpleSubscriber_types","SimpleSubscriber_getters","SimpleSubscriber_receivers","SimpleSubscriber","_SimpleSubscriber","storeSBDeploy","storeSBSubscribe","storeSBPublishCandlestick","storeSBTopUpSubscription","storeSBUnsubscribe","storeSubscriptionInfo","loadSubscriptionInfo","dictValueParserSubscriptionInfo","initSubscriptionBatch_init_args","SubscriptionBatch_init","SubscriptionBatch_errors","SubscriptionBatch_types","SubscriptionBatch_getters","SubscriptionBatch_receivers","SubscriptionBatch","_SubscriptionBatch","toNano","ERR_ACCESS_DENIED","ERR_INSUFFICIENT_DEPOSIT","ERR_BATCH_LIMIT_EXCEEDED","ERR_SUBSCRIPTION_LIMIT_EXCEEDED","ERR_INVALID_ARGUMENT","ERR_STREAM_NOT_SUBSCRIBED","ERR_STREAM_SUBSCRIBED","ERR_BATCH_NOT_FOUND","ERR_OPTION_NOT_EXPIRED","ERR_INVALID_STATE","ERR_NOT_DEPLOYED","ERR_TIMEOUT_NOT_EXCEEDED","NOTIFICATION_DEPOSIT","NOTIFICATION_PREMIUM","SUS_STORAGE_RESERVE","SUS_OPERATIONAL_RESERVE","THE_GREAT_CONJUCTION_2077","DAY","THE_CELESTIAL_CONVERGENCE","CNO_STATE_DEPLOYED","CNO_STATE_PENDING_DEPLOY_SESSION","CNO_STATE_PENDING_SUBSCRIBE_STREAM","CNO_STATE_INITIATED","CNO_STATE_SETTLED","CNO_STATE_PENDING_UNSUBSCRIBE_STREAM","CNO_STATE_PENDING_DESTROY_SESSION"],"mappings":"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","sourcesContent":["import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Fraction = {\n    $$type: 'Fraction';\n    nominator: bigint;\n    denominator: bigint;\n}\n\nexport function storeFraction(src: Fraction) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.nominator, 257);\n        b_0.storeInt(src.denominator, 257);\n    };\n}\n\nexport function loadFraction(slice: Slice) {\n    let sc_0 = slice;\n    let _nominator = sc_0.loadIntBig(257);\n    let _denominator = sc_0.loadIntBig(257);\n    return { $$type: 'Fraction' as const, nominator: _nominator, denominator: _denominator };\n}\n\nfunction loadTupleFraction(source: TupleReader) {\n    let _nominator = source.readBigNumber();\n    let _denominator = source.readBigNumber();\n    return { $$type: 'Fraction' as const, nominator: _nominator, denominator: _denominator };\n}\n\nfunction storeTupleFraction(source: Fraction) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.nominator);\n    builder.writeNumber(source.denominator);\n    return builder.build();\n}\n\nfunction dictValueParserFraction(): DictionaryValue<Fraction> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeFraction(src)).endCell());\n        },\n        parse: (src) => {\n            return loadFraction(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDraftAgreement = {\n    $$type: 'CashOrNothingOptionDraftAgreement';\n    holder: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n}\n\nexport function storeCashOrNothingOptionDraftAgreement(src: CashOrNothingOptionDraftAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeInt(src.initiation, 257);\n        b_0.storeInt(src.expiration, 257);\n        b_0.storeBit(src.optionType);\n        let b_1 = new Builder();\n        b_1.storeInt(src.investment, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDraftAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _initiation = sc_0.loadIntBig(257);\n    let _expiration = sc_0.loadIntBig(257);\n    let _optionType = sc_0.loadBit();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _investment = sc_1.loadIntBig(257);\n    return { $$type: 'CashOrNothingOptionDraftAgreement' as const, holder: _holder, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment };\n}\n\nfunction loadTupleCashOrNothingOptionDraftAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionDraftAgreement' as const, holder: _holder, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment };\n}\n\nfunction storeTupleCashOrNothingOptionDraftAgreement(source: CashOrNothingOptionDraftAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDraftAgreement(): DictionaryValue<CashOrNothingOptionDraftAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDraftAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDraftAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BrokerDeployOption = {\n    $$type: 'BrokerDeployOption';\n    queryId: bigint;\n    draft: CashOrNothingOptionDraftAgreement;\n}\n\nexport function storeBrokerDeployOption(src: BrokerDeployOption) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1174791129, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCashOrNothingOptionDraftAgreement(src.draft));\n    };\n}\n\nexport function loadBrokerDeployOption(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1174791129) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _draft = loadCashOrNothingOptionDraftAgreement(sc_0);\n    return { $$type: 'BrokerDeployOption' as const, queryId: _queryId, draft: _draft };\n}\n\nfunction loadTupleBrokerDeployOption(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _draft = loadTupleCashOrNothingOptionDraftAgreement(source.readTuple());\n    return { $$type: 'BrokerDeployOption' as const, queryId: _queryId, draft: _draft };\n}\n\nfunction storeTupleBrokerDeployOption(source: BrokerDeployOption) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCashOrNothingOptionDraftAgreement(source.draft));\n    return builder.build();\n}\n\nfunction dictValueParserBrokerDeployOption(): DictionaryValue<BrokerDeployOption> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBrokerDeployOption(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBrokerDeployOption(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BrokerDeployOptionSuccess = {\n    $$type: 'BrokerDeployOptionSuccess';\n    queryId: bigint;\n    stream: Address;\n    option: Address;\n}\n\nexport function storeBrokerDeployOptionSuccess(src: BrokerDeployOptionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2438374427, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        b_0.storeAddress(src.option);\n    };\n}\n\nexport function loadBrokerDeployOptionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2438374427) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let _option = sc_0.loadAddress();\n    return { $$type: 'BrokerDeployOptionSuccess' as const, queryId: _queryId, stream: _stream, option: _option };\n}\n\nfunction loadTupleBrokerDeployOptionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    let _option = source.readAddress();\n    return { $$type: 'BrokerDeployOptionSuccess' as const, queryId: _queryId, stream: _stream, option: _option };\n}\n\nfunction storeTupleBrokerDeployOptionSuccess(source: BrokerDeployOptionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeAddress(source.option);\n    return builder.build();\n}\n\nfunction dictValueParserBrokerDeployOptionSuccess(): DictionaryValue<BrokerDeployOptionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBrokerDeployOptionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBrokerDeployOptionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploy = {\n    $$type: 'CashOrNothingOptionDeploy';\n    queryId: bigint;\n    stream: Address;\n    agreement: CashOrNothingOptionAgreement;\n}\n\nexport function storeCashOrNothingOptionDeploy(src: CashOrNothingOptionDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3343868548, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        let b_1 = new Builder();\n        b_1.store(storeCashOrNothingOptionAgreement(src.agreement));\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3343868548) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _agreement = loadCashOrNothingOptionAgreement(sc_1);\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction loadTupleCashOrNothingOptionDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    const _agreement = loadTupleCashOrNothingOptionAgreement(source.readTuple());\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction storeTupleCashOrNothingOptionDeploy(source: CashOrNothingOptionDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeTuple(storeTupleCashOrNothingOptionAgreement(source.agreement));\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploy(): DictionaryValue<CashOrNothingOptionDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploySuccess = {\n    $$type: 'CashOrNothingOptionDeploySuccess';\n    queryId: bigint;\n    optionId: bigint;\n    holder: Address;\n}\n\nexport function storeCashOrNothingOptionDeploySuccess(src: CashOrNothingOptionDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2669413677, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.optionId, 257);\n        b_0.storeAddress(src.holder);\n    };\n}\n\nexport function loadCashOrNothingOptionDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2669413677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _optionId = sc_0.loadIntBig(257);\n    let _holder = sc_0.loadAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction loadTupleCashOrNothingOptionDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _optionId = source.readBigNumber();\n    let _holder = source.readAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction storeTupleCashOrNothingOptionDeploySuccess(source: CashOrNothingOptionDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.optionId);\n    builder.writeAddress(source.holder);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploySuccess(): DictionaryValue<CashOrNothingOptionDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledInMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledInMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledInMoneyNotification(src: CashOrNothingOptionSettledInMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4281832964, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledInMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4281832964) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledInMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledInMoneyNotification(source: CashOrNothingOptionSettledInMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledInMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledInMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledInMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledInMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledOutMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledOutMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledOutMoneyNotification(src: CashOrNothingOptionSettledOutMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(402709524, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledOutMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 402709524) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledOutMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledOutMoneyNotification(source: CashOrNothingOptionSettledOutMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledOutMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledOutMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledOutMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledOutMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledAtMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledAtMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledAtMoneyNotification(src: CashOrNothingOptionSettledAtMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1344539513, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledAtMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1344539513) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledAtMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledAtMoneyNotification(source: CashOrNothingOptionSettledAtMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledAtMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledAtMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledAtMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledAtMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionAgreement = {\n    $$type: 'CashOrNothingOptionAgreement';\n    holder: Address;\n    writer: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n    payout: bigint;\n}\n\nexport function storeCashOrNothingOptionAgreement(src: CashOrNothingOptionAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeAddress(src.writer);\n        b_0.storeUint(src.initiation, 32);\n        b_0.storeUint(src.expiration, 32);\n        b_0.storeBit(src.optionType);\n        b_0.storeCoins(src.investment);\n        b_0.storeCoins(src.payout);\n    };\n}\n\nexport function loadCashOrNothingOptionAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _writer = sc_0.loadAddress();\n    let _initiation = sc_0.loadUintBig(32);\n    let _expiration = sc_0.loadUintBig(32);\n    let _optionType = sc_0.loadBit();\n    let _investment = sc_0.loadCoins();\n    let _payout = sc_0.loadCoins();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction loadTupleCashOrNothingOptionAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _writer = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    let _payout = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction storeTupleCashOrNothingOptionAgreement(source: CashOrNothingOptionAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeAddress(source.writer);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    builder.writeNumber(source.payout);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionAgreement(): DictionaryValue<CashOrNothingOptionAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberDestroyedNotification = {\n    $$type: 'SubscriberDestroyedNotification';\n    queryId: bigint;\n}\n\nexport function storeSubscriberDestroyedNotification(src: SubscriberDestroyedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2253786793, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberDestroyedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2253786793) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberDestroyedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberDestroyedNotification(source: SubscriberDestroyedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberDestroyedNotification(): DictionaryValue<SubscriberDestroyedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberDestroyedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberDestroyedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberCheckTimeout = {\n    $$type: 'SubscriberCheckTimeout';\n    queryId: bigint;\n}\n\nexport function storeSubscriberCheckTimeout(src: SubscriberCheckTimeout) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1397988627, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberCheckTimeout(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1397988627) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberCheckTimeout(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberCheckTimeout(source: SubscriberCheckTimeout) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberCheckTimeout(): DictionaryValue<SubscriberCheckTimeout> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberCheckTimeout(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberCheckTimeout(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberTimeoutExceeded = {\n    $$type: 'SubscriberTimeoutExceeded';\n    queryId: bigint;\n}\n\nexport function storeSubscriberTimeoutExceeded(src: SubscriberTimeoutExceeded) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2857706980, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberTimeoutExceeded(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2857706980) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberTimeoutExceeded(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberTimeoutExceeded(source: SubscriberTimeoutExceeded) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberTimeoutExceeded(): DictionaryValue<SubscriberTimeoutExceeded> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberTimeoutExceeded(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberTimeoutExceeded(src.loadRef().beginParse());\n        }\n    }\n}\n\n type Broker_init_args = {\n    $$type: 'Broker_init_args';\n    owner: Address;\n    stream: Address;\n}\n\nfunction initBroker_init_args(src: Broker_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.owner);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nasync function Broker_init(owner: Address, stream: Address) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('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');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initBroker_init_args({ $$type: 'Broker_init_args', owner, stream })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst Broker_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst Broker_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"Fraction\",\"header\":null,\"fields\":[{\"name\":\"nominator\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"denominator\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"CashOrNothingOptionDraftAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"BrokerDeployOption\",\"header\":1174791129,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"draft\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionDraftAgreement\",\"optional\":false}}]},\n    {\"name\":\"BrokerDeployOptionSuccess\",\"header\":2438374427,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"option\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploy\",\"header\":3343868548,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"agreement\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionAgreement\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploySuccess\",\"header\":2669413677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"optionId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionSettledInMoneyNotification\",\"header\":4281832964,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledOutMoneyNotification\",\"header\":402709524,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledAtMoneyNotification\",\"header\":1344539513,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"writer\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"payout\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}}]},\n    {\"name\":\"SubscriberDestroyedNotification\",\"header\":2253786793,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberCheckTimeout\",\"header\":1397988627,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberTimeoutExceeded\",\"header\":2857706980,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n]\n\nconst Broker_getters: ABIGetter[] = [\n    {\"name\":\"balance\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"storageReserve\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"depositDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"owner\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"stream\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"payout\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"Fraction\",\"optional\":false}},\n    {\"name\":\"payoutRatio\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"Fraction\",\"optional\":false}},\n    {\"name\":\"nextOptionId\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"optionAddress\",\"arguments\":[{\"name\":\"optionId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n]\n\nconst Broker_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRKDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRKDeposit\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRKWithdraw\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BrokerDeployOption\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CashOrNothingOptionDeploySuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CashOrNothingOptionSettledInMoneyNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CashOrNothingOptionSettledOutMoneyNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CashOrNothingOptionSettledAtMoneyNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SubscriberDestroyedNotification\"}},\n]\n\nexport class Broker implements Contract {\n    \n    static async init(owner: Address, stream: Address) {\n        return await Broker_init(owner, stream);\n    }\n    \n    static async fromInit(owner: Address, stream: Address) {\n        const init = await Broker_init(owner, stream);\n        const address = contractAddress(0, init);\n        return new Broker(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new Broker(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  Broker_types,\n        getters: Broker_getters,\n        receivers: Broker_receivers,\n        errors: Broker_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: BRKDeploy | BRKDeposit | BRKWithdraw | BrokerDeployOption | CashOrNothingOptionDeploySuccess | CashOrNothingOptionSettledInMoneyNotification | CashOrNothingOptionSettledOutMoneyNotification | CashOrNothingOptionSettledAtMoneyNotification | SubscriberDestroyedNotification) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRKDeploy') {\n            body = beginCell().store(storeBRKDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRKDeposit') {\n            body = beginCell().store(storeBRKDeposit(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRKWithdraw') {\n            body = beginCell().store(storeBRKWithdraw(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BrokerDeployOption') {\n            body = beginCell().store(storeBrokerDeployOption(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'CashOrNothingOptionDeploySuccess') {\n            body = beginCell().store(storeCashOrNothingOptionDeploySuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'CashOrNothingOptionSettledInMoneyNotification') {\n            body = beginCell().store(storeCashOrNothingOptionSettledInMoneyNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'CashOrNothingOptionSettledOutMoneyNotification') {\n            body = beginCell().store(storeCashOrNothingOptionSettledOutMoneyNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'CashOrNothingOptionSettledAtMoneyNotification') {\n            body = beginCell().store(storeCashOrNothingOptionSettledAtMoneyNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SubscriberDestroyedNotification') {\n            body = beginCell().store(storeSubscriberDestroyedNotification(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getBalance(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('balance', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getStorageReserve(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('storageReserve', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getDepositDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('depositDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getOwner(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('owner', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getStream(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('stream', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getPayout(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('payout', builder.build())).stack;\n        const result = loadTupleFraction(source);\n        return result;\n    }\n    \n    async getPayoutRatio(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('payoutRatio', builder.build())).stack;\n        const result = loadTupleFraction(source);\n        return result;\n    }\n    \n    async getNextOptionId(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('nextOptionId', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getOptionAddress(provider: ContractProvider, optionId: bigint) {\n        let builder = new TupleBuilder();\n        builder.writeNumber(optionId);\n        let source = (await provider.get('optionAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Fraction = {\n    $$type: 'Fraction';\n    nominator: bigint;\n    denominator: bigint;\n}\n\nexport function storeFraction(src: Fraction) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.nominator, 257);\n        b_0.storeInt(src.denominator, 257);\n    };\n}\n\nexport function loadFraction(slice: Slice) {\n    let sc_0 = slice;\n    let _nominator = sc_0.loadIntBig(257);\n    let _denominator = sc_0.loadIntBig(257);\n    return { $$type: 'Fraction' as const, nominator: _nominator, denominator: _denominator };\n}\n\nfunction loadTupleFraction(source: TupleReader) {\n    let _nominator = source.readBigNumber();\n    let _denominator = source.readBigNumber();\n    return { $$type: 'Fraction' as const, nominator: _nominator, denominator: _denominator };\n}\n\nfunction storeTupleFraction(source: Fraction) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.nominator);\n    builder.writeNumber(source.denominator);\n    return builder.build();\n}\n\nfunction dictValueParserFraction(): DictionaryValue<Fraction> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeFraction(src)).endCell());\n        },\n        parse: (src) => {\n            return loadFraction(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDraftAgreement = {\n    $$type: 'CashOrNothingOptionDraftAgreement';\n    holder: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n}\n\nexport function storeCashOrNothingOptionDraftAgreement(src: CashOrNothingOptionDraftAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeInt(src.initiation, 257);\n        b_0.storeInt(src.expiration, 257);\n        b_0.storeBit(src.optionType);\n        let b_1 = new Builder();\n        b_1.storeInt(src.investment, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDraftAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _initiation = sc_0.loadIntBig(257);\n    let _expiration = sc_0.loadIntBig(257);\n    let _optionType = sc_0.loadBit();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _investment = sc_1.loadIntBig(257);\n    return { $$type: 'CashOrNothingOptionDraftAgreement' as const, holder: _holder, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment };\n}\n\nfunction loadTupleCashOrNothingOptionDraftAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionDraftAgreement' as const, holder: _holder, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment };\n}\n\nfunction storeTupleCashOrNothingOptionDraftAgreement(source: CashOrNothingOptionDraftAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDraftAgreement(): DictionaryValue<CashOrNothingOptionDraftAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDraftAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDraftAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BrokerDeployOption = {\n    $$type: 'BrokerDeployOption';\n    queryId: bigint;\n    draft: CashOrNothingOptionDraftAgreement;\n}\n\nexport function storeBrokerDeployOption(src: BrokerDeployOption) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1174791129, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCashOrNothingOptionDraftAgreement(src.draft));\n    };\n}\n\nexport function loadBrokerDeployOption(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1174791129) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _draft = loadCashOrNothingOptionDraftAgreement(sc_0);\n    return { $$type: 'BrokerDeployOption' as const, queryId: _queryId, draft: _draft };\n}\n\nfunction loadTupleBrokerDeployOption(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _draft = loadTupleCashOrNothingOptionDraftAgreement(source.readTuple());\n    return { $$type: 'BrokerDeployOption' as const, queryId: _queryId, draft: _draft };\n}\n\nfunction storeTupleBrokerDeployOption(source: BrokerDeployOption) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCashOrNothingOptionDraftAgreement(source.draft));\n    return builder.build();\n}\n\nfunction dictValueParserBrokerDeployOption(): DictionaryValue<BrokerDeployOption> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBrokerDeployOption(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBrokerDeployOption(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BrokerDeployOptionSuccess = {\n    $$type: 'BrokerDeployOptionSuccess';\n    queryId: bigint;\n    stream: Address;\n    option: Address;\n}\n\nexport function storeBrokerDeployOptionSuccess(src: BrokerDeployOptionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2438374427, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        b_0.storeAddress(src.option);\n    };\n}\n\nexport function loadBrokerDeployOptionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2438374427) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let _option = sc_0.loadAddress();\n    return { $$type: 'BrokerDeployOptionSuccess' as const, queryId: _queryId, stream: _stream, option: _option };\n}\n\nfunction loadTupleBrokerDeployOptionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    let _option = source.readAddress();\n    return { $$type: 'BrokerDeployOptionSuccess' as const, queryId: _queryId, stream: _stream, option: _option };\n}\n\nfunction storeTupleBrokerDeployOptionSuccess(source: BrokerDeployOptionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeAddress(source.option);\n    return builder.build();\n}\n\nfunction dictValueParserBrokerDeployOptionSuccess(): DictionaryValue<BrokerDeployOptionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBrokerDeployOptionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBrokerDeployOptionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploy = {\n    $$type: 'CashOrNothingOptionDeploy';\n    queryId: bigint;\n    stream: Address;\n    agreement: CashOrNothingOptionAgreement;\n}\n\nexport function storeCashOrNothingOptionDeploy(src: CashOrNothingOptionDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3343868548, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        let b_1 = new Builder();\n        b_1.store(storeCashOrNothingOptionAgreement(src.agreement));\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3343868548) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _agreement = loadCashOrNothingOptionAgreement(sc_1);\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction loadTupleCashOrNothingOptionDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    const _agreement = loadTupleCashOrNothingOptionAgreement(source.readTuple());\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction storeTupleCashOrNothingOptionDeploy(source: CashOrNothingOptionDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeTuple(storeTupleCashOrNothingOptionAgreement(source.agreement));\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploy(): DictionaryValue<CashOrNothingOptionDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploySuccess = {\n    $$type: 'CashOrNothingOptionDeploySuccess';\n    queryId: bigint;\n    optionId: bigint;\n    holder: Address;\n}\n\nexport function storeCashOrNothingOptionDeploySuccess(src: CashOrNothingOptionDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2669413677, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.optionId, 257);\n        b_0.storeAddress(src.holder);\n    };\n}\n\nexport function loadCashOrNothingOptionDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2669413677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _optionId = sc_0.loadIntBig(257);\n    let _holder = sc_0.loadAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction loadTupleCashOrNothingOptionDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _optionId = source.readBigNumber();\n    let _holder = source.readAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction storeTupleCashOrNothingOptionDeploySuccess(source: CashOrNothingOptionDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.optionId);\n    builder.writeAddress(source.holder);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploySuccess(): DictionaryValue<CashOrNothingOptionDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledInMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledInMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledInMoneyNotification(src: CashOrNothingOptionSettledInMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4281832964, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledInMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4281832964) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledInMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledInMoneyNotification(source: CashOrNothingOptionSettledInMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledInMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledInMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledInMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledInMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledOutMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledOutMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledOutMoneyNotification(src: CashOrNothingOptionSettledOutMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(402709524, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledOutMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 402709524) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledOutMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledOutMoneyNotification(source: CashOrNothingOptionSettledOutMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledOutMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledOutMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledOutMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledOutMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledAtMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledAtMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledAtMoneyNotification(src: CashOrNothingOptionSettledAtMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1344539513, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledAtMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1344539513) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledAtMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledAtMoneyNotification(source: CashOrNothingOptionSettledAtMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledAtMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledAtMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledAtMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledAtMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionAgreement = {\n    $$type: 'CashOrNothingOptionAgreement';\n    holder: Address;\n    writer: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n    payout: bigint;\n}\n\nexport function storeCashOrNothingOptionAgreement(src: CashOrNothingOptionAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeAddress(src.writer);\n        b_0.storeUint(src.initiation, 32);\n        b_0.storeUint(src.expiration, 32);\n        b_0.storeBit(src.optionType);\n        b_0.storeCoins(src.investment);\n        b_0.storeCoins(src.payout);\n    };\n}\n\nexport function loadCashOrNothingOptionAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _writer = sc_0.loadAddress();\n    let _initiation = sc_0.loadUintBig(32);\n    let _expiration = sc_0.loadUintBig(32);\n    let _optionType = sc_0.loadBit();\n    let _investment = sc_0.loadCoins();\n    let _payout = sc_0.loadCoins();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction loadTupleCashOrNothingOptionAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _writer = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    let _payout = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction storeTupleCashOrNothingOptionAgreement(source: CashOrNothingOptionAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeAddress(source.writer);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    builder.writeNumber(source.payout);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionAgreement(): DictionaryValue<CashOrNothingOptionAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberDestroyedNotification = {\n    $$type: 'SubscriberDestroyedNotification';\n    queryId: bigint;\n}\n\nexport function storeSubscriberDestroyedNotification(src: SubscriberDestroyedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2253786793, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberDestroyedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2253786793) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberDestroyedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberDestroyedNotification(source: SubscriberDestroyedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberDestroyedNotification(): DictionaryValue<SubscriberDestroyedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberDestroyedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberDestroyedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberCheckTimeout = {\n    $$type: 'SubscriberCheckTimeout';\n    queryId: bigint;\n}\n\nexport function storeSubscriberCheckTimeout(src: SubscriberCheckTimeout) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1397988627, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberCheckTimeout(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1397988627) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberCheckTimeout(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberCheckTimeout(source: SubscriberCheckTimeout) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberCheckTimeout(): DictionaryValue<SubscriberCheckTimeout> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberCheckTimeout(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberCheckTimeout(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberTimeoutExceeded = {\n    $$type: 'SubscriberTimeoutExceeded';\n    queryId: bigint;\n}\n\nexport function storeSubscriberTimeoutExceeded(src: SubscriberTimeoutExceeded) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2857706980, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberTimeoutExceeded(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2857706980) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberTimeoutExceeded(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberTimeoutExceeded(source: SubscriberTimeoutExceeded) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberTimeoutExceeded(): DictionaryValue<SubscriberTimeoutExceeded> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberTimeoutExceeded(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberTimeoutExceeded(src.loadRef().beginParse());\n        }\n    }\n}\n\n type Brokerage_init_args = {\n    $$type: 'Brokerage_init_args';\n    owner: Address;\n}\n\nfunction initBrokerage_init_args(src: Brokerage_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.owner);\n    };\n}\n\nasync function Brokerage_init(owner: Address) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initBrokerage_init_args({ $$type: 'Brokerage_init_args', owner })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst Brokerage_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst Brokerage_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"Fraction\",\"header\":null,\"fields\":[{\"name\":\"nominator\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"denominator\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"CashOrNothingOptionDraftAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"BrokerDeployOption\",\"header\":1174791129,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"draft\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionDraftAgreement\",\"optional\":false}}]},\n    {\"name\":\"BrokerDeployOptionSuccess\",\"header\":2438374427,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"option\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploy\",\"header\":3343868548,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"agreement\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionAgreement\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploySuccess\",\"header\":2669413677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"optionId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionSettledInMoneyNotification\",\"header\":4281832964,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledOutMoneyNotification\",\"header\":402709524,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledAtMoneyNotification\",\"header\":1344539513,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"writer\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"payout\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}}]},\n    {\"name\":\"SubscriberDestroyedNotification\",\"header\":2253786793,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberCheckTimeout\",\"header\":1397988627,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberTimeoutExceeded\",\"header\":2857706980,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n]\n\nconst Brokerage_getters: ABIGetter[] = [\n    {\"name\":\"storageReserve\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"owner\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"broker\",\"arguments\":[{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"account\",\"arguments\":[{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n]\n\nconst Brokerage_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRGDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRGDeployBroker\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRKDeploySuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRGDeployAccount\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRADeploySuccess\"}},\n]\n\nexport class Brokerage implements Contract {\n    \n    static async init(owner: Address) {\n        return await Brokerage_init(owner);\n    }\n    \n    static async fromInit(owner: Address) {\n        const init = await Brokerage_init(owner);\n        const address = contractAddress(0, init);\n        return new Brokerage(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new Brokerage(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  Brokerage_types,\n        getters: Brokerage_getters,\n        receivers: Brokerage_receivers,\n        errors: Brokerage_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: BRGDeploy | BRGDeployBroker | BRKDeploySuccess | BRGDeployAccount | BRADeploySuccess) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRGDeploy') {\n            body = beginCell().store(storeBRGDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRGDeployBroker') {\n            body = beginCell().store(storeBRGDeployBroker(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRKDeploySuccess') {\n            body = beginCell().store(storeBRKDeploySuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRGDeployAccount') {\n            body = beginCell().store(storeBRGDeployAccount(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRADeploySuccess') {\n            body = beginCell().store(storeBRADeploySuccess(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getStorageReserve(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('storageReserve', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getOwner(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('owner', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getBroker(provider: ContractProvider, stream: Address) {\n        let builder = new TupleBuilder();\n        builder.writeAddress(stream);\n        let source = (await provider.get('broker', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getAccount(provider: ContractProvider, trader: Address) {\n        let builder = new TupleBuilder();\n        builder.writeAddress(trader);\n        let source = (await provider.get('account', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Fraction = {\n    $$type: 'Fraction';\n    nominator: bigint;\n    denominator: bigint;\n}\n\nexport function storeFraction(src: Fraction) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.nominator, 257);\n        b_0.storeInt(src.denominator, 257);\n    };\n}\n\nexport function loadFraction(slice: Slice) {\n    let sc_0 = slice;\n    let _nominator = sc_0.loadIntBig(257);\n    let _denominator = sc_0.loadIntBig(257);\n    return { $$type: 'Fraction' as const, nominator: _nominator, denominator: _denominator };\n}\n\nfunction loadTupleFraction(source: TupleReader) {\n    let _nominator = source.readBigNumber();\n    let _denominator = source.readBigNumber();\n    return { $$type: 'Fraction' as const, nominator: _nominator, denominator: _denominator };\n}\n\nfunction storeTupleFraction(source: Fraction) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.nominator);\n    builder.writeNumber(source.denominator);\n    return builder.build();\n}\n\nfunction dictValueParserFraction(): DictionaryValue<Fraction> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeFraction(src)).endCell());\n        },\n        parse: (src) => {\n            return loadFraction(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDraftAgreement = {\n    $$type: 'CashOrNothingOptionDraftAgreement';\n    holder: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n}\n\nexport function storeCashOrNothingOptionDraftAgreement(src: CashOrNothingOptionDraftAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeInt(src.initiation, 257);\n        b_0.storeInt(src.expiration, 257);\n        b_0.storeBit(src.optionType);\n        let b_1 = new Builder();\n        b_1.storeInt(src.investment, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDraftAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _initiation = sc_0.loadIntBig(257);\n    let _expiration = sc_0.loadIntBig(257);\n    let _optionType = sc_0.loadBit();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _investment = sc_1.loadIntBig(257);\n    return { $$type: 'CashOrNothingOptionDraftAgreement' as const, holder: _holder, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment };\n}\n\nfunction loadTupleCashOrNothingOptionDraftAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionDraftAgreement' as const, holder: _holder, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment };\n}\n\nfunction storeTupleCashOrNothingOptionDraftAgreement(source: CashOrNothingOptionDraftAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDraftAgreement(): DictionaryValue<CashOrNothingOptionDraftAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDraftAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDraftAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BrokerDeployOption = {\n    $$type: 'BrokerDeployOption';\n    queryId: bigint;\n    draft: CashOrNothingOptionDraftAgreement;\n}\n\nexport function storeBrokerDeployOption(src: BrokerDeployOption) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1174791129, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCashOrNothingOptionDraftAgreement(src.draft));\n    };\n}\n\nexport function loadBrokerDeployOption(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1174791129) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _draft = loadCashOrNothingOptionDraftAgreement(sc_0);\n    return { $$type: 'BrokerDeployOption' as const, queryId: _queryId, draft: _draft };\n}\n\nfunction loadTupleBrokerDeployOption(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _draft = loadTupleCashOrNothingOptionDraftAgreement(source.readTuple());\n    return { $$type: 'BrokerDeployOption' as const, queryId: _queryId, draft: _draft };\n}\n\nfunction storeTupleBrokerDeployOption(source: BrokerDeployOption) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCashOrNothingOptionDraftAgreement(source.draft));\n    return builder.build();\n}\n\nfunction dictValueParserBrokerDeployOption(): DictionaryValue<BrokerDeployOption> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBrokerDeployOption(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBrokerDeployOption(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BrokerDeployOptionSuccess = {\n    $$type: 'BrokerDeployOptionSuccess';\n    queryId: bigint;\n    stream: Address;\n    option: Address;\n}\n\nexport function storeBrokerDeployOptionSuccess(src: BrokerDeployOptionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2438374427, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        b_0.storeAddress(src.option);\n    };\n}\n\nexport function loadBrokerDeployOptionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2438374427) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let _option = sc_0.loadAddress();\n    return { $$type: 'BrokerDeployOptionSuccess' as const, queryId: _queryId, stream: _stream, option: _option };\n}\n\nfunction loadTupleBrokerDeployOptionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    let _option = source.readAddress();\n    return { $$type: 'BrokerDeployOptionSuccess' as const, queryId: _queryId, stream: _stream, option: _option };\n}\n\nfunction storeTupleBrokerDeployOptionSuccess(source: BrokerDeployOptionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeAddress(source.option);\n    return builder.build();\n}\n\nfunction dictValueParserBrokerDeployOptionSuccess(): DictionaryValue<BrokerDeployOptionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBrokerDeployOptionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBrokerDeployOptionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploy = {\n    $$type: 'CashOrNothingOptionDeploy';\n    queryId: bigint;\n    stream: Address;\n    agreement: CashOrNothingOptionAgreement;\n}\n\nexport function storeCashOrNothingOptionDeploy(src: CashOrNothingOptionDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3343868548, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        let b_1 = new Builder();\n        b_1.store(storeCashOrNothingOptionAgreement(src.agreement));\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3343868548) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _agreement = loadCashOrNothingOptionAgreement(sc_1);\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction loadTupleCashOrNothingOptionDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    const _agreement = loadTupleCashOrNothingOptionAgreement(source.readTuple());\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction storeTupleCashOrNothingOptionDeploy(source: CashOrNothingOptionDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeTuple(storeTupleCashOrNothingOptionAgreement(source.agreement));\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploy(): DictionaryValue<CashOrNothingOptionDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploySuccess = {\n    $$type: 'CashOrNothingOptionDeploySuccess';\n    queryId: bigint;\n    optionId: bigint;\n    holder: Address;\n}\n\nexport function storeCashOrNothingOptionDeploySuccess(src: CashOrNothingOptionDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2669413677, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.optionId, 257);\n        b_0.storeAddress(src.holder);\n    };\n}\n\nexport function loadCashOrNothingOptionDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2669413677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _optionId = sc_0.loadIntBig(257);\n    let _holder = sc_0.loadAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction loadTupleCashOrNothingOptionDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _optionId = source.readBigNumber();\n    let _holder = source.readAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction storeTupleCashOrNothingOptionDeploySuccess(source: CashOrNothingOptionDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.optionId);\n    builder.writeAddress(source.holder);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploySuccess(): DictionaryValue<CashOrNothingOptionDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledInMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledInMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledInMoneyNotification(src: CashOrNothingOptionSettledInMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4281832964, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledInMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4281832964) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledInMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledInMoneyNotification(source: CashOrNothingOptionSettledInMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledInMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledInMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledInMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledInMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledOutMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledOutMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledOutMoneyNotification(src: CashOrNothingOptionSettledOutMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(402709524, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledOutMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 402709524) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledOutMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledOutMoneyNotification(source: CashOrNothingOptionSettledOutMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledOutMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledOutMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledOutMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledOutMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledAtMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledAtMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledAtMoneyNotification(src: CashOrNothingOptionSettledAtMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1344539513, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledAtMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1344539513) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledAtMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledAtMoneyNotification(source: CashOrNothingOptionSettledAtMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledAtMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledAtMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledAtMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledAtMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionAgreement = {\n    $$type: 'CashOrNothingOptionAgreement';\n    holder: Address;\n    writer: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n    payout: bigint;\n}\n\nexport function storeCashOrNothingOptionAgreement(src: CashOrNothingOptionAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeAddress(src.writer);\n        b_0.storeUint(src.initiation, 32);\n        b_0.storeUint(src.expiration, 32);\n        b_0.storeBit(src.optionType);\n        b_0.storeCoins(src.investment);\n        b_0.storeCoins(src.payout);\n    };\n}\n\nexport function loadCashOrNothingOptionAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _writer = sc_0.loadAddress();\n    let _initiation = sc_0.loadUintBig(32);\n    let _expiration = sc_0.loadUintBig(32);\n    let _optionType = sc_0.loadBit();\n    let _investment = sc_0.loadCoins();\n    let _payout = sc_0.loadCoins();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction loadTupleCashOrNothingOptionAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _writer = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    let _payout = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction storeTupleCashOrNothingOptionAgreement(source: CashOrNothingOptionAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeAddress(source.writer);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    builder.writeNumber(source.payout);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionAgreement(): DictionaryValue<CashOrNothingOptionAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberDestroyedNotification = {\n    $$type: 'SubscriberDestroyedNotification';\n    queryId: bigint;\n}\n\nexport function storeSubscriberDestroyedNotification(src: SubscriberDestroyedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2253786793, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberDestroyedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2253786793) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberDestroyedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberDestroyedNotification(source: SubscriberDestroyedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberDestroyedNotification(): DictionaryValue<SubscriberDestroyedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberDestroyedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberDestroyedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberCheckTimeout = {\n    $$type: 'SubscriberCheckTimeout';\n    queryId: bigint;\n}\n\nexport function storeSubscriberCheckTimeout(src: SubscriberCheckTimeout) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1397988627, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberCheckTimeout(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1397988627) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberCheckTimeout(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberCheckTimeout(source: SubscriberCheckTimeout) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberCheckTimeout(): DictionaryValue<SubscriberCheckTimeout> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberCheckTimeout(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberCheckTimeout(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberTimeoutExceeded = {\n    $$type: 'SubscriberTimeoutExceeded';\n    queryId: bigint;\n}\n\nexport function storeSubscriberTimeoutExceeded(src: SubscriberTimeoutExceeded) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2857706980, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberTimeoutExceeded(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2857706980) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberTimeoutExceeded(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberTimeoutExceeded(source: SubscriberTimeoutExceeded) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberTimeoutExceeded(): DictionaryValue<SubscriberTimeoutExceeded> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberTimeoutExceeded(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberTimeoutExceeded(src.loadRef().beginParse());\n        }\n    }\n}\n\n type BrokerageAccount_init_args = {\n    $$type: 'BrokerageAccount_init_args';\n    brokerage: Address;\n    trader: Address;\n}\n\nfunction initBrokerageAccount_init_args(src: BrokerageAccount_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.brokerage);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nasync function BrokerageAccount_init(brokerage: Address, trader: Address) {\n    const __code = Cell.fromBase64('te6ccgECGAEAA5oAART/APSkE/S88sgLAQIBYgIDA3jQAdDTAwFxsKMB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiFRQUwNvBPhhAvhi2zxa2zzy4IIVBAUCASAJCgHqAZIwf+BwIddJwh+VMCDXCx/eghBGbSCBuo7X0x8BghBGbSCBuvLggdM/ATH4QW8kECNfA1IwxwXy4ZAhyFmCENGt3lZQA8sfyz8BINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WyfhCAXBt2zx/4DBwBgCWyPhDAcx/AcoAWVkg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxYBINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8Wye1UAo5tbSJus5lbIG7y0IBvIgGRMuL4QW8kE18D+CdvEAGhggiYloC5jpSCCJiWgHD7AhAkcAMEgQCCUCPbPOAQJHADBIBCUCPbPAcHAcrIcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAP6AnABymgjbrORf5MkbrPilzMzAXABygDjDSFus5x/AcoAASBu8tCAAcyVMXABygDiyQH7AAgAmH8BygDIcAHKAHABygAkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDiJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4nABygACfwHKAALJWMwCAWYLDAIBIA8QAhGwkfbPNs8bCGAVDQIRsPS2zzbPGwhgFQ4ACoIImJaAAAIhAJW7vRgnBc7D1dLK57HoTsOdZKhRtmgnCd1jUtK2R8syLTry398WI5gnAgVcAbgGdjlM5YOq5HJbLDgnCdl05as07LczoOlm2UZuikgCAUgREgARsK+7UTQ0gABgAgJ0ExQCDfG2ebZ42EMVFgBzou40NWlwZnM6Ly9RbVdpQnltUVJOOHQxYktCc01HZnBvTWpZQTFHejYyWk1HaFR0RnVMN2IxaDRUggG07UTQ1AH4Y9IAAY5C+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIEmwS4Pgo1wsKgwm68uCJFwACIACG+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIEgLRAQ==');\n    const __system = Cell.fromBase64('te6cckECGgEAA6QAAQHAAQEFoIbNAgEU/wD0pBP0vPLICwMCAWIECgN40AHQ0wMBcbCjAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IhUUFMDbwT4YQL4Yts8Wts88uCCFgUJAeoBkjB/4HAh10nCH5UwINcLH96CEEZtIIG6jtfTHwGCEEZtIIG68uCB0z8BMfhBbyQQI18DUjDHBfLhkCHIWYIQ0a3eVlADyx/LPwEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxbJ+EIBcG3bPH/gMHAGAo5tbSJus5lbIG7y0IBvIgGRMuL4QW8kE18D+CdvEAGhggiYloC5jpSCCJiWgHD7AhAkcAMEgQCCUCPbPOAQJHADBIBCUCPbPAcHAcrIcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAP6AnABymgjbrORf5MkbrPilzMzAXABygDjDSFus5x/AcoAASBu8tCAAcyVMXABygDiyQH7AAgAmH8BygDIcAHKAHABygAkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDiJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4nABygACfwHKAALJWMwAlsj4QwHMfwHKAFlZINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFsntVAIBIAsQAgFmDA4CEbCR9s82zxsIYBYNAAqCCJiWgAIRsPS2zzbPGwhgFg8AAiECASAREgCVu70YJwXOw9XSyuex6E7DnWSoUbZoJwndY1LStkfLMi068t/fFiOYJwIFXAG4BnY5TOWDquRyWyw4JwnZdOWrNOy3M6DpZtlGbopIAgFIExQAEbCvu1E0NIAAYAICdBUZAg3xtnm2eNhDFhgBtO1E0NQB+GPSAAGOQvpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiBJsEuD4KNcLCoMJuvLgiRcAhvpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiBIC0QEAAiAAc6LuNDVpcGZzOi8vUW1XaUJ5bVFSTjh0MWJLQnNNR2Zwb01qWUExR3o2MlpNR2hUdEZ1TDdiMWg0VIL3VL1B');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initBrokerageAccount_init_args({ $$type: 'BrokerageAccount_init_args', brokerage, trader })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst BrokerageAccount_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst BrokerageAccount_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"Fraction\",\"header\":null,\"fields\":[{\"name\":\"nominator\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"denominator\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"CashOrNothingOptionDraftAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"BrokerDeployOption\",\"header\":1174791129,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"draft\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionDraftAgreement\",\"optional\":false}}]},\n    {\"name\":\"BrokerDeployOptionSuccess\",\"header\":2438374427,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"option\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploy\",\"header\":3343868548,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"agreement\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionAgreement\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploySuccess\",\"header\":2669413677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"optionId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionSettledInMoneyNotification\",\"header\":4281832964,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledOutMoneyNotification\",\"header\":402709524,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledAtMoneyNotification\",\"header\":1344539513,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"writer\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"payout\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}}]},\n    {\"name\":\"SubscriberDestroyedNotification\",\"header\":2253786793,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberCheckTimeout\",\"header\":1397988627,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberTimeoutExceeded\",\"header\":2857706980,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n]\n\nconst BrokerageAccount_getters: ABIGetter[] = [\n    {\"name\":\"storageReserve\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"brokerage\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"trader\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n]\n\nconst BrokerageAccount_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"BRADeploy\"}},\n]\n\nexport class BrokerageAccount implements Contract {\n    \n    static async init(brokerage: Address, trader: Address) {\n        return await BrokerageAccount_init(brokerage, trader);\n    }\n    \n    static async fromInit(brokerage: Address, trader: Address) {\n        const init = await BrokerageAccount_init(brokerage, trader);\n        const address = contractAddress(0, init);\n        return new BrokerageAccount(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new BrokerageAccount(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  BrokerageAccount_types,\n        getters: BrokerageAccount_getters,\n        receivers: BrokerageAccount_receivers,\n        errors: BrokerageAccount_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: BRADeploy) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'BRADeploy') {\n            body = beginCell().store(storeBRADeploy(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getStorageReserve(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('storageReserve', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getBrokerage(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('brokerage', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getTrader(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('trader', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberDestroyedNotification = {\n    $$type: 'SubscriberDestroyedNotification';\n    queryId: bigint;\n}\n\nexport function storeSubscriberDestroyedNotification(src: SubscriberDestroyedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2253786793, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberDestroyedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2253786793) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberDestroyedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberDestroyedNotification(source: SubscriberDestroyedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberDestroyedNotification(): DictionaryValue<SubscriberDestroyedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberDestroyedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberDestroyedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberCheckTimeout = {\n    $$type: 'SubscriberCheckTimeout';\n    queryId: bigint;\n}\n\nexport function storeSubscriberCheckTimeout(src: SubscriberCheckTimeout) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1397988627, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberCheckTimeout(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1397988627) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberCheckTimeout(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberCheckTimeout(source: SubscriberCheckTimeout) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberCheckTimeout(): DictionaryValue<SubscriberCheckTimeout> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberCheckTimeout(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberCheckTimeout(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberTimeoutExceeded = {\n    $$type: 'SubscriberTimeoutExceeded';\n    queryId: bigint;\n}\n\nexport function storeSubscriberTimeoutExceeded(src: SubscriberTimeoutExceeded) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2857706980, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberTimeoutExceeded(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2857706980) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberTimeoutExceeded(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberTimeoutExceeded(source: SubscriberTimeoutExceeded) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberTimeoutExceeded(): DictionaryValue<SubscriberTimeoutExceeded> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberTimeoutExceeded(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberTimeoutExceeded(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploy = {\n    $$type: 'CashOrNothingOptionDeploy';\n    queryId: bigint;\n    stream: Address;\n    agreement: CashOrNothingOptionAgreement;\n}\n\nexport function storeCashOrNothingOptionDeploy(src: CashOrNothingOptionDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3343868548, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        let b_1 = new Builder();\n        b_1.store(storeCashOrNothingOptionAgreement(src.agreement));\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCashOrNothingOptionDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3343868548) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _agreement = loadCashOrNothingOptionAgreement(sc_1);\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction loadTupleCashOrNothingOptionDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    const _agreement = loadTupleCashOrNothingOptionAgreement(source.readTuple());\n    return { $$type: 'CashOrNothingOptionDeploy' as const, queryId: _queryId, stream: _stream, agreement: _agreement };\n}\n\nfunction storeTupleCashOrNothingOptionDeploy(source: CashOrNothingOptionDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeTuple(storeTupleCashOrNothingOptionAgreement(source.agreement));\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploy(): DictionaryValue<CashOrNothingOptionDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionDeploySuccess = {\n    $$type: 'CashOrNothingOptionDeploySuccess';\n    queryId: bigint;\n    optionId: bigint;\n    holder: Address;\n}\n\nexport function storeCashOrNothingOptionDeploySuccess(src: CashOrNothingOptionDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2669413677, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.optionId, 257);\n        b_0.storeAddress(src.holder);\n    };\n}\n\nexport function loadCashOrNothingOptionDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2669413677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _optionId = sc_0.loadIntBig(257);\n    let _holder = sc_0.loadAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction loadTupleCashOrNothingOptionDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _optionId = source.readBigNumber();\n    let _holder = source.readAddress();\n    return { $$type: 'CashOrNothingOptionDeploySuccess' as const, queryId: _queryId, optionId: _optionId, holder: _holder };\n}\n\nfunction storeTupleCashOrNothingOptionDeploySuccess(source: CashOrNothingOptionDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.optionId);\n    builder.writeAddress(source.holder);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionDeploySuccess(): DictionaryValue<CashOrNothingOptionDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledInMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledInMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledInMoneyNotification(src: CashOrNothingOptionSettledInMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4281832964, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledInMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4281832964) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledInMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledInMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledInMoneyNotification(source: CashOrNothingOptionSettledInMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledInMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledInMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledInMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledInMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledOutMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledOutMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledOutMoneyNotification(src: CashOrNothingOptionSettledOutMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(402709524, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledOutMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 402709524) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledOutMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledOutMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledOutMoneyNotification(source: CashOrNothingOptionSettledOutMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledOutMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledOutMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledOutMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledOutMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionSettledAtMoneyNotification = {\n    $$type: 'CashOrNothingOptionSettledAtMoneyNotification';\n    queryId: bigint;\n}\n\nexport function storeCashOrNothingOptionSettledAtMoneyNotification(src: CashOrNothingOptionSettledAtMoneyNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1344539513, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadCashOrNothingOptionSettledAtMoneyNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1344539513) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleCashOrNothingOptionSettledAtMoneyNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionSettledAtMoneyNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleCashOrNothingOptionSettledAtMoneyNotification(source: CashOrNothingOptionSettledAtMoneyNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionSettledAtMoneyNotification(): DictionaryValue<CashOrNothingOptionSettledAtMoneyNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionSettledAtMoneyNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionSettledAtMoneyNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type CashOrNothingOptionAgreement = {\n    $$type: 'CashOrNothingOptionAgreement';\n    holder: Address;\n    writer: Address;\n    initiation: bigint;\n    expiration: bigint;\n    optionType: boolean;\n    investment: bigint;\n    payout: bigint;\n}\n\nexport function storeCashOrNothingOptionAgreement(src: CashOrNothingOptionAgreement) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.holder);\n        b_0.storeAddress(src.writer);\n        b_0.storeUint(src.initiation, 32);\n        b_0.storeUint(src.expiration, 32);\n        b_0.storeBit(src.optionType);\n        b_0.storeCoins(src.investment);\n        b_0.storeCoins(src.payout);\n    };\n}\n\nexport function loadCashOrNothingOptionAgreement(slice: Slice) {\n    let sc_0 = slice;\n    let _holder = sc_0.loadAddress();\n    let _writer = sc_0.loadAddress();\n    let _initiation = sc_0.loadUintBig(32);\n    let _expiration = sc_0.loadUintBig(32);\n    let _optionType = sc_0.loadBit();\n    let _investment = sc_0.loadCoins();\n    let _payout = sc_0.loadCoins();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction loadTupleCashOrNothingOptionAgreement(source: TupleReader) {\n    let _holder = source.readAddress();\n    let _writer = source.readAddress();\n    let _initiation = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    let _optionType = source.readBoolean();\n    let _investment = source.readBigNumber();\n    let _payout = source.readBigNumber();\n    return { $$type: 'CashOrNothingOptionAgreement' as const, holder: _holder, writer: _writer, initiation: _initiation, expiration: _expiration, optionType: _optionType, investment: _investment, payout: _payout };\n}\n\nfunction storeTupleCashOrNothingOptionAgreement(source: CashOrNothingOptionAgreement) {\n    let builder = new TupleBuilder();\n    builder.writeAddress(source.holder);\n    builder.writeAddress(source.writer);\n    builder.writeNumber(source.initiation);\n    builder.writeNumber(source.expiration);\n    builder.writeBoolean(source.optionType);\n    builder.writeNumber(source.investment);\n    builder.writeNumber(source.payout);\n    return builder.build();\n}\n\nfunction dictValueParserCashOrNothingOptionAgreement(): DictionaryValue<CashOrNothingOptionAgreement> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCashOrNothingOptionAgreement(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCashOrNothingOptionAgreement(src.loadRef().beginParse());\n        }\n    }\n}\n\n type CashOrNothingOption_init_args = {\n    $$type: 'CashOrNothingOption_init_args';\n    deployer: Address;\n    optionId: bigint;\n}\n\nfunction initCashOrNothingOption_init_args(src: CashOrNothingOption_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.deployer);\n        b_0.storeInt(src.optionId, 257);\n    };\n}\n\nasync function CashOrNothingOption_init(deployer: Address, optionId: bigint) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('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');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initCashOrNothingOption_init_args({ $$type: 'CashOrNothingOption_init_args', deployer, optionId })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst CashOrNothingOption_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst CashOrNothingOption_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberDestroyedNotification\",\"header\":2253786793,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberCheckTimeout\",\"header\":1397988627,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberTimeoutExceeded\",\"header\":2857706980,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionDeploy\",\"header\":3343868548,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"agreement\",\"type\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionAgreement\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionDeploySuccess\",\"header\":2669413677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"optionId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"CashOrNothingOptionSettledInMoneyNotification\",\"header\":4281832964,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledOutMoneyNotification\",\"header\":402709524,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionSettledAtMoneyNotification\",\"header\":1344539513,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"CashOrNothingOptionAgreement\",\"header\":null,\"fields\":[{\"name\":\"holder\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"writer\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"initiation\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"optionType\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"investment\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"payout\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}}]},\n]\n\nconst CashOrNothingOption_getters: ABIGetter[] = [\n    {\"name\":\"optionId\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"agreement\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"CashOrNothingOptionAgreement\",\"optional\":true}},\n    {\"name\":\"strikePrice\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}},\n    {\"name\":\"latestCandlestick\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":true}},\n    {\"name\":\"balance\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"deployerAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"streamAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":true}},\n    {\"name\":\"notificationsCount\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}},\n    {\"name\":\"expiration\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}},\n    {\"name\":\"sessionAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":true}},\n]\n\nconst CashOrNothingOption_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CashOrNothingOptionDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTDeploySessionSuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESSubscribeSuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESCandlestickPublishedNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESUnsubscribedNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESDestroySuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SubscriberCheckTimeout\"}},\n]\n\nexport class CashOrNothingOption implements Contract {\n    \n    static async init(deployer: Address, optionId: bigint) {\n        return await CashOrNothingOption_init(deployer, optionId);\n    }\n    \n    static async fromInit(deployer: Address, optionId: bigint) {\n        const init = await CashOrNothingOption_init(deployer, optionId);\n        const address = contractAddress(0, init);\n        return new CashOrNothingOption(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new CashOrNothingOption(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  CashOrNothingOption_types,\n        getters: CashOrNothingOption_getters,\n        receivers: CashOrNothingOption_receivers,\n        errors: CashOrNothingOption_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: CashOrNothingOptionDeploy | DSTDeploySessionSuccess | SESSubscribeSuccess | SESCandlestickPublishedNotification | SESUnsubscribedNotification | SESDestroySuccess | SubscriberCheckTimeout) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'CashOrNothingOptionDeploy') {\n            body = beginCell().store(storeCashOrNothingOptionDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTDeploySessionSuccess') {\n            body = beginCell().store(storeDSTDeploySessionSuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESSubscribeSuccess') {\n            body = beginCell().store(storeSESSubscribeSuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESCandlestickPublishedNotification') {\n            body = beginCell().store(storeSESCandlestickPublishedNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESUnsubscribedNotification') {\n            body = beginCell().store(storeSESUnsubscribedNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESDestroySuccess') {\n            body = beginCell().store(storeSESDestroySuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SubscriberCheckTimeout') {\n            body = beginCell().store(storeSubscriberCheckTimeout(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getOptionId(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('optionId', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getAgreement(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('agreement', builder.build())).stack;\n        const result_p = source.readTupleOpt();\n        const result = result_p ? loadTupleCashOrNothingOptionAgreement(result_p) : null;\n        return result;\n    }\n    \n    async getStrikePrice(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('strikePrice', builder.build())).stack;\n        let result = source.readBigNumberOpt();\n        return result;\n    }\n    \n    async getLatestCandlestick(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('latestCandlestick', builder.build())).stack;\n        const result_p = source.readTupleOpt();\n        const result = result_p ? loadTupleCandlestick(result_p) : null;\n        return result;\n    }\n    \n    async getBalance(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('balance', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getDeployerAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('deployerAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getStreamAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('streamAddress', builder.build())).stack;\n        let result = source.readAddressOpt();\n        return result;\n    }\n    \n    async getNotificationsCount(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('notificationsCount', builder.build())).stack;\n        let result = source.readBigNumberOpt();\n        return result;\n    }\n    \n    async getExpiration(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('expiration', builder.build())).stack;\n        let result = source.readBigNumberOpt();\n        return result;\n    }\n    \n    async getSessionAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('sessionAddress', builder.build())).stack;\n        let result = source.readAddressOpt();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriptionInfo = {\n    $$type: 'SubscriptionInfo';\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSubscriptionInfo(src: SubscriptionInfo) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSubscriptionInfo(slice: Slice) {\n    let sc_0 = slice;\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SubscriptionInfo' as const, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSubscriptionInfo(source: TupleReader) {\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SubscriptionInfo' as const, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSubscriptionInfo(source: SubscriptionInfo) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriptionInfo(): DictionaryValue<SubscriptionInfo> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriptionInfo(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriptionInfo(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBInfo = {\n    $$type: 'SBInfo';\n    subscriptionsCount: bigint;\n}\n\nexport function storeSBInfo(src: SBInfo) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.subscriptionsCount, 257);\n    };\n}\n\nexport function loadSBInfo(slice: Slice) {\n    let sc_0 = slice;\n    let _subscriptionsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBInfo' as const, subscriptionsCount: _subscriptionsCount };\n}\n\nfunction loadTupleSBInfo(source: TupleReader) {\n    let _subscriptionsCount = source.readBigNumber();\n    return { $$type: 'SBInfo' as const, subscriptionsCount: _subscriptionsCount };\n}\n\nfunction storeTupleSBInfo(source: SBInfo) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.subscriptionsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBInfo(): DictionaryValue<SBInfo> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBInfo(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBInfo(src.loadRef().beginParse());\n        }\n    }\n}\n\n type DataStream_init_args = {\n    $$type: 'DataStream_init_args';\n    publisher: Address;\n    topic: string;\n}\n\nfunction initDataStream_init_args(src: DataStream_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.publisher);\n        b_0.storeStringRefTail(src.topic);\n    };\n}\n\nasync function DataStream_init(publisher: Address, topic: string) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initDataStream_init_args({ $$type: 'DataStream_init_args', publisher, topic })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst DataStream_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst DataStream_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriptionInfo\",\"header\":null,\"fields\":[{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBInfo\",\"header\":null,\"fields\":[{\"name\":\"subscriptionsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n]\n\nconst DataStream_getters: ABIGetter[] = [\n    {\"name\":\"balance\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"storageReserve\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"deployBatchDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"deploySessionDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"publishCandlestickDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"notificationDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"notificationPremium\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"publisherAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"topic\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},\n    {\"name\":\"batches\",\"arguments\":[],\"returnType\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"SBInfo\",\"valueFormat\":\"ref\"}},\n    {\"name\":\"nextBatchId\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"batchAddress\",\"arguments\":[{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"sessionAddress\",\"arguments\":[{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n]\n\nconst DataStream_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTDeployBatch\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBDeploySuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTDeploySession\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESDeploySuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTSubscribe\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTTopUpSubscription\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBSubscribeSuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTPublishCandlestick\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBUnsubscribedNotification\"}},\n]\n\nexport class DataStream implements Contract {\n    \n    static async init(publisher: Address, topic: string) {\n        return await DataStream_init(publisher, topic);\n    }\n    \n    static async fromInit(publisher: Address, topic: string) {\n        const init = await DataStream_init(publisher, topic);\n        const address = contractAddress(0, init);\n        return new DataStream(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new DataStream(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  DataStream_types,\n        getters: DataStream_getters,\n        receivers: DataStream_receivers,\n        errors: DataStream_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: DSTDeploy | DSTDeployBatch | SBDeploySuccess | DSTDeploySession | SESDeploySuccess | DSTSubscribe | DSTTopUpSubscription | SBSubscribeSuccess | DSTPublishCandlestick | SBUnsubscribedNotification) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTDeploy') {\n            body = beginCell().store(storeDSTDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTDeployBatch') {\n            body = beginCell().store(storeDSTDeployBatch(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBDeploySuccess') {\n            body = beginCell().store(storeSBDeploySuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTDeploySession') {\n            body = beginCell().store(storeDSTDeploySession(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESDeploySuccess') {\n            body = beginCell().store(storeSESDeploySuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTSubscribe') {\n            body = beginCell().store(storeDSTSubscribe(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTTopUpSubscription') {\n            body = beginCell().store(storeDSTTopUpSubscription(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBSubscribeSuccess') {\n            body = beginCell().store(storeSBSubscribeSuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTPublishCandlestick') {\n            body = beginCell().store(storeDSTPublishCandlestick(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBUnsubscribedNotification') {\n            body = beginCell().store(storeSBUnsubscribedNotification(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getBalance(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('balance', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getStorageReserve(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('storageReserve', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getDeployBatchDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('deployBatchDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getDeploySessionDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('deploySessionDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getPublishCandlestickDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('publishCandlestickDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getNotificationDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('notificationDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getNotificationPremium(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('notificationPremium', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getPublisherAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('publisherAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getTopic(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('topic', builder.build())).stack;\n        let result = source.readString();\n        return result;\n    }\n    \n    async getBatches(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('batches', builder.build())).stack;\n        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), dictValueParserSBInfo(), source.readCellOpt());\n        return result;\n    }\n    \n    async getNextBatchId(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('nextBatchId', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getBatchAddress(provider: ContractProvider, batchId: bigint) {\n        let builder = new TupleBuilder();\n        builder.writeNumber(batchId);\n        let source = (await provider.get('batchAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getSessionAddress(provider: ContractProvider, subscriber: Address) {\n        let builder = new TupleBuilder();\n        builder.writeAddress(subscriber);\n        let source = (await provider.get('sessionAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriptionInfo = {\n    $$type: 'SubscriptionInfo';\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSubscriptionInfo(src: SubscriptionInfo) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSubscriptionInfo(slice: Slice) {\n    let sc_0 = slice;\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SubscriptionInfo' as const, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSubscriptionInfo(source: TupleReader) {\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SubscriptionInfo' as const, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSubscriptionInfo(source: SubscriptionInfo) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriptionInfo(): DictionaryValue<SubscriptionInfo> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriptionInfo(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriptionInfo(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBInfo = {\n    $$type: 'SBInfo';\n    subscriptionsCount: bigint;\n}\n\nexport function storeSBInfo(src: SBInfo) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.subscriptionsCount, 257);\n    };\n}\n\nexport function loadSBInfo(slice: Slice) {\n    let sc_0 = slice;\n    let _subscriptionsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBInfo' as const, subscriptionsCount: _subscriptionsCount };\n}\n\nfunction loadTupleSBInfo(source: TupleReader) {\n    let _subscriptionsCount = source.readBigNumber();\n    return { $$type: 'SBInfo' as const, subscriptionsCount: _subscriptionsCount };\n}\n\nfunction storeTupleSBInfo(source: SBInfo) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.subscriptionsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBInfo(): DictionaryValue<SBInfo> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBInfo(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBInfo(src.loadRef().beginParse());\n        }\n    }\n}\n\n type Session_init_args = {\n    $$type: 'Session_init_args';\n    stream: Address;\n    subscriber: Address;\n}\n\nfunction initSession_init_args(src: Session_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.stream);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nasync function Session_init(stream: Address, subscriber: Address) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('te6cckECMwEAB7AAAQHAAQEFoS7vAgEU/wD0pBP0vPLICwMCAWIEFQN60AHQ0wMBcbCjAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IhUUFMDbwT4YQL4Yts8VRLbPPLggi4FFAT2AZIwf+BwIddJwh+VMCDXCx/eIIIQUdGMTLqOyTDTHwGCEFHRjEy68uCB0z8BMSLIWYIQEBb9ylADyx/LPwEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxbJ+EIBcG3bPH/gIIIQW2xLV7rjAiCCEOC3R1i64wIgEAYKCwEwMNMfAYIQW2xLV7ry4IHTP4EBAdcAWWwSBwLi+EFvJDAyUlDHBfLhkCNujt0hwgHy4ZSCCvrwgIIJMS0AI6igggiYloAjpaigvvLhkVIwyFUgghC/tWZSUATLHxLLPwEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxaBAQHPAMlSMH9t2zzjDn8QCAH+IcIA8uGUggr68ICCCTEtACOooIIImJaAI6igvvLhkSIgbvLQgCQCyFUwghAdj+0eUAXLHxPLPwEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxYBINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WgQEBzwDJUjB/bQkBBNs8EAHKMNMfAYIQ4LdHWLry4IHTP/pAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgBgQEB1wBVIGwTM/hBbyQQI18DUlDHBfLhkALIWYIQU3Lj01ADyx/LP4EBAc8AyVIgcG3bPH8QBNqCEPjgBg26j9sw0x8BghD44AYNuvLggdM/2zwG1AHQgQEB1wAwGBdsGPhBbyQQI18DUpAhbpJbcJLHBeLy4ZDIVXCCEL7KRFRQCcsfF8s/Bts8AciBAQHPAMkBzMlSIHBt2zx/4CCCEEy3oMS6DA0QDgBQgQEB1wCBAQHXAIEBAdcA1AHQgQEB1wCBAQHXAIEBAdcAMBA2EDUQNABQUFaBAQHPABOBAQHPAIEBAc8AAciBAQHPABKBAQHPABKBAQHPAMkBzAO6jsUw0x8BghBMt6DEuvLggdM/gQEB1wBZbBIy+EFvJBAjXwNSQMcF8uGQbQLIWYIQ8++celADyx/LP4EBAc8AyVIgcG3bPH/gIIIQnw/9hbrjAoIQhLn4ibrjAjBwEA8RAZAw0x8BghCfD/2FuvLggdM/ATH4QW8kMDJSQMcF8uGQIm6z8uGVggr68IC+8uGRISBu8tCAAcgBghBBUVlUWMsfyz/Jf23bPH8QAo5tbSJus5lbIG7y0IBvIgGRMuL4QW8kE18D+CdvEAGhggiYloC5jpSCCJiWgHD7AhAkcAMEgQCCUCPbPOAQJHADBIBCUCPbPBISAYTTHwGCEIS5+Im68uCB0z8BMfhBbyQQI18DUjDHBfLhkCFu8uGWcIEAoALIAYIJTmuTWMsfyz/JJFAzf1UwbW3bPH8SAcrIcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAP6AnABymgjbrORf5MkbrPilzMzAXABygDjDSFus5x/AcoAASBu8tCAAcyVMXABygDiyQH7ABMAmH8BygDIcAHKAHABygAkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDiJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4nABygACfwHKAALJWMwA7Mj4QwHMfwHKAFUgWiDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFlgg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxYBIG6VMHABywGOHiDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFuLJ7VQCASAWIAIBIBceAgEgGBwCASAZGgIRsFW2zzbPGwxgLjECEbNx9s82zxsMYC4bAAIiAhG0SPtnm2eNhjAuHQAKggiYloACEbhmbbPNs8bDGC4fAAIhAgEgIScCASAiJgIBICMkAhGxcrbPNs8bDGAuMQIRsbA2zzbPGwxgLiUACPgnbxAAlbd6ME4LnYerpZXPY9CdhzrJUKNs0E4TusalpWyPlmRadeW/vixHME4ECrgDcAzscpnLB1XI5LZYcE4TsunLVmnZbmdB0s2yjN0UkAIBSCgpABGwr7tRNDSAAGACASAqLAIRr+btnm2eNhjALisAAiACAWItMgIPouds82zxsMYuMQK47UTQ1AH4Y9IAAeMC+CjXCwqDCbry4In6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgSAtEB2zwvMADi+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIASDXCwHDAI4f+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiJRy1yFt4kMwbBMAAm0ACoIK+vCAAHOi7jQ1aXBmczovL1FtWmp1emZXa0pXTEpFc0ZnaG5nY3FrTHRQMTQydFhGY0N2MUV6QTgxNHpvRUeCEMJSqg==');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initSession_init_args({ $$type: 'Session_init_args', stream, subscriber })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst Session_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst Session_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriptionInfo\",\"header\":null,\"fields\":[{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBInfo\",\"header\":null,\"fields\":[{\"name\":\"subscriptionsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n]\n\nconst Session_getters: ABIGetter[] = [\n    {\"name\":\"balance\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"storageReserve\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"subscribeDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"unsubscribeDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"destroyDeposit\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"streamAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"subscriberAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"batchAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":true}},\n]\n\nconst Session_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESSubscribe\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTSubscribeSuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBCandlestickPublishedNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTUnsubscribedNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESUnsubscribe\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESDestroy\"}},\n]\n\nexport class Session implements Contract {\n    \n    static async init(stream: Address, subscriber: Address) {\n        return await Session_init(stream, subscriber);\n    }\n    \n    static async fromInit(stream: Address, subscriber: Address) {\n        const init = await Session_init(stream, subscriber);\n        const address = contractAddress(0, init);\n        return new Session(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new Session(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  Session_types,\n        getters: Session_getters,\n        receivers: Session_receivers,\n        errors: Session_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: SESDeploy | SESSubscribe | DSTSubscribeSuccess | SBCandlestickPublishedNotification | DSTUnsubscribedNotification | SESUnsubscribe | SESDestroy) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESDeploy') {\n            body = beginCell().store(storeSESDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESSubscribe') {\n            body = beginCell().store(storeSESSubscribe(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTSubscribeSuccess') {\n            body = beginCell().store(storeDSTSubscribeSuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBCandlestickPublishedNotification') {\n            body = beginCell().store(storeSBCandlestickPublishedNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTUnsubscribedNotification') {\n            body = beginCell().store(storeDSTUnsubscribedNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESUnsubscribe') {\n            body = beginCell().store(storeSESUnsubscribe(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESDestroy') {\n            body = beginCell().store(storeSESDestroy(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getBalance(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('balance', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getStorageReserve(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('storageReserve', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getSubscribeDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('subscribeDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getUnsubscribeDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('unsubscribeDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getDestroyDeposit(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('destroyDeposit', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getStreamAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('streamAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getSubscriberAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('subscriberAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getBatchAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('batchAddress', builder.build())).stack;\n        let result = source.readAddressOpt();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberDestroyedNotification = {\n    $$type: 'SubscriberDestroyedNotification';\n    queryId: bigint;\n}\n\nexport function storeSubscriberDestroyedNotification(src: SubscriberDestroyedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2253786793, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberDestroyedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2253786793) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberDestroyedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberDestroyedNotification' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberDestroyedNotification(source: SubscriberDestroyedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberDestroyedNotification(): DictionaryValue<SubscriberDestroyedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberDestroyedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberDestroyedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberCheckTimeout = {\n    $$type: 'SubscriberCheckTimeout';\n    queryId: bigint;\n}\n\nexport function storeSubscriberCheckTimeout(src: SubscriberCheckTimeout) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1397988627, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberCheckTimeout(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1397988627) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberCheckTimeout(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberCheckTimeout' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberCheckTimeout(source: SubscriberCheckTimeout) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberCheckTimeout(): DictionaryValue<SubscriberCheckTimeout> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberCheckTimeout(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberCheckTimeout(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriberTimeoutExceeded = {\n    $$type: 'SubscriberTimeoutExceeded';\n    queryId: bigint;\n}\n\nexport function storeSubscriberTimeoutExceeded(src: SubscriberTimeoutExceeded) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2857706980, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSubscriberTimeoutExceeded(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2857706980) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction loadTupleSubscriberTimeoutExceeded(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SubscriberTimeoutExceeded' as const, queryId: _queryId };\n}\n\nfunction storeTupleSubscriberTimeoutExceeded(source: SubscriberTimeoutExceeded) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriberTimeoutExceeded(): DictionaryValue<SubscriberTimeoutExceeded> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriberTimeoutExceeded(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriberTimeoutExceeded(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SimpleSubscriberDeploy = {\n    $$type: 'SimpleSubscriberDeploy';\n    queryId: bigint;\n    stream: Address;\n    notificationsCount: bigint;\n    expiration: bigint;\n}\n\nexport function storeSimpleSubscriberDeploy(src: SimpleSubscriberDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3073362313, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n        b_0.storeInt(src.notificationsCount, 257);\n        b_0.storeInt(src.expiration, 257);\n    };\n}\n\nexport function loadSimpleSubscriberDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3073362313) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    let _expiration = sc_0.loadIntBig(257);\n    return { $$type: 'SimpleSubscriberDeploy' as const, queryId: _queryId, stream: _stream, notificationsCount: _notificationsCount, expiration: _expiration };\n}\n\nfunction loadTupleSimpleSubscriberDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    let _expiration = source.readBigNumber();\n    return { $$type: 'SimpleSubscriberDeploy' as const, queryId: _queryId, stream: _stream, notificationsCount: _notificationsCount, expiration: _expiration };\n}\n\nfunction storeTupleSimpleSubscriberDeploy(source: SimpleSubscriberDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    builder.writeNumber(source.notificationsCount);\n    builder.writeNumber(source.expiration);\n    return builder.build();\n}\n\nfunction dictValueParserSimpleSubscriberDeploy(): DictionaryValue<SimpleSubscriberDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSimpleSubscriberDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSimpleSubscriberDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SimpleSubscriberDeploySuccess = {\n    $$type: 'SimpleSubscriberDeploySuccess';\n    queryId: bigint;\n    subscriberId: bigint;\n}\n\nexport function storeSimpleSubscriberDeploySuccess(src: SimpleSubscriberDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4287938591, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.subscriberId, 257);\n    };\n}\n\nexport function loadSimpleSubscriberDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4287938591) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriberId = sc_0.loadIntBig(257);\n    return { $$type: 'SimpleSubscriberDeploySuccess' as const, queryId: _queryId, subscriberId: _subscriberId };\n}\n\nfunction loadTupleSimpleSubscriberDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriberId = source.readBigNumber();\n    return { $$type: 'SimpleSubscriberDeploySuccess' as const, queryId: _queryId, subscriberId: _subscriberId };\n}\n\nfunction storeTupleSimpleSubscriberDeploySuccess(source: SimpleSubscriberDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.subscriberId);\n    return builder.build();\n}\n\nfunction dictValueParserSimpleSubscriberDeploySuccess(): DictionaryValue<SimpleSubscriberDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSimpleSubscriberDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSimpleSubscriberDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\n type SimpleSubscriber_init_args = {\n    $$type: 'SimpleSubscriber_init_args';\n    deployer: Address;\n    subscriberId: bigint;\n}\n\nfunction initSimpleSubscriber_init_args(src: SimpleSubscriber_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.deployer);\n        b_0.storeInt(src.subscriberId, 257);\n    };\n}\n\nasync function SimpleSubscriber_init(deployer: Address, subscriberId: bigint) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('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');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initSimpleSubscriber_init_args({ $$type: 'SimpleSubscriber_init_args', deployer, subscriberId })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst SimpleSubscriber_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst SimpleSubscriber_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberDestroyedNotification\",\"header\":2253786793,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberCheckTimeout\",\"header\":1397988627,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriberTimeoutExceeded\",\"header\":2857706980,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SimpleSubscriberDeploy\",\"header\":3073362313,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"expiration\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SimpleSubscriberDeploySuccess\",\"header\":4287938591,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriberId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n]\n\nconst SimpleSubscriber_getters: ABIGetter[] = [\n    {\"name\":\"latestCandlestick\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":true}},\n    {\"name\":\"balance\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"deployerAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"streamAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":true}},\n    {\"name\":\"notificationsCount\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}},\n    {\"name\":\"expiration\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}},\n    {\"name\":\"sessionAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":true}},\n]\n\nconst SimpleSubscriber_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SimpleSubscriberDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DSTDeploySessionSuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESSubscribeSuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESCandlestickPublishedNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESUnsubscribedNotification\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SESDestroySuccess\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SubscriberCheckTimeout\"}},\n]\n\nexport class SimpleSubscriber implements Contract {\n    \n    static async init(deployer: Address, subscriberId: bigint) {\n        return await SimpleSubscriber_init(deployer, subscriberId);\n    }\n    \n    static async fromInit(deployer: Address, subscriberId: bigint) {\n        const init = await SimpleSubscriber_init(deployer, subscriberId);\n        const address = contractAddress(0, init);\n        return new SimpleSubscriber(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new SimpleSubscriber(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  SimpleSubscriber_types,\n        getters: SimpleSubscriber_getters,\n        receivers: SimpleSubscriber_receivers,\n        errors: SimpleSubscriber_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: SimpleSubscriberDeploy | DSTDeploySessionSuccess | SESSubscribeSuccess | SESCandlestickPublishedNotification | SESUnsubscribedNotification | SESDestroySuccess | SubscriberCheckTimeout) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SimpleSubscriberDeploy') {\n            body = beginCell().store(storeSimpleSubscriberDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DSTDeploySessionSuccess') {\n            body = beginCell().store(storeDSTDeploySessionSuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESSubscribeSuccess') {\n            body = beginCell().store(storeSESSubscribeSuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESCandlestickPublishedNotification') {\n            body = beginCell().store(storeSESCandlestickPublishedNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESUnsubscribedNotification') {\n            body = beginCell().store(storeSESUnsubscribedNotification(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SESDestroySuccess') {\n            body = beginCell().store(storeSESDestroySuccess(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SubscriberCheckTimeout') {\n            body = beginCell().store(storeSubscriberCheckTimeout(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getLatestCandlestick(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('latestCandlestick', builder.build())).stack;\n        const result_p = source.readTupleOpt();\n        const result = result_p ? loadTupleCandlestick(result_p) : null;\n        return result;\n    }\n    \n    async getBalance(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('balance', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getDeployerAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('deployerAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getStreamAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('streamAddress', builder.build())).stack;\n        let result = source.readAddressOpt();\n        return result;\n    }\n    \n    async getNotificationsCount(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('notificationsCount', builder.build())).stack;\n        let result = source.readBigNumberOpt();\n        return result;\n    }\n    \n    async getExpiration(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('expiration', builder.build())).stack;\n        let result = source.readBigNumberOpt();\n        return result;\n    }\n    \n    async getSessionAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('sessionAddress', builder.build())).stack;\n        let result = source.readAddressOpt();\n        return result;\n    }\n    \n}","import { \n    Cell,\n    Slice, \n    Address, \n    Builder, \n    beginCell, \n    ComputeError, \n    TupleItem, \n    TupleReader, \n    Dictionary, \n    contractAddress, \n    ContractProvider, \n    Sender, \n    Contract, \n    ContractABI, \n    ABIType,\n    ABIGetter,\n    ABIReceiver,\n    TupleBuilder,\n    DictionaryValue\n} from '@ton/core';\n\nexport type StateInit = {\n    $$type: 'StateInit';\n    code: Cell;\n    data: Cell;\n}\n\nexport function storeStateInit(src: StateInit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeRef(src.code);\n        b_0.storeRef(src.data);\n    };\n}\n\nexport function loadStateInit(slice: Slice) {\n    let sc_0 = slice;\n    let _code = sc_0.loadRef();\n    let _data = sc_0.loadRef();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction loadTupleStateInit(source: TupleReader) {\n    let _code = source.readCell();\n    let _data = source.readCell();\n    return { $$type: 'StateInit' as const, code: _code, data: _data };\n}\n\nfunction storeTupleStateInit(source: StateInit) {\n    let builder = new TupleBuilder();\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserStateInit(): DictionaryValue<StateInit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeStateInit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadStateInit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Context = {\n    $$type: 'Context';\n    bounced: boolean;\n    sender: Address;\n    value: bigint;\n    raw: Cell;\n}\n\nexport function storeContext(src: Context) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounced);\n        b_0.storeAddress(src.sender);\n        b_0.storeInt(src.value, 257);\n        b_0.storeRef(src.raw);\n    };\n}\n\nexport function loadContext(slice: Slice) {\n    let sc_0 = slice;\n    let _bounced = sc_0.loadBit();\n    let _sender = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _raw = sc_0.loadRef();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction loadTupleContext(source: TupleReader) {\n    let _bounced = source.readBoolean();\n    let _sender = source.readAddress();\n    let _value = source.readBigNumber();\n    let _raw = source.readCell();\n    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };\n}\n\nfunction storeTupleContext(source: Context) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounced);\n    builder.writeAddress(source.sender);\n    builder.writeNumber(source.value);\n    builder.writeSlice(source.raw);\n    return builder.build();\n}\n\nfunction dictValueParserContext(): DictionaryValue<Context> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeContext(src)).endCell());\n        },\n        parse: (src) => {\n            return loadContext(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SendParameters = {\n    $$type: 'SendParameters';\n    bounce: boolean;\n    to: Address;\n    value: bigint;\n    mode: bigint;\n    body: Cell | null;\n    code: Cell | null;\n    data: Cell | null;\n}\n\nexport function storeSendParameters(src: SendParameters) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeBit(src.bounce);\n        b_0.storeAddress(src.to);\n        b_0.storeInt(src.value, 257);\n        b_0.storeInt(src.mode, 257);\n        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }\n        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }\n        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }\n    };\n}\n\nexport function loadSendParameters(slice: Slice) {\n    let sc_0 = slice;\n    let _bounce = sc_0.loadBit();\n    let _to = sc_0.loadAddress();\n    let _value = sc_0.loadIntBig(257);\n    let _mode = sc_0.loadIntBig(257);\n    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;\n    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction loadTupleSendParameters(source: TupleReader) {\n    let _bounce = source.readBoolean();\n    let _to = source.readAddress();\n    let _value = source.readBigNumber();\n    let _mode = source.readBigNumber();\n    let _body = source.readCellOpt();\n    let _code = source.readCellOpt();\n    let _data = source.readCellOpt();\n    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };\n}\n\nfunction storeTupleSendParameters(source: SendParameters) {\n    let builder = new TupleBuilder();\n    builder.writeBoolean(source.bounce);\n    builder.writeAddress(source.to);\n    builder.writeNumber(source.value);\n    builder.writeNumber(source.mode);\n    builder.writeCell(source.body);\n    builder.writeCell(source.code);\n    builder.writeCell(source.data);\n    return builder.build();\n}\n\nfunction dictValueParserSendParameters(): DictionaryValue<SendParameters> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSendParameters(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSendParameters(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploy = {\n    $$type: 'DSTDeploy';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploy(src: DSTDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(306133030, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 306133030) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploy(source: DSTDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploy(): DictionaryValue<DSTDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySuccess = {\n    $$type: 'DSTDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySuccess(src: DSTDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3957924127, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3957924127) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySuccess(source: DSTDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySuccess(): DictionaryValue<DSTDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatch = {\n    $$type: 'DSTDeployBatch';\n    queryId: bigint;\n}\n\nexport function storeDSTDeployBatch(src: DSTDeployBatch) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3012477066, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeployBatch(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3012477066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeployBatch(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeployBatch' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeployBatch(source: DSTDeployBatch) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatch(): DictionaryValue<DSTDeployBatch> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatch(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatch(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeployBatchSuccess = {\n    $$type: 'DSTDeployBatchSuccess';\n    queryId: bigint;\n    batch: Address;\n}\n\nexport function storeDSTDeployBatchSuccess(src: DSTDeployBatchSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1261138638, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n    };\n}\n\nexport function loadDSTDeployBatchSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1261138638) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction loadTupleDSTDeployBatchSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    return { $$type: 'DSTDeployBatchSuccess' as const, queryId: _queryId, batch: _batch };\n}\n\nfunction storeTupleDSTDeployBatchSuccess(source: DSTDeployBatchSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeployBatchSuccess(): DictionaryValue<DSTDeployBatchSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeployBatchSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeployBatchSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySession = {\n    $$type: 'DSTDeploySession';\n    queryId: bigint;\n}\n\nexport function storeDSTDeploySession(src: DSTDeploySession) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1658160529, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTDeploySession(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1658160529) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTDeploySession(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTDeploySession' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTDeploySession(source: DSTDeploySession) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySession(): DictionaryValue<DSTDeploySession> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySession(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySession(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTDeploySessionSuccess = {\n    $$type: 'DSTDeploySessionSuccess';\n    queryId: bigint;\n    session: Address;\n}\n\nexport function storeDSTDeploySessionSuccess(src: DSTDeploySessionSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3452518278, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n    };\n}\n\nexport function loadDSTDeploySessionSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3452518278) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction loadTupleDSTDeploySessionSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    return { $$type: 'DSTDeploySessionSuccess' as const, queryId: _queryId, session: _session };\n}\n\nfunction storeTupleDSTDeploySessionSuccess(source: DSTDeploySessionSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    return builder.build();\n}\n\nfunction dictValueParserDSTDeploySessionSuccess(): DictionaryValue<DSTDeploySessionSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTDeploySessionSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTDeploySessionSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribe = {\n    $$type: 'DSTSubscribe';\n    queryId: bigint;\n    subscriber: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTSubscribe(src: DSTSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3216336466, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3216336466) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribe' as const, queryId: _queryId, subscriber: _subscriber, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTSubscribe(source: DSTSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribe(): DictionaryValue<DSTSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTSubscribeSuccess = {\n    $$type: 'DSTSubscribeSuccess';\n    queryId: bigint;\n    batch: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTSubscribeSuccess(src: DSTSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3770107736, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3770107736) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batch = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batch = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTSubscribeSuccess' as const, queryId: _queryId, batch: _batch, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTSubscribeSuccess(source: DSTSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTSubscribeSuccess(): DictionaryValue<DSTSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type Candlestick = {\n    $$type: 'Candlestick';\n    start: bigint;\n    end: bigint;\n    open: bigint;\n    close: bigint;\n    high: bigint;\n    low: bigint;\n}\n\nexport function storeCandlestick(src: Candlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.start, 257);\n        b_0.storeInt(src.end, 257);\n        b_0.storeInt(src.open, 257);\n        let b_1 = new Builder();\n        b_1.storeInt(src.close, 257);\n        b_1.storeInt(src.high, 257);\n        b_1.storeInt(src.low, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    let _start = sc_0.loadIntBig(257);\n    let _end = sc_0.loadIntBig(257);\n    let _open = sc_0.loadIntBig(257);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _close = sc_1.loadIntBig(257);\n    let _high = sc_1.loadIntBig(257);\n    let _low = sc_1.loadIntBig(257);\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction loadTupleCandlestick(source: TupleReader) {\n    let _start = source.readBigNumber();\n    let _end = source.readBigNumber();\n    let _open = source.readBigNumber();\n    let _close = source.readBigNumber();\n    let _high = source.readBigNumber();\n    let _low = source.readBigNumber();\n    return { $$type: 'Candlestick' as const, start: _start, end: _end, open: _open, close: _close, high: _high, low: _low };\n}\n\nfunction storeTupleCandlestick(source: Candlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.start);\n    builder.writeNumber(source.end);\n    builder.writeNumber(source.open);\n    builder.writeNumber(source.close);\n    builder.writeNumber(source.high);\n    builder.writeNumber(source.low);\n    return builder.build();\n}\n\nfunction dictValueParserCandlestick(): DictionaryValue<Candlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestick = {\n    $$type: 'DSTPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n}\n\nexport function storeDSTPublishCandlestick(src: DSTPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(990592317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n    };\n}\n\nexport function loadDSTPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 990592317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction loadTupleDSTPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    return { $$type: 'DSTPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick };\n}\n\nfunction storeTupleDSTPublishCandlestick(source: DSTPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestick(): DictionaryValue<DSTPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTPublishCandlestickSuccess = {\n    $$type: 'DSTPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeDSTPublishCandlestickSuccess(src: DSTPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(215123525, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadDSTPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 215123525) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleDSTPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'DSTPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleDSTPublishCandlestickSuccess(source: DSTPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserDSTPublishCandlestickSuccess(): DictionaryValue<DSTPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTUnsubscribedNotification = {\n    $$type: 'DSTUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeDSTUnsubscribedNotification(src: DSTUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1287102660, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadDSTUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1287102660) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleDSTUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'DSTUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleDSTUnsubscribedNotification(source: DSTUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTUnsubscribedNotification(): DictionaryValue<DSTUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploy = {\n    $$type: 'SBDeploy';\n    queryId: bigint;\n}\n\nexport function storeSBDeploy(src: SBDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4267613765, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4267613765) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBDeploy(source: SBDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploy(): DictionaryValue<SBDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBDeploySuccess = {\n    $$type: 'SBDeploySuccess';\n    queryId: bigint;\n    batchId: bigint;\n}\n\nexport function storeSBDeploySuccess(src: SBDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1031311118, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nexport function loadSBDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1031311118) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _batchId = sc_0.loadIntBig(257);\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction loadTupleSBDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _batchId = source.readBigNumber();\n    return { $$type: 'SBDeploySuccess' as const, queryId: _queryId, batchId: _batchId };\n}\n\nfunction storeTupleSBDeploySuccess(source: SBDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.batchId);\n    return builder.build();\n}\n\nfunction dictValueParserSBDeploySuccess(): DictionaryValue<SBDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribe = {\n    $$type: 'SBSubscribe';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBSubscribe(src: SBSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2001551522, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2001551522) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribe' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBSubscribe(source: SBSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribe(): DictionaryValue<SBSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBSubscribeSuccess = {\n    $$type: 'SBSubscribeSuccess';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBSubscribeSuccess(src: SBSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4082513223, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4082513223) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBSubscribeSuccess' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBSubscribeSuccess(source: SBSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBSubscribeSuccess(): DictionaryValue<SBSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestick = {\n    $$type: 'SBPublishCandlestick';\n    queryId: bigint;\n    candlestick: Candlestick;\n    publisher: Address;\n}\n\nexport function storeSBPublishCandlestick(src: SBPublishCandlestick) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4051052066, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeAddress(src.publisher);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBPublishCandlestick(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4051052066) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _publisher = sc_1.loadAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction loadTupleSBPublishCandlestick(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _publisher = source.readAddress();\n    return { $$type: 'SBPublishCandlestick' as const, queryId: _queryId, candlestick: _candlestick, publisher: _publisher };\n}\n\nfunction storeTupleSBPublishCandlestick(source: SBPublishCandlestick) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeAddress(source.publisher);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestick(): DictionaryValue<SBPublishCandlestick> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestick(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestick(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBCandlestickPublishedNotification = {\n    $$type: 'SBCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBCandlestickPublishedNotification(src: SBCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4175431181, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSBCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4175431181) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBCandlestickPublishedNotification(source: SBCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBCandlestickPublishedNotification(): DictionaryValue<SBCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribedNotification = {\n    $$type: 'SBUnsubscribedNotification';\n    queryId: bigint;\n    session: Address;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSBUnsubscribedNotification(src: SBUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1003141156, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSBUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1003141156) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSBUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SBUnsubscribedNotification' as const, queryId: _queryId, session: _session, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSBUnsubscribedNotification(source: SBUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribedNotification(): DictionaryValue<SBUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBPublishCandlestickSuccess = {\n    $$type: 'SBPublishCandlestickSuccess';\n    queryId: bigint;\n}\n\nexport function storeSBPublishCandlestickSuccess(src: SBPublishCandlestickSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1027631690, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBPublishCandlestickSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1027631690) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBPublishCandlestickSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBPublishCandlestickSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBPublishCandlestickSuccess(source: SBPublishCandlestickSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBPublishCandlestickSuccess(): DictionaryValue<SBPublishCandlestickSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBPublishCandlestickSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBPublishCandlestickSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploy = {\n    $$type: 'SESDeploy';\n    queryId: bigint;\n}\n\nexport function storeSESDeploy(src: SESDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1372687436, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1372687436) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDeploy(source: SESDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploy(): DictionaryValue<SESDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDeploySuccess = {\n    $$type: 'SESDeploySuccess';\n    queryId: bigint;\n    subscriber: Address;\n}\n\nexport function storeSESDeploySuccess(src: SESDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(269942218, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n    };\n}\n\nexport function loadSESDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 269942218) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction loadTupleSESDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    return { $$type: 'SESDeploySuccess' as const, queryId: _queryId, subscriber: _subscriber };\n}\n\nfunction storeTupleSESDeploySuccess(source: SESDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    return builder.build();\n}\n\nfunction dictValueParserSESDeploySuccess(): DictionaryValue<SESDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribe = {\n    $$type: 'SESSubscribe';\n    queryId: bigint;\n    notificationsCount: bigint;\n}\n\nexport function storeSESSubscribe(src: SESSubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1533823831, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1533823831) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSESSubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribe' as const, queryId: _queryId, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSESSubscribe(source: SESSubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribe(): DictionaryValue<SESSubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type DSTTopUpSubscription = {\n    $$type: 'DSTTopUpSubscription';\n    queryId: bigint;\n    subscriber: Address;\n    batch: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeDSTTopUpSubscription(src: DSTTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(495971614, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.subscriber);\n        b_0.storeAddress(src.batch);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadDSTTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 495971614) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _subscriber = sc_0.loadAddress();\n    let _batch = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleDSTTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _subscriber = source.readAddress();\n    let _batch = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'DSTTopUpSubscription' as const, queryId: _queryId, subscriber: _subscriber, batch: _batch, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleDSTTopUpSubscription(source: DSTTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.subscriber);\n    builder.writeAddress(source.batch);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserDSTTopUpSubscription(): DictionaryValue<DSTTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeDSTTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadDSTTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBTopUpSubscription = {\n    $$type: 'SBTopUpSubscription';\n    queryId: bigint;\n    session: Address;\n    notificationsCount: bigint;\n}\n\nexport function storeSBTopUpSubscription(src: SBTopUpSubscription) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(267884312, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.session);\n        b_0.storeInt(src.notificationsCount, 257);\n    };\n}\n\nexport function loadSBTopUpSubscription(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 267884312) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _session = sc_0.loadAddress();\n    let _notificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction loadTupleSBTopUpSubscription(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _session = source.readAddress();\n    let _notificationsCount = source.readBigNumber();\n    return { $$type: 'SBTopUpSubscription' as const, queryId: _queryId, session: _session, notificationsCount: _notificationsCount };\n}\n\nfunction storeTupleSBTopUpSubscription(source: SBTopUpSubscription) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.session);\n    builder.writeNumber(source.notificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBTopUpSubscription(): DictionaryValue<SBTopUpSubscription> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBTopUpSubscription(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBTopUpSubscription(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESSubscribeSuccess = {\n    $$type: 'SESSubscribeSuccess';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESSubscribeSuccess(src: SESSubscribeSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1400038355, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESSubscribeSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1400038355) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESSubscribeSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESSubscribeSuccess' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESSubscribeSuccess(source: SESSubscribeSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESSubscribeSuccess(): DictionaryValue<SESSubscribeSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESSubscribeSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESSubscribeSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESCandlestickPublishedNotification = {\n    $$type: 'SESCandlestickPublishedNotification';\n    queryId: bigint;\n    candlestick: Candlestick;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESCandlestickPublishedNotification(src: SESCandlestickPublishedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3200926804, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.store(storeCandlestick(src.candlestick));\n        let b_1 = new Builder();\n        b_1.storeInt(src.remainingNotificationsCount, 257);\n        b_0.storeRef(b_1.endCell());\n    };\n}\n\nexport function loadSESCandlestickPublishedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3200926804) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _candlestick = loadCandlestick(sc_0);\n    let sc_1 = sc_0.loadRef().beginParse();\n    let _remainingNotificationsCount = sc_1.loadIntBig(257);\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESCandlestickPublishedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    const _candlestick = loadTupleCandlestick(source.readTuple());\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESCandlestickPublishedNotification' as const, queryId: _queryId, candlestick: _candlestick, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESCandlestickPublishedNotification(source: SESCandlestickPublishedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeTuple(storeTupleCandlestick(source.candlestick));\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESCandlestickPublishedNotification(): DictionaryValue<SESCandlestickPublishedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESCandlestickPublishedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESCandlestickPublishedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribedNotification = {\n    $$type: 'SESUnsubscribedNotification';\n    queryId: bigint;\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSESUnsubscribedNotification(src: SESUnsubscribedNotification) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4092566650, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSESUnsubscribedNotification(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4092566650) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSESUnsubscribedNotification(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SESUnsubscribedNotification' as const, queryId: _queryId, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSESUnsubscribedNotification(source: SESUnsubscribedNotification) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribedNotification(): DictionaryValue<SESUnsubscribedNotification> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribedNotification(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribedNotification(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESUnsubscribe = {\n    $$type: 'SESUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSESUnsubscribe(src: SESUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2668625285, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2668625285) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESUnsubscribe(source: SESUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESUnsubscribe(): DictionaryValue<SESUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBUnsubscribe = {\n    $$type: 'SBUnsubscribe';\n    queryId: bigint;\n}\n\nexport function storeSBUnsubscribe(src: SBUnsubscribe) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1095850324, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSBUnsubscribe(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1095850324) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction loadTupleSBUnsubscribe(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SBUnsubscribe' as const, queryId: _queryId };\n}\n\nfunction storeTupleSBUnsubscribe(source: SBUnsubscribe) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSBUnsubscribe(): DictionaryValue<SBUnsubscribe> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBUnsubscribe(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBUnsubscribe(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroy = {\n    $$type: 'SESDestroy';\n    queryId: bigint;\n}\n\nexport function storeSESDestroy(src: SESDestroy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2226780297, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2226780297) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroy' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroy(source: SESDestroy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroy(): DictionaryValue<SESDestroy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SESDestroySuccess = {\n    $$type: 'SESDestroySuccess';\n    queryId: bigint;\n}\n\nexport function storeSESDestroySuccess(src: SESDestroySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(21916563, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadSESDestroySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 21916563) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleSESDestroySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'SESDestroySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleSESDestroySuccess(source: SESDestroySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserSESDestroySuccess(): DictionaryValue<SESDestroySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSESDestroySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSESDestroySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploy = {\n    $$type: 'BRGDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploy(src: BRGDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4195386677, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4195386677) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploy(source: BRGDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploy(): DictionaryValue<BRGDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeploySuccess = {\n    $$type: 'BRGDeploySuccess';\n    queryId: bigint;\n}\n\nexport function storeBRGDeploySuccess(src: BRGDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3142995347, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3142995347) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeploySuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeploySuccess(source: BRGDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeploySuccess(): DictionaryValue<BRGDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBroker = {\n    $$type: 'BRGDeployBroker';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRGDeployBroker(src: BRGDeployBroker) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(298971134, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRGDeployBroker(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 298971134) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRGDeployBroker(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRGDeployBroker' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRGDeployBroker(source: BRGDeployBroker) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBroker(): DictionaryValue<BRGDeployBroker> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBroker(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBroker(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploy = {\n    $$type: 'BRKDeploy';\n    queryId: bigint;\n}\n\nexport function storeBRKDeploy(src: BRKDeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1366331229, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1366331229) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeploy(source: BRKDeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploy(): DictionaryValue<BRKDeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeploySuccess = {\n    $$type: 'BRKDeploySuccess';\n    queryId: bigint;\n    stream: Address;\n}\n\nexport function storeBRKDeploySuccess(src: BRKDeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2536416450, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.stream);\n    };\n}\n\nexport function loadBRKDeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2536416450) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _stream = sc_0.loadAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction loadTupleBRKDeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _stream = source.readAddress();\n    return { $$type: 'BRKDeploySuccess' as const, queryId: _queryId, stream: _stream };\n}\n\nfunction storeTupleBRKDeploySuccess(source: BRKDeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.stream);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeploySuccess(): DictionaryValue<BRKDeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployBrokerSuccess = {\n    $$type: 'BRGDeployBrokerSuccess';\n    queryId: bigint;\n    broker: Address;\n}\n\nexport function storeBRGDeployBrokerSuccess(src: BRGDeployBrokerSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(4042145317, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.broker);\n    };\n}\n\nexport function loadBRGDeployBrokerSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 4042145317) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _broker = sc_0.loadAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction loadTupleBRGDeployBrokerSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _broker = source.readAddress();\n    return { $$type: 'BRGDeployBrokerSuccess' as const, queryId: _queryId, broker: _broker };\n}\n\nfunction storeTupleBRGDeployBrokerSuccess(source: BRGDeployBrokerSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.broker);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployBrokerSuccess(): DictionaryValue<BRGDeployBrokerSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployBrokerSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployBrokerSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccount = {\n    $$type: 'BRGDeployAccount';\n    queryId: bigint;\n}\n\nexport function storeBRGDeployAccount(src: BRGDeployAccount) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3233956202, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRGDeployAccount(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3233956202) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRGDeployAccount(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRGDeployAccount' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRGDeployAccount(source: BRGDeployAccount) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccount(): DictionaryValue<BRGDeployAccount> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccount(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccount(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploy = {\n    $$type: 'BRADeploy';\n    queryId: bigint;\n}\n\nexport function storeBRADeploy(src: BRADeploy) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1181556865, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRADeploy(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1181556865) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRADeploy(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRADeploy' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRADeploy(source: BRADeploy) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploy(): DictionaryValue<BRADeploy> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploy(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploy(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRADeploySuccess = {\n    $$type: 'BRADeploySuccess';\n    queryId: bigint;\n    trader: Address;\n}\n\nexport function storeBRADeploySuccess(src: BRADeploySuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(3517832790, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.trader);\n    };\n}\n\nexport function loadBRADeploySuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 3517832790) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _trader = sc_0.loadAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction loadTupleBRADeploySuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _trader = source.readAddress();\n    return { $$type: 'BRADeploySuccess' as const, queryId: _queryId, trader: _trader };\n}\n\nfunction storeTupleBRADeploySuccess(source: BRADeploySuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.trader);\n    return builder.build();\n}\n\nfunction dictValueParserBRADeploySuccess(): DictionaryValue<BRADeploySuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRADeploySuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRADeploySuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRGDeployAccountSuccess = {\n    $$type: 'BRGDeployAccountSuccess';\n    queryId: bigint;\n    account: Address;\n}\n\nexport function storeBRGDeployAccountSuccess(src: BRGDeployAccountSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(1962963078, 32);\n        b_0.storeUint(src.queryId, 64);\n        b_0.storeAddress(src.account);\n    };\n}\n\nexport function loadBRGDeployAccountSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 1962963078) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    let _account = sc_0.loadAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction loadTupleBRGDeployAccountSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    let _account = source.readAddress();\n    return { $$type: 'BRGDeployAccountSuccess' as const, queryId: _queryId, account: _account };\n}\n\nfunction storeTupleBRGDeployAccountSuccess(source: BRGDeployAccountSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    builder.writeAddress(source.account);\n    return builder.build();\n}\n\nfunction dictValueParserBRGDeployAccountSuccess(): DictionaryValue<BRGDeployAccountSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRGDeployAccountSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRGDeployAccountSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDeposit = {\n    $$type: 'BRKDeposit';\n    queryId: bigint;\n}\n\nexport function storeBRKDeposit(src: BRKDeposit) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2141827764, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDeposit(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2141827764) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDeposit(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDeposit' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDeposit(source: BRKDeposit) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDeposit(): DictionaryValue<BRKDeposit> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDeposit(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDeposit(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKDepositSuccess = {\n    $$type: 'BRKDepositSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKDepositSuccess(src: BRKDepositSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2064422216, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKDepositSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2064422216) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKDepositSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKDepositSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKDepositSuccess(source: BRKDepositSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKDepositSuccess(): DictionaryValue<BRKDepositSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKDepositSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKDepositSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdraw = {\n    $$type: 'BRKWithdraw';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdraw(src: BRKWithdraw) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(550691255, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdraw(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 550691255) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdraw(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdraw' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdraw(source: BRKWithdraw) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdraw(): DictionaryValue<BRKWithdraw> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdraw(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdraw(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type BRKWithdrawSuccess = {\n    $$type: 'BRKWithdrawSuccess';\n    queryId: bigint;\n}\n\nexport function storeBRKWithdrawSuccess(src: BRKWithdrawSuccess) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeUint(2654800410, 32);\n        b_0.storeUint(src.queryId, 64);\n    };\n}\n\nexport function loadBRKWithdrawSuccess(slice: Slice) {\n    let sc_0 = slice;\n    if (sc_0.loadUint(32) !== 2654800410) { throw Error('Invalid prefix'); }\n    let _queryId = sc_0.loadUintBig(64);\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction loadTupleBRKWithdrawSuccess(source: TupleReader) {\n    let _queryId = source.readBigNumber();\n    return { $$type: 'BRKWithdrawSuccess' as const, queryId: _queryId };\n}\n\nfunction storeTupleBRKWithdrawSuccess(source: BRKWithdrawSuccess) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.queryId);\n    return builder.build();\n}\n\nfunction dictValueParserBRKWithdrawSuccess(): DictionaryValue<BRKWithdrawSuccess> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeBRKWithdrawSuccess(src)).endCell());\n        },\n        parse: (src) => {\n            return loadBRKWithdrawSuccess(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SubscriptionInfo = {\n    $$type: 'SubscriptionInfo';\n    remainingNotificationsCount: bigint;\n}\n\nexport function storeSubscriptionInfo(src: SubscriptionInfo) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.remainingNotificationsCount, 257);\n    };\n}\n\nexport function loadSubscriptionInfo(slice: Slice) {\n    let sc_0 = slice;\n    let _remainingNotificationsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SubscriptionInfo' as const, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction loadTupleSubscriptionInfo(source: TupleReader) {\n    let _remainingNotificationsCount = source.readBigNumber();\n    return { $$type: 'SubscriptionInfo' as const, remainingNotificationsCount: _remainingNotificationsCount };\n}\n\nfunction storeTupleSubscriptionInfo(source: SubscriptionInfo) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.remainingNotificationsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSubscriptionInfo(): DictionaryValue<SubscriptionInfo> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSubscriptionInfo(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSubscriptionInfo(src.loadRef().beginParse());\n        }\n    }\n}\n\nexport type SBInfo = {\n    $$type: 'SBInfo';\n    subscriptionsCount: bigint;\n}\n\nexport function storeSBInfo(src: SBInfo) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeInt(src.subscriptionsCount, 257);\n    };\n}\n\nexport function loadSBInfo(slice: Slice) {\n    let sc_0 = slice;\n    let _subscriptionsCount = sc_0.loadIntBig(257);\n    return { $$type: 'SBInfo' as const, subscriptionsCount: _subscriptionsCount };\n}\n\nfunction loadTupleSBInfo(source: TupleReader) {\n    let _subscriptionsCount = source.readBigNumber();\n    return { $$type: 'SBInfo' as const, subscriptionsCount: _subscriptionsCount };\n}\n\nfunction storeTupleSBInfo(source: SBInfo) {\n    let builder = new TupleBuilder();\n    builder.writeNumber(source.subscriptionsCount);\n    return builder.build();\n}\n\nfunction dictValueParserSBInfo(): DictionaryValue<SBInfo> {\n    return {\n        serialize: (src, builder) => {\n            builder.storeRef(beginCell().store(storeSBInfo(src)).endCell());\n        },\n        parse: (src) => {\n            return loadSBInfo(src.loadRef().beginParse());\n        }\n    }\n}\n\n type SubscriptionBatch_init_args = {\n    $$type: 'SubscriptionBatch_init_args';\n    stream: Address;\n    batchId: bigint;\n}\n\nfunction initSubscriptionBatch_init_args(src: SubscriptionBatch_init_args) {\n    return (builder: Builder) => {\n        let b_0 = builder;\n        b_0.storeAddress(src.stream);\n        b_0.storeInt(src.batchId, 257);\n    };\n}\n\nasync function SubscriptionBatch_init(stream: Address, batchId: bigint) {\n    const __code = Cell.fromBase64('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');\n    const __system = Cell.fromBase64('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');\n    let builder = beginCell();\n    builder.storeRef(__system);\n    builder.storeUint(0, 1);\n    initSubscriptionBatch_init_args({ $$type: 'SubscriptionBatch_init_args', stream, batchId })(builder);\n    const __data = builder.endCell();\n    return { code: __code, data: __data };\n}\n\nconst SubscriptionBatch_errors: { [key: number]: { message: string } } = {\n    2: { message: `Stack underflow` },\n    3: { message: `Stack overflow` },\n    4: { message: `Integer overflow` },\n    5: { message: `Integer out of expected range` },\n    6: { message: `Invalid opcode` },\n    7: { message: `Type check error` },\n    8: { message: `Cell overflow` },\n    9: { message: `Cell underflow` },\n    10: { message: `Dictionary error` },\n    13: { message: `Out of gas error` },\n    32: { message: `Method ID not found` },\n    34: { message: `Action is invalid or not supported` },\n    37: { message: `Not enough TON` },\n    38: { message: `Not enough extra-currencies` },\n    128: { message: `Null reference exception` },\n    129: { message: `Invalid serialization prefix` },\n    130: { message: `Invalid incoming message` },\n    131: { message: `Constraints error` },\n    132: { message: `Access denied` },\n    133: { message: `Contract stopped` },\n    134: { message: `Invalid argument` },\n    135: { message: `Code of a contract was not found` },\n    136: { message: `Invalid address` },\n    137: { message: `Masterchain support is not enabled for this contract` },\n}\n\nconst SubscriptionBatch_types: ABIType[] = [\n    {\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},\n    {\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounced\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},\n    {\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},\n    {\"name\":\"DSTDeploy\",\"header\":306133030,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySuccess\",\"header\":3957924127,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatch\",\"header\":3012477066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeployBatchSuccess\",\"header\":1261138638,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTDeploySession\",\"header\":1658160529,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTDeploySessionSuccess\",\"header\":3452518278,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"DSTSubscribe\",\"header\":3216336466,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTSubscribeSuccess\",\"header\":3770107736,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"Candlestick\",\"header\":null,\"fields\":[{\"name\":\"start\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"end\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"open\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"close\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"high\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"low\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTPublishCandlestick\",\"header\":990592317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}}]},\n    {\"name\":\"DSTPublishCandlestickSuccess\",\"header\":215123525,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"DSTUnsubscribedNotification\",\"header\":1287102660,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBDeploy\",\"header\":4267613765,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBDeploySuccess\",\"header\":1031311118,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"batchId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribe\",\"header\":2001551522,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBSubscribeSuccess\",\"header\":4082513223,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestick\",\"header\":4051052066,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"publisher\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SBCandlestickPublishedNotification\",\"header\":4175431181,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBUnsubscribedNotification\",\"header\":1003141156,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBPublishCandlestickSuccess\",\"header\":1027631690,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploy\",\"header\":1372687436,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDeploySuccess\",\"header\":269942218,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"SESSubscribe\",\"header\":1533823831,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"DSTTopUpSubscription\",\"header\":495971614,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"subscriber\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"batch\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBTopUpSubscription\",\"header\":267884312,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"session\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"notificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESSubscribeSuccess\",\"header\":1400038355,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESCandlestickPublishedNotification\",\"header\":3200926804,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"candlestick\",\"type\":{\"kind\":\"simple\",\"type\":\"Candlestick\",\"optional\":false}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribedNotification\",\"header\":4092566650,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SESUnsubscribe\",\"header\":2668625285,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SBUnsubscribe\",\"header\":1095850324,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroy\",\"header\":2226780297,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SESDestroySuccess\",\"header\":21916563,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploy\",\"header\":4195386677,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeploySuccess\",\"header\":3142995347,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRGDeployBroker\",\"header\":298971134,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeploy\",\"header\":1366331229,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDeploySuccess\",\"header\":2536416450,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"stream\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployBrokerSuccess\",\"header\":4042145317,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"broker\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccount\",\"header\":3233956202,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploy\",\"header\":1181556865,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRADeploySuccess\",\"header\":3517832790,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"trader\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRGDeployAccountSuccess\",\"header\":1962963078,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"account\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},\n    {\"name\":\"BRKDeposit\",\"header\":2141827764,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKDepositSuccess\",\"header\":2064422216,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdraw\",\"header\":550691255,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"BRKWithdrawSuccess\",\"header\":2654800410,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},\n    {\"name\":\"SubscriptionInfo\",\"header\":null,\"fields\":[{\"name\":\"remainingNotificationsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n    {\"name\":\"SBInfo\",\"header\":null,\"fields\":[{\"name\":\"subscriptionsCount\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},\n]\n\nconst SubscriptionBatch_getters: ABIGetter[] = [\n    {\"name\":\"balance\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"storageReserve\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"streamAddress\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},\n    {\"name\":\"batchId\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n    {\"name\":\"subscriptions\",\"arguments\":[],\"returnType\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"SubscriptionInfo\",\"valueFormat\":\"ref\"}},\n    {\"name\":\"subscriptionsCount\",\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},\n]\n\nconst SubscriptionBatch_receivers: ABIReceiver[] = [\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBDeploy\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBSubscribe\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBTopUpSubscription\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBPublishCandlestick\"}},\n    {\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SBUnsubscribe\"}},\n]\n\nexport class SubscriptionBatch implements Contract {\n    \n    static async init(stream: Address, batchId: bigint) {\n        return await SubscriptionBatch_init(stream, batchId);\n    }\n    \n    static async fromInit(stream: Address, batchId: bigint) {\n        const init = await SubscriptionBatch_init(stream, batchId);\n        const address = contractAddress(0, init);\n        return new SubscriptionBatch(address, init);\n    }\n    \n    static fromAddress(address: Address) {\n        return new SubscriptionBatch(address);\n    }\n    \n    readonly address: Address; \n    readonly init?: { code: Cell, data: Cell };\n    readonly abi: ContractABI = {\n        types:  SubscriptionBatch_types,\n        getters: SubscriptionBatch_getters,\n        receivers: SubscriptionBatch_receivers,\n        errors: SubscriptionBatch_errors,\n    };\n    \n    private constructor(address: Address, init?: { code: Cell, data: Cell }) {\n        this.address = address;\n        this.init = init;\n    }\n    \n    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: SBDeploy | SBSubscribe | SBTopUpSubscription | SBPublishCandlestick | SBUnsubscribe) {\n        \n        let body: Cell | null = null;\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBDeploy') {\n            body = beginCell().store(storeSBDeploy(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBSubscribe') {\n            body = beginCell().store(storeSBSubscribe(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBTopUpSubscription') {\n            body = beginCell().store(storeSBTopUpSubscription(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBPublishCandlestick') {\n            body = beginCell().store(storeSBPublishCandlestick(message)).endCell();\n        }\n        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SBUnsubscribe') {\n            body = beginCell().store(storeSBUnsubscribe(message)).endCell();\n        }\n        if (body === null) { throw new Error('Invalid message type'); }\n        \n        await provider.internal(via, { ...args, body: body });\n        \n    }\n    \n    async getBalance(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('balance', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getStorageReserve(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('storageReserve', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getStreamAddress(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('streamAddress', builder.build())).stack;\n        let result = source.readAddress();\n        return result;\n    }\n    \n    async getBatchId(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('batchId', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n    async getSubscriptions(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('subscriptions', builder.build())).stack;\n        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), dictValueParserSubscriptionInfo(), source.readCellOpt());\n        return result;\n    }\n    \n    async getSubscriptionsCount(provider: ContractProvider) {\n        let builder = new TupleBuilder();\n        let source = (await provider.get('subscriptionsCount', builder.build())).stack;\n        let result = source.readBigNumber();\n        return result;\n    }\n    \n}","import { toNano } from \"@ton/core\";\n\nexport const ERR_ACCESS_DENIED: bigint = 400n;\nexport const ERR_INSUFFICIENT_DEPOSIT: bigint = 401n;\nexport const ERR_BATCH_LIMIT_EXCEEDED: bigint = 402n;\nexport const ERR_SUBSCRIPTION_LIMIT_EXCEEDED: bigint = 403n;\nexport const ERR_INVALID_ARGUMENT: bigint = 404n;\nexport const ERR_STREAM_NOT_SUBSCRIBED: bigint = 405n;\nexport const ERR_STREAM_SUBSCRIBED: bigint = 406n;\nexport const ERR_BATCH_NOT_FOUND: bigint = 407n;\nexport const ERR_OPTION_NOT_EXPIRED: bigint = 408n;\nexport const ERR_INVALID_STATE: bigint = 409n;\nexport const ERR_NOT_DEPLOYED = 410;\nexport const ERR_TIMEOUT_NOT_EXCEEDED = 411;\n\nexport const NOTIFICATION_DEPOSIT = toNano(\"0.03\");\nexport const NOTIFICATION_PREMIUM = toNano(\"0.01\");\n\nexport const SUS_STORAGE_RESERVE = toNano(\"1\");\nexport const SUS_OPERATIONAL_RESERVE = toNano(\"2\");\n\n// THE_GREAT_CONJUCTION_2077 is the timestamp for a significant celestial event in 2077 in seconds since the Unix epoch.\nexport const THE_GREAT_CONJUCTION_2077: number = 3407270400; // Equivalent to '2077-12-31T00:00:00Z'\n\nexport const DAY: number = 86400;\n\n// THE_CELESTIAL_CONVERGENCE is the timestamp for a notable space phenomenon in 2078 in seconds since the Unix epoch.\nexport const THE_CELESTIAL_CONVERGENCE: number = 3408441600; // Equivalent to '2078-07-20T12:00:00Z'\n\nexport const CNO_STATE_DEPLOYED: bigint = 0n;\nexport const CNO_STATE_PENDING_DEPLOY_SESSION: bigint = 1n;\nexport const CNO_STATE_PENDING_SUBSCRIBE_STREAM: bigint = 2n;\nexport const CNO_STATE_INITIATED: bigint = 3n;\nexport const CNO_STATE_SETTLED: bigint = 4n;\nexport const CNO_STATE_PENDING_UNSUBSCRIBE_STREAM: bigint = 5n;\nexport const CNO_STATE_PENDING_DESTROY_SESSION: bigint = 6n;\n"]}